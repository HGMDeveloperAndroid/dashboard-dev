{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nexports.__esModule = true;\nexports.detectDomainLocale = detectDomainLocale;\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n  var domainItem;\n  if (domainItems) {\n    if (detectedLocale) {\n      detectedLocale = detectedLocale.toLowerCase();\n    }\n    var _iterator = _createForOfIteratorHelper(domainItems),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        var _item$domain, _item$locales; // remove port if present\n        var domainHostname = (_item$domain = item.domain) == null ? void 0 : _item$domain.split(':')[0].toLowerCase();\n        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((_item$locales = item.locales) == null ? void 0 : _item$locales.some(function (locale) {\n          return locale.toLowerCase() === detectedLocale;\n        }))) {\n          domainItem = item;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return domainItem;\n}","map":{"version":3,"sources":["../../../../next-server/lib/i18n/detect-domain-locale.ts"],"names":["detectDomainLocale","domainItems","hostname","detectedLocale","domainItem","toLowerCase","item","domainHostname","domain","split","defaultLocale","locales","some","locale"],"mappings":";;;;;;;AAAO,SAASA,kBAAT,CACLC,WADK,EASLC,QATK,EAULC,cAVK,EAWL;EACA,IAAIC,UAAJ;EASA,IAAIH,WAAJ,EAAiB;IACf,IAAIE,cAAJ,EAAoB;MAClBA,cAAc,GAAGA,cAAc,CAACE,WAAfF,EAAjBA;IACD;IAED,IAAA,SAAA,GAAA,0BAAA,CAAmBF,WAAnB;MAAA,KAAA;IAAA;MAAA,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,SAAA,CAAA,CAAA,IAAA,IAAA,GAAgC;QAAA,IAArBK,IAAX,GAAA,KAAA,CAAA,KAAA;QAAgC,IAAA,YAAA,EAAA,aAAA,CAC9B;QACA,IAAMC,cAAc,GAAA,CAAA,YAAA,GAAGD,IAAI,CAACE,MAAR,KAAA,IAAA,GAAA,KAAA,CAAA,GAAGF,YAAAA,CAAaG,KAAbH,CAAmB,GAAnBA,CAAAA,CAAwB,CAAxBA,CAAAA,CAA2BD,WAA3BC,EAAvB;QACA,IACEJ,QAAQ,KAAKK,cAAbL,IACAC,cAAc,KAAKG,IAAI,CAACI,aAALJ,CAAmBD,WAAnBC,EADnBJ,KAAAA,CAAAA,aAAAA,GAEAI,IAAI,CAACK,OAFLT,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAEAI,aAAAA,CAAcM,IAAdN,CAAoBO,UAAAA,MAAD;UAAA,OAAYA,MAAM,CAACR,WAAPQ,EAAAA,KAAyBV,cAAxDG;QAAAA,EAFAJ,CADF,EAIE;UACAE,UAAU,GAAGE,IAAbF;UACA;QACD;MACF;IACF,SAAA,GAAA;MAAA,SAAA,CAAA,CAAA,CAAA,GAAA;IAAA;MAAA,SAAA,CAAA,CAAA;IAAA;EAAA;EAED,OAAOA,UAAP;AACD","sourcesContent":["export function detectDomainLocale(\n  domainItems:\n    | Array<{\n        http?: boolean\n        domain: string\n        locales?: string[]\n        defaultLocale: string\n      }>\n    | undefined,\n  hostname?: string,\n  detectedLocale?: string\n) {\n  let domainItem:\n    | {\n        http?: boolean\n        domain: string\n        locales?: string[]\n        defaultLocale: string\n      }\n    | undefined\n\n  if (domainItems) {\n    if (detectedLocale) {\n      detectedLocale = detectedLocale.toLowerCase()\n    }\n\n    for (const item of domainItems) {\n      // remove port if present\n      const domainHostname = item.domain?.split(':')[0].toLowerCase()\n      if (\n        hostname === domainHostname ||\n        detectedLocale === item.defaultLocale.toLowerCase() ||\n        item.locales?.some((locale) => locale.toLowerCase() === detectedLocale)\n      ) {\n        domainItem = item\n        break\n      }\n    }\n  }\n\n  return domainItem\n}\n"]},"metadata":{},"sourceType":"script"}