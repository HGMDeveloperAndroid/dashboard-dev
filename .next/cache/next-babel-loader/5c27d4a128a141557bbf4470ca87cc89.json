{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hgm\\\\Desktop\\\\Maquina3B\\\\ManDoc\\\\Proyectos\\\\Php\\\\DashBoard\\\\SVN\\\\Develop\\\\pricecheck-dashboard\\\\components\\\\autocomplete\\\\Autocomplete.tsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nexport default class Autocomplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"state\", {\n      value: '',\n      suggestions: [],\n      defaultValueWasDefined: false\n    });\n    _defineProperty(this, \"onChange\", (event, {\n      newValue\n    }) => {\n      const nextState = {\n        value: newValue\n      };\n      this.setState(nextState);\n    });\n    _defineProperty(this, \"onSuggestionsFetchRequested\", context => {\n      const {\n        getSuggestions\n      } = this.props;\n      const value = context.reason == 'input-changed' ? context.value : '';\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n    _defineProperty(this, \"onSuggestionsClearRequested\", () => {\n      this.setState({\n        suggestions: []\n      });\n    });\n    _defineProperty(this, \"shouldRenderSuggestions\", (value, reason) => {\n      return true;\n    });\n  }\n  componentWillReceiveProps() {\n    if (!this.props.resetLine && this.state.value) {\n      this.setState({\n        value: ''\n      });\n    }\n  }\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const {\n      resetLine,\n      defaultValue,\n      tabindex,\n      placeholder,\n      onSuggestionSelected,\n      getSuggestionValue,\n      renderSuggestion,\n      disabled,\n      useWhiteText\n    } = this.props;\n    const textWhite = useWhiteText ? 'text-white' : '';\n    const inputProps = {\n      placeholder: !value && defaultValue ? defaultValue : placeholder,\n      tabIndex: tabindex,\n      disabled,\n      value,\n      onChange: this.onChange,\n      className: `indexed-element react-autosuggest__input ${textWhite}`\n    };\n    return __jsx(\"div\", {\n      className: \"autocomplete-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      className: textWhite,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, placeholder, \": \"), __jsx(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      onSuggestionSelected: onSuggestionSelected,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      highlightFirstSuggestion: true,\n      shouldRenderSuggestions: this.shouldRenderSuggestions,\n      focusInputOnSuggestionClick: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }));\n  }\n}\n_defineProperty(Autocomplete, \"defaultProps\", {\n  resetLine: false,\n  defaultValue: ''\n});","map":{"version":3,"names":["React","Autosuggest","Autocomplete","Component","constructor","args","_defineProperty","value","suggestions","defaultValueWasDefined","event","newValue","nextState","setState","context","getSuggestions","props","reason","componentWillReceiveProps","resetLine","state","render","defaultValue","tabindex","placeholder","onSuggestionSelected","getSuggestionValue","renderSuggestion","disabled","useWhiteText","textWhite","inputProps","tabIndex","onChange","className","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSuggestionsFetchRequested","onSuggestionsClearRequested","highlightFirstSuggestion","shouldRenderSuggestions","focusInputOnSuggestionClick"],"sources":["C:/Users/hgm/Desktop/Maquina3B/ManDoc/Proyectos/Php/DashBoard/SVN/Develop/pricecheck-dashboard/components/autocomplete/Autocomplete.tsx"],"sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\n\nexport default class Autocomplete extends React.Component<any, any> {\n    state = {\n        value: '',\n        suggestions: [],\n        defaultValueWasDefined: false,\n    };\n\n    static defaultProps = {\n        resetLine: false,\n        defaultValue: '',\n    }\n\n    onChange = (event, { newValue }) => {\n        const nextState = {\n            value: newValue,\n        };\n\n        this.setState(nextState);\n    };\n\n    componentWillReceiveProps() {\n        if (!this.props.resetLine && this.state.value) {\n            this.setState({\n                value: '',\n            });\n        }\n    }\n\n    onSuggestionsFetchRequested = (context) => {\n        const { getSuggestions } = this.props;\n        const value = context.reason == 'input-changed' ? context.value : '';\n\n        this.setState({\n            suggestions: getSuggestions(value)\n        });\n    };\n\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    shouldRenderSuggestions = (value, reason) => {\n        return  true ;\n    }\n\n    render() {\n        const { value, suggestions } = this.state;\n        const { resetLine, defaultValue, tabindex, placeholder, onSuggestionSelected, getSuggestionValue, renderSuggestion, disabled, useWhiteText } = this.props;\n        const textWhite = useWhiteText ? 'text-white' : '';\n\n        const inputProps = {\n            placeholder: !value && defaultValue ? defaultValue : placeholder,\n            tabIndex: tabindex,\n            disabled,\n            value,\n            onChange: this.onChange,\n            className: `indexed-element react-autosuggest__input ${textWhite}`\n\n        };\n        return (\n            <div className='autocomplete-wrapper'>\n                <span className={textWhite}>{placeholder}: </span>\n                <Autosuggest\n                    suggestions={suggestions}\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                    onSuggestionSelected={onSuggestionSelected}\n                    getSuggestionValue={getSuggestionValue}\n                    renderSuggestion={renderSuggestion}\n                    inputProps={inputProps}\n                    highlightFirstSuggestion={true}\n                    shouldRenderSuggestions= {this.shouldRenderSuggestions}\n                    focusInputOnSuggestionClick={false}\n                />\n            </div>\n        );\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}