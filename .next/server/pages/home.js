module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./pages/home/index.tsx");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../next-server/lib/router-context":
/*!**************************************************************!*\
  !*** external "next/dist/next-server/lib/router-context.js" ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/router-context.js");

/***/ }),

/***/ "./components/autocomplete/Autocomplete.tsx":
/*!**************************************************!*\
  !*** ./components/autocomplete/Autocomplete.tsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Autocomplete; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_autosuggest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-autosuggest */ "react-autosuggest");
/* harmony import */ var react_autosuggest__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_autosuggest__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\autocomplete\\Autocomplete.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


class Autocomplete extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      value: '',
      suggestions: [],
      defaultValueWasDefined: false
    });
    _defineProperty(this, "onChange", (event, {
      newValue
    }) => {
      const nextState = {
        value: newValue
      };
      this.setState(nextState);
    });
    _defineProperty(this, "onSuggestionsFetchRequested", context => {
      const {
        getSuggestions
      } = this.props;
      const value = context.reason == 'input-changed' ? context.value : '';
      this.setState({
        suggestions: getSuggestions(value)
      });
    });
    _defineProperty(this, "onSuggestionsClearRequested", () => {
      this.setState({
        suggestions: []
      });
    });
    _defineProperty(this, "shouldRenderSuggestions", (value, reason) => {
      return true;
    });
  }
  componentWillReceiveProps() {
    if (!this.props.resetLine && this.state.value) {
      this.setState({
        value: ''
      });
    }
  }
  render() {
    const {
      value,
      suggestions
    } = this.state;
    const {
      resetLine,
      defaultValue,
      tabindex,
      placeholder,
      onSuggestionSelected,
      getSuggestionValue,
      renderSuggestion,
      disabled,
      useWhiteText
    } = this.props;
    const textWhite = useWhiteText ? 'text-white' : '';
    const inputProps = {
      placeholder: !value && defaultValue ? defaultValue : placeholder,
      tabIndex: tabindex,
      disabled,
      value,
      onChange: this.onChange,
      className: `indexed-element react-autosuggest__input ${textWhite}`
    };
    return __jsx("div", {
      className: "autocomplete-wrapper",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 66,
        columnNumber: 13
      }
    }, __jsx("span", {
      className: textWhite,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 67,
        columnNumber: 17
      }
    }, placeholder, ": "), __jsx(react_autosuggest__WEBPACK_IMPORTED_MODULE_1___default.a, {
      suggestions: suggestions,
      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,
      onSuggestionsClearRequested: this.onSuggestionsClearRequested,
      onSuggestionSelected: onSuggestionSelected,
      getSuggestionValue: getSuggestionValue,
      renderSuggestion: renderSuggestion,
      inputProps: inputProps,
      highlightFirstSuggestion: true,
      shouldRenderSuggestions: this.shouldRenderSuggestions,
      focusInputOnSuggestionClick: false,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 68,
        columnNumber: 17
      }
    }));
  }
}
_defineProperty(Autocomplete, "defaultProps", {
  resetLine: false,
  defaultValue: ''
});

/***/ }),

/***/ "./components/autocomplete/index.tsx":
/*!*******************************************!*\
  !*** ./components/autocomplete/index.tsx ***!
  \*******************************************/
/*! exports provided: Autocomplete */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Autocomplete__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Autocomplete */ "./components/autocomplete/Autocomplete.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Autocomplete", function() { return _Autocomplete__WEBPACK_IMPORTED_MODULE_0__["default"]; });




/***/ }),

/***/ "./components/backdrop/Backdrop.tsx":
/*!******************************************!*\
  !*** ./components/backdrop/Backdrop.tsx ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Backdrop; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _backdrop_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backdrop.module.scss */ "./components/backdrop/backdrop.module.scss");
/* harmony import */ var _backdrop_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_backdrop_module_scss__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\backdrop\\Backdrop.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


function Backdrop({
  display,
  children
}) {
  return __jsx("div", {
    style: {
      display
    },
    className: _backdrop_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.Backdrop,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 9
    }
  }, children);
}

/***/ }),

/***/ "./components/backdrop/backdrop.module.scss":
/*!**************************************************!*\
  !*** ./components/backdrop/backdrop.module.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"Backdrop": "backdrop_Backdrop__-CWnZ"
};


/***/ }),

/***/ "./components/buttons/PrimaryButton.tsx":
/*!**********************************************!*\
  !*** ./components/buttons/PrimaryButton.tsx ***!
  \**********************************************/
/*! exports provided: PrimaryButton, PrimaryButtonVariant */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimaryButton", function() { return PrimaryButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimaryButtonVariant", function() { return PrimaryButtonVariant; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _button_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button.module.scss */ "./components/buttons/button.module.scss");
/* harmony import */ var _button_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_button_module_scss__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\buttons\\PrimaryButton.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


var PrimaryButtonVariant = /*#__PURE__*/function (PrimaryButtonVariant) {
  PrimaryButtonVariant[PrimaryButtonVariant["Success"] = 0] = "Success";
  PrimaryButtonVariant[PrimaryButtonVariant["Error"] = 1] = "Error";
  return PrimaryButtonVariant;
}(PrimaryButtonVariant || {});
const PrimaryButton = ({
  className,
  tabindex,
  label,
  type,
  onClick,
  disabled,
  variant
}) => {
  const buttonClass = variant === PrimaryButtonVariant.Error ? _button_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.primaryButtonError : _button_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.primaryButton;
  return __jsx("button", {
    className: `${buttonClass} ${className}`,
    type: type,
    onClick: onClick,
    disabled: disabled,
    tabIndex: tabindex,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 26,
      columnNumber: 9
    }
  }, label);
};
PrimaryButton.defaultProps = {
  type: 'button',
  onClick: () => {},
  disabled: false,
  variant: PrimaryButtonVariant.Success
};


/***/ }),

/***/ "./components/buttons/SecondaryButton.tsx":
/*!************************************************!*\
  !*** ./components/buttons/SecondaryButton.tsx ***!
  \************************************************/
/*! exports provided: SecondaryButton, SecondaryButtonVariant */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecondaryButton", function() { return SecondaryButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecondaryButtonVariant", function() { return SecondaryButtonVariant; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _button_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button.module.scss */ "./components/buttons/button.module.scss");
/* harmony import */ var _button_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_button_module_scss__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\buttons\\SecondaryButton.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


var SecondaryButtonVariant = /*#__PURE__*/function (SecondaryButtonVariant) {
  SecondaryButtonVariant[SecondaryButtonVariant["Success"] = 0] = "Success";
  SecondaryButtonVariant[SecondaryButtonVariant["Error"] = 1] = "Error";
  return SecondaryButtonVariant;
}(SecondaryButtonVariant || {});
const SecondaryButton = ({
  className,
  tabindex,
  label,
  type,
  onClick,
  variant,
  noBorder,
  disabled
}) => {
  const buttonClass = variant === SecondaryButtonVariant.Success ? _button_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.secondaryButton : _button_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.secondaryButtonError;
  return __jsx("button", {
    className: `${buttonClass} ${className} ${disabled && _button_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.disabled}`,
    style: noBorder ? {
      border: 'none'
    } : {},
    type: type,
    disabled: disabled,
    onClick: onClick,
    tabIndex: tabindex,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 9
    }
  }, label);
};
SecondaryButton.defaultProps = {
  type: 'button',
  disabled: false,
  onClick: () => {},
  variant: SecondaryButtonVariant.Success,
  noBorder: false
};


/***/ }),

/***/ "./components/buttons/button.module.scss":
/*!***********************************************!*\
  !*** ./components/buttons/button.module.scss ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"primaryButton": "button_primaryButton__27mbY",
	"primaryButtonError": "button_primaryButtonError__3qmyM",
	"disabled": "button_disabled__W5_vN",
	"secondaryButton": "button_secondaryButton__1N1vM",
	"secondaryButtonError": "button_secondaryButtonError__2JdXs"
};


/***/ }),

/***/ "./components/buttons/index.js":
/*!*************************************!*\
  !*** ./components/buttons/index.js ***!
  \*************************************/
/*! exports provided: PrimaryButton, SecondaryButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _PrimaryButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PrimaryButton */ "./components/buttons/PrimaryButton.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrimaryButton", function() { return _PrimaryButton__WEBPACK_IMPORTED_MODULE_0__["PrimaryButton"]; });

/* harmony import */ var _SecondaryButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SecondaryButton */ "./components/buttons/SecondaryButton.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SecondaryButton", function() { return _SecondaryButton__WEBPACK_IMPORTED_MODULE_1__["SecondaryButton"]; });





/***/ }),

/***/ "./components/checkbox/Checkbox.tsx":
/*!******************************************!*\
  !*** ./components/checkbox/Checkbox.tsx ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Checkbox; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _checkbox_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkbox.module.scss */ "./components/checkbox/checkbox.module.scss");
/* harmony import */ var _checkbox_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_checkbox_module_scss__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\checkbox\\Checkbox.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


function Checkbox(props) {
  const {
    onChange = () => {},
    label,
    checked = false,
    className = '',
    checkboxClassName = '',
    disabled = false,
    style = {},
    tabindex
  } = props;
  const random = Math.random();
  const customId = `checkbox-${random}`;
  const classNames = [className, disabled ? _checkbox_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.disabled : null].join(' ');
  return __jsx("p", {
    className: `${classNames} text-left`,
    style: style,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 36,
      columnNumber: 9
    }
  }, __jsx("input", {
    id: customId,
    className: `${_checkbox_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.checkbox} ${checkboxClassName}`,
    type: "checkbox",
    checked: checked,
    onChange: onChange,
    disabled: disabled,
    tabIndex: tabindex,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 40,
      columnNumber: 13
    }
  }), __jsx("label", {
    htmlFor: customId,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 49,
      columnNumber: 13
    }
  }, label));
}

/***/ }),

/***/ "./components/checkbox/checkbox.module.scss":
/*!**************************************************!*\
  !*** ./components/checkbox/checkbox.module.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"checkbox": "checkbox_checkbox__3kuZs",
	"disabled": "checkbox_disabled__2DuYK"
};


/***/ }),

/***/ "./components/checkbox/index.js":
/*!**************************************!*\
  !*** ./components/checkbox/index.js ***!
  \**************************************/
/*! exports provided: Checkbox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Checkbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Checkbox */ "./components/checkbox/Checkbox.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Checkbox", function() { return _Checkbox__WEBPACK_IMPORTED_MODULE_0__["default"]; });




/***/ }),

/***/ "./components/header/Header.tsx":
/*!**************************************!*\
  !*** ./components/header/Header.tsx ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ "@fortawesome/react-fontawesome");
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ "@fortawesome/free-solid-svg-icons");
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _header_module_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./header.module.scss */ "./components/header/header.module.scss");
/* harmony import */ var _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_header_module_scss__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../i18n */ "./i18n/index.ts");
/* harmony import */ var _utils_session_management__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/session-management */ "./utils/session-management.ts");
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\header\\Header.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }









class Header extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      name: '',
      profilePicture: null,
      showMenu: false,
      howShowMenu: 'key',
      isAnalyst: '',
      logo: ''
    });
    _defineProperty(this, "handleKeydown", e => {
      const key = e.which || e.keyCode;
      const ctrl = e.ctrlKey ? e.ctrlKey : key === 17 ? true : false;
      if (key == 55 && ctrl) {
        if (!this.state.showMenu) {
          this.setState({
            showMenu: true,
            howShowMenu: 'key'
          });
        } else if (this.state.howShowMenu === 'key' && this.state.showMenu) {
          this.setState({
            showMenu: false
          });
        }
      }
    });
    _defineProperty(this, "closeSession", () => {
      Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_7__["deleteSession"])();
      next_router__WEBPACK_IMPORTED_MODULE_1___default.a.push('/login');
    });
  }
  componentDidMount() {
    const rolAnalyst = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_7__["validateIsAnalyst"])();
    const logo = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_7__["getLogo"])();
    this.setState({
      name: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_7__["getName"])(),
      profilePicture: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_7__["getProfilePicture"])(),
      isAnalyst: rolAnalyst,
      logo
    });
    window.addEventListener("keydown", e => this.handleKeydown(e));
  }
  componentWillUnmount() {
    window.removeEventListener('keydown', e => this.handleKeydown(e));
  }
  render() {
    const {
      name,
      profilePicture,
      showMenu,
      isAnalyst,
      logo
    } = this.state;
    const locale = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_7__["getLocale"])();
    return __jsx("div", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.header,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 68,
        columnNumber: 13
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 69,
        columnNumber: 17
      }
    }, __jsx("a", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 69,
        columnNumber: 36
      }
    }, __jsx("img", {
      src: logo,
      style: logo != "" ? {
        width: '55px',
        height: '50px'
      } : {},
      alt: "Logo 3B",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 69,
        columnNumber: 39
      }
    }))), __jsx("ul", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.optionsList,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 70,
        columnNumber: 17
      }
    }, __jsx("li", {
      className: isAnalyst ? _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.optionDisabled : _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.option,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 71,
        columnNumber: 21
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 25
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.validations'))), __jsx("li", {
      className: isAnalyst ? _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.optionDisabled : _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.option,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 76,
        columnNumber: 21
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/missions",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 25
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.missions'))), __jsx("li", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.option,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 81,
        columnNumber: 21
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/scans",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82,
        columnNumber: 25
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.captures'))), __jsx("li", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.option,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 86,
        columnNumber: 21
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/products",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 87,
        columnNumber: 25
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.products'))), __jsx("li", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.option,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 91,
        columnNumber: 21
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/rankings",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 92,
        columnNumber: 25
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.rankings'))), __jsx("li", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.option,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 96,
        columnNumber: 21
      }
    }, __jsx("a", {
      href: "#",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 97,
        columnNumber: 25
      }
    }, "Reportes"), __jsx("ul", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.dropdown,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 100,
        columnNumber: 25
      }
    }, __jsx(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__["FontAwesomeIcon"], {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.triangle,
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__["faCaretDown"],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 101,
        columnNumber: 29
      }
    }), __jsx("li", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102,
        columnNumber: 29
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/reports/statistic",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 103,
        columnNumber: 33
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.reports.statistic'))), __jsx("li", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 107,
        columnNumber: 29
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/reports/product",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 108,
        columnNumber: 33
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.reports.product'))), __jsx("li", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 112,
        columnNumber: 29
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/reports/scans",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113,
        columnNumber: 33
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.reports.scans'))), __jsx("li", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 117,
        columnNumber: 29
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/reports/geolocalization",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 118,
        columnNumber: 33
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.reports.geolocalization')))))), __jsx("div", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.leftContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 126,
        columnNumber: 17
      }
    }, !isAnalyst && __jsx("div", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.configuration,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 129,
        columnNumber: 29
      }
    }, __jsx(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__["FontAwesomeIcon"], {
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__["faCog"],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 130,
        columnNumber: 33
      }
    }), __jsx("ul", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.dropdown,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 131,
        columnNumber: 33
      }
    }, __jsx(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__["FontAwesomeIcon"], {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.triangle,
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__["faCaretDown"],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 132,
        columnNumber: 37
      }
    }), __jsx("li", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 133,
        columnNumber: 37
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/newCatalogs",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 134,
        columnNumber: 41
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.catalogs'))))), __jsx("div", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.profile,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 143,
        columnNumber: 21
      }
    }, __jsx("div", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.defaultImg,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 151,
        columnNumber: 25
      }
    }, __jsx(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__["FontAwesomeIcon"], {
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__["faUser"],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 151,
        columnNumber: 60
      }
    })), __jsx("span", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 153,
        columnNumber: 25
      }
    }, name), __jsx("ul", {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.dropdown,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 154,
        columnNumber: 25
      }
    }, __jsx(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__["FontAwesomeIcon"], {
      className: _header_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.triangle,
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__["faCaretDown"],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 155,
        columnNumber: 29
      }
    }), __jsx("li", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 156,
        columnNumber: 29
      }
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: "/home/profile",
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 157,
        columnNumber: 33
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.editProfile'))), __jsx("li", {
      onClick: () => this.closeSession(),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 161,
        columnNumber: 29
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_6__["getI18nLabel"])(locale, 'navbar.option.signOut'))))));
  }
}
const withRouter = props => {
  const router = Object(next_router__WEBPACK_IMPORTED_MODULE_1__["useRouter"])();
  return __jsx(Header, _extends({}, props, {
    router: router,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 12
    }
  }));
};
/* harmony default export */ __webpack_exports__["default"] = (withRouter);

/***/ }),

/***/ "./components/header/header.module.scss":
/*!**********************************************!*\
  !*** ./components/header/header.module.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"header": "header_header__3hRD-",
	"optionsList": "header_optionsList__35hHq",
	"option": "header_option__1x7yy",
	"dropdown": "header_dropdown__2nkoK",
	"optionDisabled": "header_optionDisabled__1Zo3R",
	"leftContainer": "header_leftContainer__2rcfp",
	"configuration": "header_configuration__OrMfk",
	"profile": "header_profile__3t0_I",
	"defaultImg": "header_defaultImg__1aafD",
	"profilePicture": "header_profilePicture__2Expr",
	"triangle": "header_triangle__OfVZ1"
};


/***/ }),

/***/ "./components/header/index.js":
/*!************************************!*\
  !*** ./components/header/index.js ***!
  \************************************/
/*! exports provided: Header */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Header */ "./components/header/Header.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Header", function() { return _Header__WEBPACK_IMPORTED_MODULE_0__["default"]; });




/***/ }),

/***/ "./components/input/File.tsx":
/*!***********************************!*\
  !*** ./components/input/File.tsx ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ "@fortawesome/react-fontawesome");
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _input_module_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./input.module.scss */ "./components/input/input.module.scss");
/* harmony import */ var _input_module_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_input_module_scss__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ "@fortawesome/free-solid-svg-icons");
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_3__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\input\\File.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




class File extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "inputRef", void 0);
  }
  render() {
    const {
      label,
      acceptedFormats,
      onChange
    } = this.props;
    return __jsx("div", {
      className: _input_module_scss__WEBPACK_IMPORTED_MODULE_2___default.a.fileContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 19,
        columnNumber: 13
      }
    }, __jsx("input", {
      ref: ref => this.inputRef = ref,
      onChange: e => onChange(e),
      className: _input_module_scss__WEBPACK_IMPORTED_MODULE_2___default.a.file,
      accept: acceptedFormats,
      type: "file",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 20,
        columnNumber: 17
      }
    }), __jsx("button", {
      onClick: () => this.inputRef.click(),
      className: _input_module_scss__WEBPACK_IMPORTED_MODULE_2___default.a.button,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 21,
        columnNumber: 17
      }
    }, label, " ", __jsx(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__["FontAwesomeIcon"], {
      icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_3__["faUpload"],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 21,
        columnNumber: 98
      }
    })));
  }
}
/* harmony default export */ __webpack_exports__["default"] = (File);

/***/ }),

/***/ "./components/input/Input.tsx":
/*!************************************!*\
  !*** ./components/input/Input.tsx ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Input; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _input_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input.module.scss */ "./components/input/input.module.scss");
/* harmony import */ var _input_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_input_module_scss__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ "@fortawesome/react-fontawesome");
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\input\\Input.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



class Input extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      type,
      maxLength,
      placeholder,
      icon,
      bgColor,
      color,
      onChange,
      onKeyPress,
      errorMessage,
      defaultValue,
      placeholderOverLabel,
      minLength,
      placeholderColor,
      disabled,
      inputPlaceholder,
      fontSize,
      tabindex,
      className,
      isBlack
    } = this.props;
    const styleInput = bgColor && color && fontSize ? {
      backgroundColor: bgColor,
      color: color
    } : color ? {
      color: color
    } : bgColor ? {
      backgroundColor: bgColor
    } : {} ? {
      fontSize: fontSize
    } : {};
    let placeholderInput = placeholderOverLabel ? placeholder : '';
    placeholderInput = inputPlaceholder ? inputPlaceholder : placeholderInput;
    return __jsx("div", {
      className: _input_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.inputContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 13
      }
    }, !placeholderOverLabel && __jsx("label", {
      style: placeholderColor ? {
        color: placeholderColor
      } : {},
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 74,
        columnNumber: 21
      }
    }, placeholder, ":"), __jsx("div", {
      className: _input_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.inputLineContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 17
      }
    }, icon && __jsx(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__["FontAwesomeIcon"], {
      icon: icon,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78,
        columnNumber: 30
      }
    }), __jsx("input", {
      minLength: minLength,
      value: defaultValue || '',
      style: styleInput,
      placeholder: placeholderInput,
      onChange: e => onChange(e),
      onKeyPress: e => onKeyPress(e),
      className: `${_input_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.input} ${className}`,
      type: type,
      maxLength: maxLength,
      disabled: disabled,
      tabIndex: tabindex,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80,
        columnNumber: 21
      }
    })), errorMessage && errorMessage.length > 0 && __jsx("p", {
      className: _input_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.errorMessage,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 96,
        columnNumber: 21
      }
    }, errorMessage));
  }
}
_defineProperty(Input, "defaultProps", {
  maxLength: 100,
  minLength: 0,
  placeholderOverLabel: false,
  onKeyPress: () => {},
  isBlack: false
});

/***/ }),

/***/ "./components/input/index.js":
/*!***********************************!*\
  !*** ./components/input/index.js ***!
  \***********************************/
/*! exports provided: Input, File */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Input */ "./components/input/Input.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return _Input__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _File__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./File */ "./components/input/File.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "File", function() { return _File__WEBPACK_IMPORTED_MODULE_1__["default"]; });





/***/ }),

/***/ "./components/input/input.module.scss":
/*!********************************************!*\
  !*** ./components/input/input.module.scss ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"inputContainer": "input_inputContainer__3t-Zv",
	"inputLineContainer": "input_inputLineContainer__2vR2c",
	"input": "input_input__3WNmP",
	"blackInput": "input_blackInput__1wfBX",
	"errorMessage": "input_errorMessage__16yxH",
	"fileContainer": "input_fileContainer__2nKHW",
	"file": "input_file__203al",
	"button": "input_button__1m3_t",
	"tagContainer": "input_tagContainer__1Fl6r",
	"tags": "input_tags__SjHqK",
	"tag": "input_tag__1erH7"
};


/***/ }),

/***/ "./components/loader/Loader.tsx":
/*!**************************************!*\
  !*** ./components/loader/Loader.tsx ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Loader; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _loader_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loader.module.scss */ "./components/loader/loader.module.scss");
/* harmony import */ var _loader_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_loader_module_scss__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _backdrop_Backdrop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../backdrop/Backdrop */ "./components/backdrop/Backdrop.tsx");
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\loader\\Loader.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



function Loader({
  show
}) {
  const display = show ? 'block' : 'none';
  const style = {
    display
  };
  return __jsx("div", {
    style: style,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15,
      columnNumber: 9
    }
  }, __jsx(_backdrop_Backdrop__WEBPACK_IMPORTED_MODULE_2__["default"], {
    display: "show",
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: _loader_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.loaderContainer,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 17,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: _loader_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.Loader,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 18,
      columnNumber: 21
    }
  }, __jsx("span", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 19,
      columnNumber: 25
    }
  }), __jsx("span", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 25
    }
  }), __jsx("span", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 25
    }
  })))));
}

/***/ }),

/***/ "./components/loader/loader.module.scss":
/*!**********************************************!*\
  !*** ./components/loader/loader.module.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"loaderContainer": "loader_loaderContainer__2m7lY",
	"Loader": "loader_Loader__3IqEy",
	"bounce": "loader_bounce__3e5zZ"
};


/***/ }),

/***/ "./components/map/Map.tsx":
/*!********************************!*\
  !*** ./components/map/Map.tsx ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _react_google_maps_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-google-maps/api */ "@react-google-maps/api");
/* harmony import */ var _react_google_maps_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_react_google_maps_api__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\map\\Map.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


class Map extends react__WEBPACK_IMPORTED_MODULE_0__["Component"] {
  render() {
    const {
      lat,
      lng
    } = this.props;
    const center = {
      lat: lat,
      lng: lng
    };
    const containerStyle = {
      width: '100%',
      height: '100%'
    };
    return __jsx(_react_google_maps_api__WEBPACK_IMPORTED_MODULE_1__["LoadScript"], {
      googleMapsApiKey: "AIzaSyB53WxFkvRCwORxy27DWzEI8z6MEsrquyU",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 27,
        columnNumber: 13
      }
    }, __jsx(_react_google_maps_api__WEBPACK_IMPORTED_MODULE_1__["GoogleMap"], {
      mapContainerStyle: containerStyle,
      center: center,
      zoom: 17,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 30,
        columnNumber: 13
      }
    }, /* Child components, such as markers, info windows, etc. */
    __jsx(_react_google_maps_api__WEBPACK_IMPORTED_MODULE_1__["Marker"], {
      position: {
        lat: lat,
        lng: lng
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 36,
        columnNumber: 17
      }
    }), __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null)));
  }
}
/* harmony default export */ __webpack_exports__["default"] = (Map);

/***/ }),

/***/ "./components/modal/Modal.tsx":
/*!************************************!*\
  !*** ./components/modal/Modal.tsx ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Modal; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modal_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modal.module.scss */ "./components/modal/modal.module.scss");
/* harmony import */ var _modal_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_modal_module_scss__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\modal\\Modal.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


class Modal extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleEscapeKey", event => {
      if (this.props.isImageModal === true) {
        if ((event.keyCode === 27 || event.keyCode === 17 || event.keyCode === 88 || event.keyCode === 18) && this.props.closeModal) {
          this.props.closeModal();
        }
      } else {
        if (event.keyCode === 27 && this.props.closeModal) {
          this.props.closeModal();
        }
      }
    });
    _defineProperty(this, "handleCloseModal", event => {
      if (this.props.closeModal) {
        this.props.closeModal();
      }
    });
    _defineProperty(this, "handleKeyModal", e => {
      if (this.props.isImageModal === true) {
        if (e.keyCode === 17 || e.keyCode === 17) {
          // Escape key pressed
          this.props.closeModal();
        }
      } else {
        if (e.keyCode === 17) {
          // Escape key pressed
          this.props.closeModal();
        }
      }
    });
  }
  componentDidUpdate() {
    if (this.props.showModal) {
      document.addEventListener('keyup', this.handleEscapeKey);
    } else {
      document.removeEventListener('keyup', this.handleEscapeKey);
    }
  }
  render() {
    const {
      showModal,
      containerWidth,
      noPadding,
      onKeyDown,
      isImageModal
    } = this.props;
    let containerStyle = {};
    if (!showModal) {
      return null;
    }
    if (containerWidth) {
      containerStyle['width'] = containerWidth;
    }
    if (noPadding) {
      containerStyle['padding'] = '10px';
    }
    return __jsx("div", {
      className: _modal_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.modalContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 76,
        columnNumber: 13
      }
    }, __jsx("div", {
      className: _modal_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.background,
      onKeyDown: e => this.handleKeyModal(e),
      onClick: this.handleCloseModal,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 17
      }
    }), __jsx("div", {
      style: containerStyle,
      className: _modal_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.modal,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78,
        columnNumber: 17
      }
    }, this.props.children));
  }
}
_defineProperty(Modal, "defaultProps", {
  isImageModal: false
});

/***/ }),

/***/ "./components/modal/modal.module.scss":
/*!********************************************!*\
  !*** ./components/modal/modal.module.scss ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"modalContainer": "modal_modalContainer__adjHV",
	"background": "modal_background__2cxml",
	"modal": "modal_modal__2c4cG",
	"dialogModalContainer": "modal_dialogModalContainer__1_woW",
	"dialogModalBg": "modal_dialogModalBg__2c0v9",
	"dialogModal": "modal_dialogModal__1MBzM",
	"btnContainer": "modal_btnContainer__2_Ezt",
	"btnClose": "modal_btnClose__yw17G",
	"btnAccept": "modal_btnAccept__3qMi5"
};


/***/ }),

/***/ "./components/pageTitle/PageTitle.tsx":
/*!********************************************!*\
  !*** ./components/pageTitle/PageTitle.tsx ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _pageTitle_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pageTitle.module.scss */ "./components/pageTitle/pageTitle.module.scss");
/* harmony import */ var _pageTitle_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_pageTitle_module_scss__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\pageTitle\\PageTitle.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


const PageTitle = ({
  title
}) => {
  return __jsx("h1", {
    className: _pageTitle_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.title,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 5
    }
  }, title);
};
/* harmony default export */ __webpack_exports__["default"] = (PageTitle);

/***/ }),

/***/ "./components/pageTitle/pageTitle.module.scss":
/*!****************************************************!*\
  !*** ./components/pageTitle/pageTitle.module.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"title": "pageTitle_title__3w3iw"
};


/***/ }),

/***/ "./components/select/Select.tsx":
/*!**************************************!*\
  !*** ./components/select/Select.tsx ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Select; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _select_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./select.module.scss */ "./components/select/select.module.scss");
/* harmony import */ var _select_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_select_module_scss__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\select\\Select.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


Select.defaultProps = {
  defaultEmpty: true
};
function Select(props) {
  const {
    label,
    options,
    defaultOption,
    bgColor,
    onChange,
    noLabel,
    errorMessage,
    placeholderColor,
    color,
    isDisabled,
    tabindex,
    className,
    defaultEmpty
  } = props;
  const styleInput = bgColor && color ? {
    backgroundColor: bgColor,
    color: color
  } : color ? {
    color: color
  } : bgColor ? {
    backgroundColor: bgColor
  } : {};
  return __jsx("div", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 51,
      columnNumber: 9
    }
  }, !noLabel && __jsx("label", {
    className: _select_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.label,
    style: placeholderColor ? {
      color: placeholderColor
    } : {},
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 17
    }
  }, label), __jsx("select", {
    onChange: e => onChange(e),
    value: defaultOption,
    style: styleInput,
    className: `${_select_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.select} ${className}`,
    disabled: isDisabled,
    tabIndex: tabindex,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 61,
      columnNumber: 13
    }
  }, __jsx("option", {
    disabled: true,
    value: defaultEmpty ? '0' : '',
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 69,
      columnNumber: 17
    }
  }, label), options.map(opt => __jsx("option", {
    key: opt.value,
    value: opt.value,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 74,
      columnNumber: 21
    }
  }, opt.label))), errorMessage && errorMessage.length > 0 && __jsx("p", {
    className: _select_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.errorMessage,
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 84,
      columnNumber: 17
    }
  }, errorMessage));
}

/***/ }),

/***/ "./components/select/index.js":
/*!************************************!*\
  !*** ./components/select/index.js ***!
  \************************************/
/*! exports provided: Select */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Select */ "./components/select/Select.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Select", function() { return _Select__WEBPACK_IMPORTED_MODULE_0__["default"]; });




/***/ }),

/***/ "./components/select/select.module.scss":
/*!**********************************************!*\
  !*** ./components/select/select.module.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"select": "select_select__3XcqA",
	"errorMessage": "select_errorMessage__3rc4W",
	"label": "select_label__2xsYH"
};


/***/ }),

/***/ "./components/square/Square.tsx":
/*!**************************************!*\
  !*** ./components/square/Square.tsx ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _square_module_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./square.module.scss */ "./components/square/square.module.scss");
/* harmony import */ var _square_module_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_square_module_scss__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\components\\square\\Square.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


const Square = props => {
  const {
    title,
    value,
    date,
    bgColor,
    color
  } = props;
  const colorStyle = {
    color: color ? color : '#565656'
  };
  return __jsx("div", {
    style: {
      backgroundColor: bgColor ? bgColor : '#E6EAEE'
    },
    className: _square_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.square,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 9,
      columnNumber: 9
    }
  }, __jsx("p", {
    className: _square_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.title,
    style: colorStyle,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10,
      columnNumber: 13
    }
  }, title), value && __jsx("p", {
    className: _square_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.value,
    style: colorStyle,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 23
    }
  }, "$ ", value), date && __jsx("p", {
    className: _square_module_scss__WEBPACK_IMPORTED_MODULE_1___default.a.date,
    style: colorStyle,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 22
    }
  }, date));
};
/* harmony default export */ __webpack_exports__["default"] = (Square);

/***/ }),

/***/ "./components/square/square.module.scss":
/*!**********************************************!*\
  !*** ./components/square/square.module.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"square": "square_square__1uKlC",
	"title": "square_title__1TQzu",
	"value": "square_value__1Xv9Y",
	"date": "square_date__V2n1v"
};


/***/ }),

/***/ "./i18n/en/advanced-search.ts":
/*!************************************!*\
  !*** ./i18n/en/advanced-search.ts ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  filters: {
    searchField: 'Search by name or product code'
  },
  actions: {
    search: 'Search',
    cleanFilter: 'Clean  Filters',
    download: 'Download',
    comparativeChart: 'Graph Comparatives',
    georeference: 'Geolocation',
    getCurrentReport: 'GET CURRENT LIST'
  }
});

/***/ }),

/***/ "./i18n/en/brands-catalog.ts":
/*!***********************************!*\
  !*** ./i18n/en/brands-catalog.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Brands',
  table: {
    headers: {
      name: 'Name'
    }
  },
  toast: {
    success: {
      title: 'Edit brand'
    },
    error: {
      title: 'Error in  the Request.',
      message: 'Error in the Request.'
    },
    createBrand: {
      success: {
        title: 'Success Notification.',
        message: 'The Brand has been created succesfully. '
      }
    },
    deleteBrand: {
      success: {
        title: 'Success Notification.',
        message: 'The brand has been removed succesfully. '
      }
    },
    editBrand: {
      success: {
        title: 'Success Notification.',
        message: 'The brand has been edited correctly.'
      }
    },
    downloadData: {
      success: {
        title: 'Success Notification.',
        message: 'The report has been downloaded successfully  .'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Create Brand',
      search: 'Search Brand',
      searchByName: 'Search by brand '
    },
    editModal: {
      title: 'Edit brand'
    },
    actions: {
      add: 'Add Brand',
      download: 'Download Report'
    },
    options: {
      save: 'Save',
      create: 'Create'
    }
  }
});

/***/ }),

/***/ "./i18n/en/capture.ts":
/*!****************************!*\
  !*** ./i18n/en/capture.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Capture details',
  input: {
    captureId: {
      label: 'Capture'
    },
    price: {
      label: 'Price'
    },
    priceWithPromotion: {
      label: 'Promo Price'
    },
    barcode: {
      label: 'Bar Code'
    },
    name: {
      label: 'Name'
    },
    brand: {
      label: 'Brand'
    },
    unit: {
      label: 'Unit'
    },
    store: {
      label: 'Store'
    },
    type: {
      label: 'Type'
    },
    group: {
      label: 'Group'
    },
    line: {
      label: 'Line'
    },
    amount: {
      label: 'Grammage / Quantity'
    },
    captureDate: {
      label: 'Date of Capture'
    },
    status: {
      label: 'Status'
    },
    scannedBy: {
      label: 'Scanned by'
    },
    reviewed: {
      label: 'Review'
    },
    branchOffice: {
      label: 'Branch'
    },
    mainImage: {
      label: 'Main Photo'
    },
    priceImage: {
      label: 'Price Photo'
    }
  },
  detailsContainer: {
    title: 'Promo Photo'
  },
  options: {
    changeImage: 'Change Image',
    editInformation: 'Edit Information',
    saveInformation: 'Save Information',
    cancelInformation: 'Cancel'
  }
});

/***/ }),

/***/ "./i18n/en/captures.ts":
/*!*****************************!*\
  !*** ./i18n/en/captures.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'CAPTURES',
  filters: {
    searchField: 'Search by  name or product code',
    startDate: 'From',
    endDate: 'To',
    withImage: 'With Photo',
    withoutImage: 'Without Photo',
    statusRejected: 'Rejected',
    normalPrice: 'Normal Price',
    statusPending: 'Pending',
    statusValidated: 'Validated',
    priceWithPromotion: 'Promo Price',
    param: 'Parameter',
    value: 'Value',
    geolocalitation: 'Geolocation'
  },
  actions: {
    search: 'Search',
    cleanFilter: 'Clean Filters',
    exportGeoData: 'Export Geolocation Data'
  },
  optionsCatalog: {
    brandsCatalog: 'Brand',
    groupsCatalog: 'Group',
    linesCatalog: 'Line',
    storesCatalog: 'Branch',
    unitsCatalog: 'Unit'
  },
  table: {
    head: {
      selected: 'Select',
      id: 'Capture',
      photo_main: 'Main Photo',
      photo_price: 'Price Photo',
      barcode: 'Barcode',
      product: 'Product',
      brand: 'Brand',
      type: 'Type',
      chain: 'Commercial Chain',
      branch: 'Branch',
      scanned_by: 'Capturist',
      reviewed: 'Validator',
      status: 'Status',
      grammage_quantity: 'Quantity',
      unit: 'Unit',
      unit_price: 'Unit Price',
      group: 'Group',
      line: 'Line',
      product_created_date: 'Date of Product Registration',
      lower_price: 'Lowest Price',
      highest_price: 'Highest Price',
      capture_date: 'Capture Date',
      capture_price: 'Capture Price',
      actions: 'Actions'
    }
  },
  status: {
    validated: 'Validated',
    pending: 'Pending'
  },
  units: {
    cm: 'Centimeter',
    m: 'Meter',
    ml: 'Mililiters',
    lt: 'Liter',
    mg: 'Miligram',
    g: 'Gram',
    kg: 'Kilogram',
    pieza: 'Piece'
  },
  modal: {
    delete: {
      buttonAcceptLabel: 'Eliminate',
      message: 'This operation is permanent, Do you  want to  eliminate this element?'
    }
  }
});

/***/ }),

/***/ "./i18n/en/catalogs.ts":
/*!*****************************!*\
  !*** ./i18n/en/catalogs.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Catalogs',
  options: {
    brands: 'Brands',
    unities: 'Units',
    groups: 'Groups',
    lines: 'Lines',
    chain: 'Chains',
    region: 'Regions',
    users: 'Users'
  }
});

/***/ }),

/***/ "./i18n/en/chains-catalog.ts":
/*!***********************************!*\
  !*** ./i18n/en/chains-catalog.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Chains',
  search: 'Search  Chain',
  searchByName: 'Search by name ',
  actions: {
    add: 'Add Chain',
    download: 'Download Report'
  },
  table: {
    headers: {
      id: 'Id',
      name: 'Name',
      alias: 'Alias'
    }
  },
  toast: {
    success: {
      title: 'Success Notification.'
    },
    error: {
      title: 'Error with the request.',
      message: 'Error with the request.'
    },
    create: {
      success: {
        title: 'Success Notification.',
        message: 'Chain created successfully. '
      }
    },
    delete: {
      success: {
        title: 'Success Notification.',
        message: 'Chain has been deleted successfully. '
      }
    },
    edit: {
      success: {
        title: 'Success Notification.',
        message: 'The chain has been edited succesdully.'
      }
    },
    downloadData: {
      success: {
        title: 'Success Notification.',
        message: 'Report has been downloaded successfully.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Create Chain'
    },
    editModal: {
      title: 'Edit Chain'
    },
    options: {
      save: 'Save',
      create: 'Create'
    }
  }
});

/***/ }),

/***/ "./i18n/en/graph-tab-compare.ts":
/*!**************************************!*\
  !*** ./i18n/en/graph-tab-compare.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  tabs: {
    headers: {
      priceList: 'Charts - List Price',
      unitaryPrice: 'Charts - Unit Price',
      history: 'Price History'
    },
    history: {
      headers: {
        date: 'Date',
        price: 'Price'
      }
    }
  },
  startDate: 'Start Date',
  endDate: 'End Date',
  search: 'Search capture by ID',
  modal: {
    delete: {
      buttonAcceptLabel: 'Eliminate',
      message: 'This operation is permanent Do you want to delete this element?'
    }
  }
});

/***/ }),

/***/ "./i18n/en/graph-tab.ts":
/*!******************************!*\
  !*** ./i18n/en/graph-tab.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  startDate: 'Start Date',
  endDate: 'End Date',
  modal: {
    delete: {
      buttonAcceptLabel: 'Eliminate',
      message: 'This operation is permanent, do you want to eliminate this element?'
    }
  }
});

/***/ }),

/***/ "./i18n/en/groups-catalog.ts":
/*!***********************************!*\
  !*** ./i18n/en/groups-catalog.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Groups',
  search: 'Search a group',
  searchByName: 'Search by Name ',
  actions: {
    add: 'Add group',
    download: 'Download Report'
  },
  table: {
    headers: {
      name: 'Name',
      abbreviation: 'Abbreviation'
    }
  },
  toast: {
    success: {
      title: 'Success Notification.'
    },
    error: {
      title: 'Error with the request.',
      message: 'Error with the request.'
    },
    create: {
      success: {
        title: 'Success Notification.',
        message: 'Group has been created successfully. '
      }
    },
    delete: {
      success: {
        title: 'Success Notification.',
        message: 'Group deleted successfully. '
      }
    },
    edit: {
      success: {
        title: 'Success Notification.',
        message: 'Group has been edited successfully.'
      }
    },
    downloadData: {
      success: {
        title: 'Success Notification.',
        message: 'Report downloaded succesfully.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Create  group'
    },
    editModal: {
      title: 'Edit Group'
    },
    options: {
      save: 'Save',
      create: 'Create'
    }
  }
});

/***/ }),

/***/ "./i18n/en/home.ts":
/*!*************************!*\
  !*** ./i18n/en/home.ts ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Validation',
  welcome: 'Select a capture to start.',
  sidebar: {
    title: 'Captures',
    input: {
      mission: {
        label: 'Mission',
        placeholder: ''
      },
      product: {
        label: 'Product',
        placeholder: ''
      }
    },
    scanFilter: {
      all: 'All',
      withProduct: 'With product',
      withoutProduct: 'Without product'
    }
  },
  scan: {
    topBar: {
      beingValidated: 'This register is being validated, select another one',
      withoutNumber: 'Without Number',
      withoutMission: 'Without Mission'
    },
    productImage: {
      label: 'Product'
    },
    priceImage: {
      label: 'Price'
    },
    input: {
      barcode: {
        label: 'Barcode',
        error: 'The Field is required'
      },
      price: {
        label: 'Price',
        error: 'The field is required'
      },
      promotionPrice: {
        label: 'Promo Price',
        error: 'The Field is required'
      },
      store: {
        label: 'Branch',
        error: 'The field is required'
      },
      address: {
        label: 'Address',
        error: 'The field is required'
      },
      aditionalComments: {
        label: 'Additional comments',
        error: 'The field is required'
      }
    },
    option: {
      showPicture: 'Show Photo',
      reject: 'Reject',
      validate: 'Validate capture',
      validateAndAdd: 'Validate and Add'
    }
  },
  product: {
    title: 'Create new product',
    input: {
      name: {
        label: 'Product Name',
        error: 'The field is required'
      },
      barcode: {
        label: 'Barcode',
        error: 'The field is required'
      },
      brand: {
        label: 'Brand',
        error: 'The field is required'
      },
      amount: {
        label: 'Quantity',
        error: 'The field is required'
      },
      unit: {
        label: 'Unit',
        error: 'The field is required'
      },
      group: {
        label: 'Group',
        error: 'The field is required'
      },
      line: {
        label: 'Line',
        error: 'The field is required'
      },
      type: {
        label: 'Type',
        error: 'The field is required'
      }
    },
    option: {
      changeImage: 'Change image'
    }
  },
  modal: {
    reject: {
      subject: 'Select a reason of rejection'
    }
  },
  toast: {
    sendCriterion: {
      success: {
        title: 'Success Notification. ',
        message: 'Capture was rejected succesfully.'
      },
      error: {
        title: 'Error Notification. ',
        message: 'Error with  the  request.'
      }
    }
  },
  radioMapFirst: {
    blurry: 'Blurry  Caption',
    farAway: 'Distant Capture',
    dark: 'Dark Capture',
    incomplete: 'Product description incomplete',
    doesntMatch: 'Mismatched Products'
  },
  radioSecond: {
    outsideShop: 'Capture out of store',
    shopTicket: 'Ticket Capture',
    anotherCell: 'Capture taken with another cellphone',
    testScan: 'Tests'
  },
  history: {
    recent: 'Most Recent',
    mostExpensive: 'Most Expensive',
    cheapest: 'Cheapest',
    cheapestWithPromotion: 'Cheapest with  Promo'
  }
});

/***/ }),

/***/ "./i18n/en/index.ts":
/*!**************************!*\
  !*** ./i18n/en/index.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _navbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./navbar */ "./i18n/en/navbar.ts");
/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./home */ "./i18n/en/home.ts");
/* harmony import */ var _missions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./missions */ "./i18n/en/missions.ts");
/* harmony import */ var _captures__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./captures */ "./i18n/en/captures.ts");
/* harmony import */ var _capture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capture */ "./i18n/en/capture.ts");
/* harmony import */ var _catalogs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./catalogs */ "./i18n/en/catalogs.ts");
/* harmony import */ var _profile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./profile */ "./i18n/en/profile.ts");
/* harmony import */ var _products__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./products */ "./i18n/en/products.ts");
/* harmony import */ var _product__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./product */ "./i18n/en/product.ts");
/* harmony import */ var _rankings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rankings */ "./i18n/en/rankings.ts");
/* harmony import */ var _graph_tab__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graph-tab */ "./i18n/en/graph-tab.ts");
/* harmony import */ var _advanced_search__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./advanced-search */ "./i18n/en/advanced-search.ts");
/* harmony import */ var _table_tab__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./table-tab */ "./i18n/en/table-tab.ts");
/* harmony import */ var _product_tab__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./product-tab */ "./i18n/en/product-tab.ts");
/* harmony import */ var _scanners_tab__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./scanners-tab */ "./i18n/en/scanners-tab.ts");
/* harmony import */ var _validators_tab__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./validators-tab */ "./i18n/en/validators-tab.ts");
/* harmony import */ var _brands_catalog__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./brands-catalog */ "./i18n/en/brands-catalog.ts");
/* harmony import */ var _units_catalog__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./units-catalog */ "./i18n/en/units-catalog.ts");
/* harmony import */ var _groups_catalog__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./groups-catalog */ "./i18n/en/groups-catalog.ts");
/* harmony import */ var _lines_catalog__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./lines-catalog */ "./i18n/en/lines-catalog.ts");
/* harmony import */ var _chains_catalog__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./chains-catalog */ "./i18n/en/chains-catalog.ts");
/* harmony import */ var _regions_catalog__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./regions-catalog */ "./i18n/en/regions-catalog.ts");
/* harmony import */ var _users_catalog__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./users-catalog */ "./i18n/en/users-catalog.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./table */ "./i18n/en/table.ts");
/* harmony import */ var _graph_tab_compare__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./graph-tab-compare */ "./i18n/en/graph-tab-compare.ts");
/* harmony import */ var _product_report__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./product-report */ "./i18n/en/product-report.ts");
/* harmony import */ var _scans_report__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./scans-report */ "./i18n/en/scans-report.ts");
// EN



























/* harmony default export */ __webpack_exports__["default"] = ({
  navbar: _navbar__WEBPACK_IMPORTED_MODULE_0__["default"],
  home: _home__WEBPACK_IMPORTED_MODULE_1__["default"],
  table: _table__WEBPACK_IMPORTED_MODULE_23__["default"],
  missions: _missions__WEBPACK_IMPORTED_MODULE_2__["default"],
  captures: _captures__WEBPACK_IMPORTED_MODULE_3__["default"],
  capture: _capture__WEBPACK_IMPORTED_MODULE_4__["default"],
  catalogs: _catalogs__WEBPACK_IMPORTED_MODULE_5__["default"],
  profile: _profile__WEBPACK_IMPORTED_MODULE_6__["default"],
  products: _products__WEBPACK_IMPORTED_MODULE_7__["default"],
  product: _product__WEBPACK_IMPORTED_MODULE_8__["default"],
  rankings: _rankings__WEBPACK_IMPORTED_MODULE_9__["default"],
  graphTab: _graph_tab__WEBPACK_IMPORTED_MODULE_10__["default"],
  advancedSearch: _advanced_search__WEBPACK_IMPORTED_MODULE_11__["default"],
  tableTab: _table_tab__WEBPACK_IMPORTED_MODULE_12__["default"],
  productTab: _product_tab__WEBPACK_IMPORTED_MODULE_13__["default"],
  scannersTab: _scanners_tab__WEBPACK_IMPORTED_MODULE_14__["default"],
  validatorsTab: _validators_tab__WEBPACK_IMPORTED_MODULE_15__["default"],
  brandsCatalog: _brands_catalog__WEBPACK_IMPORTED_MODULE_16__["default"],
  unitsCatalog: _units_catalog__WEBPACK_IMPORTED_MODULE_17__["default"],
  groupsCatalog: _groups_catalog__WEBPACK_IMPORTED_MODULE_18__["default"],
  linesCatalog: _lines_catalog__WEBPACK_IMPORTED_MODULE_19__["default"],
  chainsCatalog: _chains_catalog__WEBPACK_IMPORTED_MODULE_20__["default"],
  regionsCatalog: _regions_catalog__WEBPACK_IMPORTED_MODULE_21__["default"],
  usersCatalog: _users_catalog__WEBPACK_IMPORTED_MODULE_22__["default"],
  graphTabCompare: _graph_tab_compare__WEBPACK_IMPORTED_MODULE_24__["default"],
  productReport: _product_report__WEBPACK_IMPORTED_MODULE_25__["default"],
  scansReport: _scans_report__WEBPACK_IMPORTED_MODULE_26__["default"]
});

/***/ }),

/***/ "./i18n/en/lines-catalog.ts":
/*!**********************************!*\
  !*** ./i18n/en/lines-catalog.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Lines',
  search: 'Search a line',
  searchByName: 'Search by name ',
  actions: {
    add: 'Add line',
    download: 'Download Report'
  },
  table: {
    headers: {
      name_line: 'Line',
      name_group: 'Group'
    }
  },
  toast: {
    success: {
      title: 'Success Notification.'
    },
    error: {
      title: 'Error with the Request.',
      message: 'Error with the Request.'
    },
    create: {
      success: {
        title: 'Success Notification.',
        message: 'Line created succesfully. '
      }
    },
    delete: {
      success: {
        title: 'Success Notification.',
        message: 'Line has been deleted succesfully. '
      }
    },
    edit: {
      success: {
        title: 'Success Notification.',
        message: 'Line has been edited succesfully.'
      }
    },
    downloadData: {
      success: {
        title: 'Success Notification.',
        message: 'Report downloaded succesfully.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Create line'
    },
    editModal: {
      title: 'Edit line'
    },
    options: {
      save: 'Save',
      create: 'Create'
    }
  }
});

/***/ }),

/***/ "./i18n/en/missions.ts":
/*!*****************************!*\
  !*** ./i18n/en/missions.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'MISSIONS',
  table: {
    head: {
      title: 'Title',
      description: 'Description',
      capture_points: 'Capture Points',
      mission_points: 'Mission Points',
      start_date: 'Start Date',
      end_date: 'End Date',
      regions: 'Region',
      actions: 'Actions'
    }
  },
  options: {
    add: 'New Mission'
  },
  toast: {
    createMission: {
      success: {
        title: 'Success Notification. ',
        message: 'The mission has been created correctly. '
      },
      error: {
        title: 'Error Notification. ',
        duplicatedMessage: 'Duplicated  Title.',
        message: 'Something went wrong. '
      }
    }
  },
  modal: {
    dialog: {
      message: 'This operation cannot be performed because the mission has associated captures',
      options: {
        acept: 'Acept'
      }
    },
    add: {
      title: 'New Mission',
      options: {
        cancel: 'Cancel',
        create: 'Create'
      }
    },
    edit: {
      title: 'Edit Mission',
      options: {
        cancel: 'Cancel',
        edit: 'edit'
      }
    },
    input: {
      title: {
        label: 'Title (required)',
        validations: {
          required: 'The field is required'
        }
      },
      description: {
        label: 'Description (required / max 255 characters)',
        validations: {
          required: 'The field is required',
          minLength: 'The description most have at least 5 characters.',
          maxLength: 'The description most have max 255 characters.'
        }
      },
      startDate: {
        label: 'Start Date',
        validations: {
          required: 'Start date is not valid',
          greaterThan: 'Start date must be greater than yesterday.'
        }
      },
      endDate: {
        label: 'End Date',
        validations: {
          required: 'End date is not valid'
        }
      },
      region: {
        label: 'Select a region',
        validations: {
          required: 'You must select at least one region'
        }
      },
      missionPoints: {
        label: 'Points by Mission',
        validations: {
          valid: 'The score must be a valid number'
        }
      },
      capturePoints: {
        label: 'Points by capture',
        validations: {
          valid: 'The score must be a valid number'
        }
      }
    }
  }
});

/***/ }),

/***/ "./i18n/en/navbar.ts":
/*!***************************!*\
  !*** ./i18n/en/navbar.ts ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  option: {
    validations: 'Validation',
    missions: 'Missions',
    captures: 'Captures',
    products: 'Products',
    rankings: 'Rankings',
    catalogs: 'Catalogs',
    editProfile: 'Edit profile',
    signOut: 'Sign Out',
    reports: {
      geolocalization: 'Reporte de geolocalizacion',
      statistic: 'Reporte de estadísticos',
      product: 'Reporte de producto',
      scans: 'Reporte de capturas'
    }
  }
});

/***/ }),

/***/ "./i18n/en/product-report.ts":
/*!***********************************!*\
  !*** ./i18n/en/product-report.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Product Report',
  newSerach: 'New search',
  placeholderSearch: 'Name / Code',
  selected: 'Selected',
  search: 'Search',
  myList: 'View my list',
  generalSearch: 'General Search',
  saveList: 'Save to my list',
  graphic: 'Graph',
  clearGraphic: 'Clean my list',
  emptyState: 'Do a search to see results',
  emptGraphyState: 'Graph to see the results',
  saveProducts: 'Products have been added to the list',
  saveProductsError: 'An error occurred while saving the list',
  parameter: 'Parameter',
  values: 'Value',
  startDate: 'Start date',
  endDate: 'End date',
  deleteFilters: "Clean filters",
  download: "Download",
  nameOrCode: "Name / code",
  successDownload: "Report downloaded successfully",
  deleteFromList: "Delete from my list",
  successDelete: "Products have been removed from the list",
  errorDelete: "An error occurred while removing products from the list",
  errorDownload: "Error occurred while downloading the report",
  noSelected: "No products selected...",
  card: {
    id: "ID:",
    barcode: "BARCODE:",
    brand: "BRAND:",
    line: "LINE:",
    group: "GROUP:",
    unit: "UNIT:",
    type: "TYPE:",
    name: "NAME:",
    lower_price: "LOWEST PRICE:",
    highest_price: "HIGHEST PRICE:",
    grammage: "GRAMMAGE / UNIT:",
    recently: "Recently",
    higher: "Highest",
    lower: "Lower",
    lowerPromotion: "Lowest with promotion"
  }
});

/***/ }),

/***/ "./i18n/en/product-tab.ts":
/*!********************************!*\
  !*** ./i18n/en/product-tab.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  detail: {
    input: {
      productId: {
        label: 'Product ID'
      },
      barcode: {
        label: 'Barcode'
      },
      name: {
        label: 'Name',
        validations: {
          minLength: 'The field must have at  least two characters'
        }
      },
      brand: {
        label: 'Brand'
      },
      type: {
        label: 'Type'
      },
      group: {
        label: 'Group'
      },
      line: {
        label: 'Line'
      },
      amount: {
        label: 'Grammage / Quantity',
        validations: {
          valid: 'The grammage or quantity must be a valid number: Two decimals max.'
        }
      },
      unit: {
        label: 'Unit'
      },
      mainImage: {
        label: 'Main Photo'
      },
      priceImage: {
        label: 'Price Photo'
      },
      minPrice: {
        label: 'Lowest Price'
      },
      maxPrice: {
        label: 'Highest Price'
      }
    },
    detailsContainer: {
      title: 'Product Price'
    },
    options: {
      cancel: 'Cancel',
      changeImage: 'Change Photo',
      editInformation: 'Edit Information',
      saveInformation: 'Save Information'
    }
  }
});

/***/ }),

/***/ "./i18n/en/product.ts":
/*!****************************!*\
  !*** ./i18n/en/product.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  options: {
    listPrice: 'Graph - List Price',
    unitaryPrice: 'Graph - Unit Price',
    priceHistory: 'Price History',
    detail: 'Detail'
  }
});

/***/ }),

/***/ "./i18n/en/products.ts":
/*!*****************************!*\
  !*** ./i18n/en/products.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'PRODUCTS',
  filters: {
    searchField: 'Search by  name or product code',
    startDate: 'From',
    endDate: 'To',
    updatedAt: 'Modification Date',
    createdAt: 'Create Date',
    param: 'Parameter',
    value: 'Value'
  },
  actions: {
    search: 'Search',
    cleanFilter: 'Clean Filters',
    download: 'Download',
    comparativeChart: 'Graph comparatives'
  },
  optionsCatalog: {
    brandsCatalog: 'Brand',
    groupsCatalog: 'Group',
    linesCatalog: 'Line',
    storesCatalog: 'Chain',
    unitsCatalog: 'Unit'
  },
  modal: {
    delete: {
      buttonAcceptLabel: 'Eliminate',
      message: ''
    }
  },
  table: {
    head: {
      selected: 'Select',
      photo: 'Product Photo',
      product: 'Name',
      barcode: 'Code',
      brand: 'Brand',
      type: 'Type',
      created_at: 'Capture Date',
      updated_at: 'Modification Date',
      grammage_quantity: 'Quantity',
      unit: 'Unit',
      group: 'Group',
      line: 'Line',
      highest_price: 'Highest Price',
      lower_price: 'Lowest Price',
      promotion_lower_price: 'Lowest  Price with promo',
      last_price: 'Last price captured'
    }
  }
});

/***/ }),

/***/ "./i18n/en/profile.ts":
/*!****************************!*\
  !*** ./i18n/en/profile.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  input: {
    role: {
      label: 'Rol *',
      error: 'The field is required'
    },
    first_name: {
      label: 'Name *',
      error: 'The field is required'
    },
    last_name: {
      label: 'Last name *',
      error: 'The field is required'
    },
    mother_last_name: {
      label: 'Mothers last name',
      error: 'The field is required'
    },
    theme: {
      label: 'use dark mode',
      error: 'The field is required'
    },
    locale: {
      label: 'Select Language',
      error: 'The field is required'
    },
    employee_number: {
      label: 'Employee number',
      error: 'The field is required'
    },
    cellphone: {
      label: 'Cellphone Number',
      error: 'The field is required'
    },
    region: {
      label: 'Region',
      error: 'The field is required'
    },
    username: {
      label: 'User *',
      error: 'The field is required'
    },
    password: {
      label: 'Password *',
      error: 'The field is required'
    }
  },
  options: {
    close: 'Close',
    save: 'Save'
  }
});

/***/ }),

/***/ "./i18n/en/rankings.ts":
/*!*****************************!*\
  !*** ./i18n/en/rankings.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Rankings',
  tabs: {
    capturists: {
      title: 'Capturists',
      startDate: 'Start Date',
      endDate: 'End Date',
      input: {
        search: {
          placeholder: 'Search by name or employee number'
        }
      },
      options: {
        clearDate: 'Clean Dates'
      },
      table: {
        header: {
          position: 'Position',
          employeeNumber: 'Employee number',
          name: 'Name',
          percentage: 'Percentaje',
          validatedCaptures: 'Validated Captures',
          points: 'Points'
        }
      }
    },
    validators: {
      title: 'Validators',
      startDate: 'Start Date',
      endDate: 'End Date',
      input: {
        search: {
          placeholder: 'Search by name or employee number'
        }
      },
      options: {
        clearDate: 'Clean Dates',
        generateData: 'Generate Data'
      },
      total: {
        captures: 'Captures  Date',
        validated: 'Validated Total'
      },
      history: {
        captures: 'Captures History',
        validated: 'Validated History'
      },
      table: {
        header: {
          employeeNumber: 'Employee Number',
          nombre: 'Name',
          percentage: 'Percentage',
          validatedCaptures: 'Validated Captures'
        }
      }
    }
  }
});

/***/ }),

/***/ "./i18n/en/regions-catalog.ts":
/*!************************************!*\
  !*** ./i18n/en/regions-catalog.ts ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Regions',
  search: 'Search by Region',
  searchByName: 'Search by Name ',
  actions: {
    add: 'Add Region',
    download: 'Download Report'
  },
  table: {
    headers: {
      name: 'Name',
      alias: 'Alias'
    }
  },
  toast: {
    success: {
      title: 'Success Notification.'
    },
    error: {
      title: 'Error with the Request.',
      message: 'Error with the Request.'
    },
    create: {
      success: {
        title: 'Success Notification.',
        message: 'Region created succesfully. '
      }
    },
    delete: {
      success: {
        title: 'Success Notification.',
        message: 'Region has been deleted succesfully. '
      }
    },
    edit: {
      success: {
        title: 'Success Notification.',
        message: 'Region has been edited succesfully.'
      }
    },
    downloadData: {
      success: {
        title: 'Success Notification.',
        message: 'Report  downloaded successfully.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Create Region'
    },
    editModal: {
      title: 'Edit Region'
    },
    options: {
      save: 'Save',
      create: 'Create'
    }
  }
});

/***/ }),

/***/ "./i18n/en/scanners-tab.ts":
/*!*********************************!*\
  !*** ./i18n/en/scanners-tab.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  startDate: 'Start Date',
  endDate: 'End Date',
  input: {
    search: {
      placeholder: 'Search by  name or employee number'
    },
    mission: {
      placeholder: 'Mission'
    }
  },
  options: {
    clearDate: 'Clean Dates'
  },
  table: {
    header: {
      ranking: 'Position',
      employee_number: 'Employee Number',
      name: 'Name',
      efficiency: 'Percentage',
      validated_captures: 'Validated Captures',
      points: 'Points'
    }
  }
});

/***/ }),

/***/ "./i18n/en/scans-report.ts":
/*!*********************************!*\
  !*** ./i18n/en/scans-report.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Reporte de capturas'
});

/***/ }),

/***/ "./i18n/en/table-tab.ts":
/*!******************************!*\
  !*** ./i18n/en/table-tab.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  table: {
    headers: {
      branchOffice: 'Branch',
      minPrice: 'Lowest Price',
      maxPrice: 'Highest Price',
      currentPrice: 'Current Price',
      averagePrice: 'Average Price'
    },
    options: {
      seeHistory: 'See History'
    }
  },
  modal: {
    table: {
      headers: {
        scan: 'Capture',
        capturedAt: 'Capture Date',
        price: 'Price'
      }
    },
    options: {
      close: 'close'
    }
  }
});

/***/ }),

/***/ "./i18n/en/table.ts":
/*!**************************!*\
  !*** ./i18n/en/table.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  actions: 'Actions'
});

/***/ }),

/***/ "./i18n/en/units-catalog.ts":
/*!**********************************!*\
  !*** ./i18n/en/units-catalog.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Units',
  search: 'Search by Unit',
  searchByName: 'Search by Name ',
  actions: {
    add: 'Add Unit',
    download: 'Download Report'
  },
  table: {
    headers: {
      name: 'Name',
      abbreviation: 'Abbreviation'
    }
  },
  toast: {
    success: {
      title: 'Success Notification.'
    },
    error: {
      title: 'Error with the Request.',
      message: 'Error with the Request.'
    },
    create: {
      success: {
        title: 'Success Notification.',
        message: 'Unit created suuccessfully. '
      }
    },
    delete: {
      success: {
        title: 'Success Notification.',
        message: 'Unit deleted successfully. '
      }
    },
    edit: {
      success: {
        title: 'Success Notification.',
        message: 'Unit has been edited successfully.'
      }
    },
    downloadData: {
      success: {
        title: 'Success Notification.',
        message: 'Report downloaded successfully.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Create Unit'
    },
    editModal: {
      title: 'Edit Unit'
    },
    options: {
      save: 'Save',
      create: 'Create'
    }
  }
});

/***/ }),

/***/ "./i18n/en/users-catalog.ts":
/*!**********************************!*\
  !*** ./i18n/en/users-catalog.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Users',
  search: 'Search User',
  searchByName: 'Search by name, user, email, tags or employee number.',
  tags: 'Tags',
  actions: {
    add: 'Create new user',
    addTags: 'Add Tags',
    close: 'Close',
    download: 'Download Report'
  },
  filters: {
    role: 'Filter by role',
    region: 'Filter by region',
    allRegions: 'All Regions'
  },
  table: {
    headers: {
      first_name: 'Name',
      last_name: 'Last Name',
      mother_last_name: 'Mothers Last Name',
      username: 'User',
      email: 'EMail',
      employee_number: 'Employee Number',
      rolSelected: 'Role'
    }
  },
  toast: {
    success: {
      title: 'Success Notification.'
    },
    error: {
      title: 'Error with the Request.',
      message: 'Error with the Request.'
    },
    create: {
      success: {
        title: 'Success Notification.',
        message: 'User has been created succesfully. '
      }
    },
    delete: {
      success: {
        title: 'Success Notification.',
        message: 'User has been deleted succesfully. '
      }
    },
    edit: {
      success: {
        title: 'Success Notification.',
        message: 'User has been edited successfully.'
      }
    },
    downloadData: {
      success: {
        title: 'Success Notification.',
        message: 'Report downloaded successfully.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Create user'
    },
    editModal: {
      title: 'Edita User'
    },
    options: {
      save: 'Save',
      create: 'Create'
    }
  }
});

/***/ }),

/***/ "./i18n/en/validators-tab.ts":
/*!***********************************!*\
  !*** ./i18n/en/validators-tab.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  startDate: 'Start Date',
  endDate: 'End Date',
  input: {
    search: {
      placeholder: 'Search by name or employee number'
    },
    mission: {
      placeholder: 'Mission'
    }
  },
  options: {
    clearDate: 'Clean Dates',
    generateData: 'Generate Data'
  },
  total: {
    captures: 'Captures Total',
    validated: 'Validated Total'
  },
  history: {
    captures: 'Captures History',
    validated: 'Validated History'
  },
  table: {
    header: {
      employee_number: 'Employee Number',
      fullName: 'Name',
      efficiency: 'Percentage',
      userValidates: 'Validated Captures'
    }
  }
});

/***/ }),

/***/ "./i18n/es/advanced-search.ts":
/*!************************************!*\
  !*** ./i18n/es/advanced-search.ts ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  filters: {
    searchField: 'Buscar por nombre o código del producto'
  },
  actions: {
    search: 'Buscar',
    generateReport: 'GENERAR REPORTE',
    cleanFilter: 'Limpiar filtros',
    download: 'Descargar',
    comparativeChart: 'Graficar comparativos',
    georeference: 'Georeferencia',
    getCurrentReport: 'VER LISTA ACTUAL'
  }
});

/***/ }),

/***/ "./i18n/es/brands-catalog.ts":
/*!***********************************!*\
  !*** ./i18n/es/brands-catalog.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Marcas',
  table: {
    headers: {
      name: 'Nombre'
    }
  },
  toast: {
    success: {
      title: 'Notificación de éxito.'
    },
    error: {
      title: 'Error con la petición.',
      message: 'Error con la petición.'
    },
    create: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha creado la marca correctamente. '
      }
    },
    delete: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha eliminado la marca correctamente. '
      }
    },
    edit: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha editado la marca correctamente.'
      }
    },
    downloadData: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha descargado el reporte exitosamente.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Crear marca',
      search: 'Buscar una marca',
      searchByName: 'Buscar por nombre '
    },
    editModal: {
      title: 'Editar marca'
    },
    actions: {
      add: 'Añadir marca',
      download: 'Descargar Reporte'
    },
    options: {
      save: 'Guardar',
      create: 'Crear'
    }
  }
});

/***/ }),

/***/ "./i18n/es/capture.ts":
/*!****************************!*\
  !*** ./i18n/es/capture.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Detalles de captura',
  input: {
    captureId: {
      label: 'Captura'
    },
    price: {
      label: 'Precio'
    },
    priceWithPromotion: {
      label: 'Precio de promoción'
    },
    barcode: {
      label: 'Código de barras'
    },
    name: {
      label: 'Nombre'
    },
    brand: {
      label: 'Marca'
    },
    unit: {
      label: 'Unidad'
    },
    store: {
      label: 'Cadena'
    },
    type: {
      label: 'Tipo'
    },
    group: {
      label: 'Grupo'
    },
    line: {
      label: 'Línea'
    },
    amount: {
      label: 'Gramaje / Cantidad'
    },
    captureDate: {
      label: 'Fecha de Captura'
    },
    status: {
      label: 'Estatus'
    },
    scannedBy: {
      label: 'Escaneado'
    },
    reviewed: {
      label: 'Revisado'
    },
    branchOffice: {
      label: 'sucursal'
    },
    mainImage: {
      label: 'Foto principal'
    },
    priceImage: {
      label: 'Foto de precio'
    }
  },
  detailsContainer: {
    title: 'Foto de promoción'
  },
  options: {
    changeImage: 'Cambiar imagen',
    editInformation: 'Editar información',
    saveInformation: 'Guardar información',
    cancelInformation: 'Cancelar'
  }
});

/***/ }),

/***/ "./i18n/es/captures.ts":
/*!*****************************!*\
  !*** ./i18n/es/captures.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'CAPTURAS',
  filters: {
    searchField: 'Buscar por nombre o código del producto',
    startDate: 'Desde',
    endDate: 'Hasta',
    withImage: 'Con foto',
    withoutImage: 'Sin foto',
    statusRejected: 'Rechazado',
    normalPrice: 'Precio normal',
    statusPending: 'Pendiente',
    statusValidated: 'Validado',
    priceWithPromotion: 'Precio de promoción',
    param: 'Parámetro',
    value: 'Valor',
    geolocalitation: 'Geolocalizaciones'
  },
  actions: {
    search: 'Buscar',
    cleanFilter: 'Limpiar filtros',
    exportGeoData: 'Exportar Datos Georeferencia'
  },
  optionsCatalog: {
    brandsCatalog: 'Marca',
    groupsCatalog: 'Grupo',
    linesCatalog: 'Línea',
    storesCatalog: 'Cadena',
    unitsCatalog: 'Unidad'
  },
  table: {
    head: {
      selected: 'Seleccionar',
      id: 'Captura',
      photo_main: 'Foto principal',
      photo_price: 'Foto precio',
      barcode: 'Código de barras',
      product: 'Producto',
      brand: 'Marca',
      type: 'Tipo',
      chain: 'Cadena comercial',
      branch: 'Sucursal',
      scanned_by: 'Capturista',
      reviewed: 'Validador',
      status: 'Estado',
      grammage_quantity: 'Cantidad',
      unit: 'Unidad',
      unit_price: 'Precio unitario',
      group: 'Grupo',
      line: 'Línea',
      product_created_date: 'Fecha de alta de producto',
      lower_price: 'Precio mínimo',
      highest_price: 'Precio máximo',
      capture_date: 'Fecha de captura',
      capture_price: 'Precio de captura',
      actions: 'Acciones'
    }
  },
  status: {
    validated: 'Validado',
    pending: 'Pendiente'
  },
  units: {
    cm: 'Centimetro',
    m: 'Metro',
    ml: 'Mililitro',
    lt: 'Litro',
    mg: 'Miligramo',
    g: 'Gramo',
    kg: 'Kilogramo',
    pieza: 'Pieza'
  },
  modal: {
    delete: {
      buttonAcceptLabel: 'Eliminar',
      message: 'Esta operación es permanente ¿desea eliminar este elemento?'
    }
  }
});

/***/ }),

/***/ "./i18n/es/catalogs.ts":
/*!*****************************!*\
  !*** ./i18n/es/catalogs.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Catálogos',
  options: {
    brands: 'Marcas',
    unities: 'Unidades',
    groups: 'Grupos',
    lines: 'Líneas',
    chain: 'Cadenas',
    region: 'Regiones',
    users: 'Usuarios'
  }
});

/***/ }),

/***/ "./i18n/es/chains-catalog.ts":
/*!***********************************!*\
  !*** ./i18n/es/chains-catalog.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Cadenas',
  search: 'Buscar una cadena',
  searchByName: 'Buscar por nombre ',
  actions: {
    add: 'Añadir cadena',
    download: 'Descargar Reporte'
  },
  table: {
    headers: {
      id: 'Id',
      name: 'Nombre',
      alias: 'Alias'
    }
  },
  toast: {
    success: {
      title: 'Notificación de éxito.'
    },
    error: {
      title: 'Error con la petición.',
      message: 'Error con la petición.'
    },
    create: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha creado la cadena correctamente. '
      }
    },
    delete: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha eliminado la cadena correctamente. '
      }
    },
    edit: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha editado la cadena correctamente.'
      }
    },
    downloadData: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha descargado el reporte exitosamente.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Crear cadena'
    },
    editModal: {
      title: 'Editar cadena'
    },
    options: {
      save: 'Guardar',
      create: 'Crear'
    }
  }
});

/***/ }),

/***/ "./i18n/es/graph-tab-compare.ts":
/*!**************************************!*\
  !*** ./i18n/es/graph-tab-compare.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  tabs: {
    headers: {
      priceList: 'Gráficas - Precio de lista',
      unitaryPrice: 'Gráficas - Precio unitario',
      history: 'Historial de precios'
    },
    history: {
      headers: {
        date: 'Fecha',
        price: 'Precio'
      }
    }
  },
  startDate: 'Fecha inicial',
  endDate: 'Fecha final',
  search: 'Buscar captura por id',
  modal: {
    delete: {
      buttonAcceptLabel: 'Eliminar',
      message: 'Esta operación es permanente ¿desea eliminar este elemento?'
    }
  }
});

/***/ }),

/***/ "./i18n/es/graph-tab.ts":
/*!******************************!*\
  !*** ./i18n/es/graph-tab.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  startDate: 'Fecha inicial',
  endDate: 'Fecha final',
  modal: {
    delete: {
      buttonAcceptLabel: 'Eliminar',
      message: 'Esta operación es permanente ¿desea eliminar este elemento?'
    }
  }
});

/***/ }),

/***/ "./i18n/es/groups-catalog.ts":
/*!***********************************!*\
  !*** ./i18n/es/groups-catalog.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Grupos',
  search: 'Buscar un grupo',
  searchByName: 'Buscar por nombre ',
  actions: {
    add: 'Añadir grupo',
    download: 'Descargar Reporte'
  },
  table: {
    headers: {
      name: 'Nombre',
      abbreviation: 'Abreviación'
    }
  },
  toast: {
    success: {
      title: 'Notificación de éxito.'
    },
    error: {
      title: 'Error con la petición.',
      message: 'Error con la petición.'
    },
    create: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha creado el grupo correctamente. '
      }
    },
    delete: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha eliminado el grupo correctamente. '
      }
    },
    edit: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha editado el grupo correctamente.'
      }
    },
    downloadData: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha descargado el reporte exitosamente.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Crear grupo'
    },
    editModal: {
      title: 'Editar grupo'
    },
    options: {
      save: 'Guardar',
      create: 'Crear'
    }
  }
});

/***/ }),

/***/ "./i18n/es/home.ts":
/*!*************************!*\
  !*** ./i18n/es/home.ts ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Validación',
  welcome: 'Seleccione una captura para iniciar.',
  sidebar: {
    title: 'Capturas',
    input: {
      mission: {
        label: 'Misión',
        placeholder: ''
      },
      product: {
        label: 'Producto',
        placeholder: ''
      }
    },
    scanFilter: {
      all: 'Todos',
      withProduct: 'Con producto',
      withoutProduct: 'Sin producto'
    }
  },
  scan: {
    topBar: {
      beingValidated: 'Este registro está siendo validado, selecciona uno diferente',
      withoutNumber: 'Sin Número',
      withoutMission: 'Sin Misión'
    },
    productImage: {
      label: 'Producto'
    },
    priceImage: {
      label: 'Precio'
    },
    input: {
      barcode: {
        label: 'Código de barras',
        error: 'El campo es requerido'
      },
      price: {
        label: 'Precio',
        error: 'El campo es requerido'
      },
      promotionPrice: {
        label: 'Precio de promoción',
        error: 'El campo es requerido'
      },
      store: {
        label: 'Cadena',
        error: 'El campo es requerido'
      },
      address: {
        label: 'Dirección',
        error: 'El campo es requerido'
      },
      aditionalComments: {
        label: 'Comentarios adicionales',
        error: 'El campo es requerido'
      }
    },
    option: {
      showPicture: 'Ver foto',
      reject: 'Rechazar',
      validate: 'Validar captura',
      validateAndAdd: 'Validar y agregar'
    }
  },
  product: {
    title: 'Crear nuevo producto',
    input: {
      name: {
        label: 'Nombre del producto',
        error: 'El campo es requerido'
      },
      barcode: {
        label: 'Código de barras',
        error: 'El campo es requerido'
      },
      brand: {
        label: 'Marca',
        error: 'El campo es requerido'
      },
      amount: {
        label: 'Cantidad',
        error: 'El campo es requerido'
      },
      unit: {
        label: 'Unidad',
        error: 'El campo es requerido'
      },
      group: {
        label: 'Grupo',
        error: 'El campo es requerido'
      },
      line: {
        label: 'Línea',
        error: 'El campo es requerido'
      },
      type: {
        label: 'Tipo',
        error: 'El campo es requerido'
      }
    },
    option: {
      changeImage: 'Cambiar imagen'
    }
  },
  modal: {
    reject: {
      subject: 'Selecciona un motivo de rechazo'
    }
  },
  toast: {
    sendCriterion: {
      success: {
        title: 'Notificación de éxito. ',
        message: 'Se ha rechazado la captura correctamente.'
      },
      error: {
        title: 'Notificación de error. ',
        message: 'Error con la petición.'
      }
    }
  },
  radioMapFirst: {
    blurry: 'Captura borrosa',
    farAway: 'Captura lejana',
    dark: 'Captura oscura',
    incomplete: 'Descripción de producto incompleta',
    doesntMatch: 'Productos que no coinciden'
  },
  radioSecond: {
    outsideShop: 'Captura fuera de tienda',
    shopTicket: 'Captura de tickets de compra',
    anotherCell: 'Captura tomada a otro celular',
    testScan: 'Pruebas'
  },
  history: {
    recent: 'Más reciente',
    mostExpensive: 'Más alto',
    cheapest: 'Más bajo',
    cheapestWithPromotion: 'Más bajo con promoción'
  }
});

/***/ }),

/***/ "./i18n/es/index.ts":
/*!**************************!*\
  !*** ./i18n/es/index.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _navbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./navbar */ "./i18n/es/navbar.ts");
/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./home */ "./i18n/es/home.ts");
/* harmony import */ var _missions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./missions */ "./i18n/es/missions.ts");
/* harmony import */ var _captures__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./captures */ "./i18n/es/captures.ts");
/* harmony import */ var _capture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capture */ "./i18n/es/capture.ts");
/* harmony import */ var _catalogs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./catalogs */ "./i18n/es/catalogs.ts");
/* harmony import */ var _profile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./profile */ "./i18n/es/profile.ts");
/* harmony import */ var _products__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./products */ "./i18n/es/products.ts");
/* harmony import */ var _product__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./product */ "./i18n/es/product.ts");
/* harmony import */ var _rankings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rankings */ "./i18n/es/rankings.ts");
/* harmony import */ var _graph_tab__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./graph-tab */ "./i18n/es/graph-tab.ts");
/* harmony import */ var _advanced_search__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./advanced-search */ "./i18n/es/advanced-search.ts");
/* harmony import */ var _table_tab__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./table-tab */ "./i18n/es/table-tab.ts");
/* harmony import */ var _product_tab__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./product-tab */ "./i18n/es/product-tab.ts");
/* harmony import */ var _scanners_tab__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./scanners-tab */ "./i18n/es/scanners-tab.ts");
/* harmony import */ var _validators_tab__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./validators-tab */ "./i18n/es/validators-tab.ts");
/* harmony import */ var _brands_catalog__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./brands-catalog */ "./i18n/es/brands-catalog.ts");
/* harmony import */ var _units_catalog__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./units-catalog */ "./i18n/es/units-catalog.ts");
/* harmony import */ var _groups_catalog__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./groups-catalog */ "./i18n/es/groups-catalog.ts");
/* harmony import */ var _lines_catalog__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./lines-catalog */ "./i18n/es/lines-catalog.ts");
/* harmony import */ var _chains_catalog__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./chains-catalog */ "./i18n/es/chains-catalog.ts");
/* harmony import */ var _regions_catalog__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./regions-catalog */ "./i18n/es/regions-catalog.ts");
/* harmony import */ var _users_catalog__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./users-catalog */ "./i18n/es/users-catalog.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./table */ "./i18n/es/table.ts");
/* harmony import */ var _graph_tab_compare__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./graph-tab-compare */ "./i18n/es/graph-tab-compare.ts");
/* harmony import */ var _statistic_report__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./statistic-report */ "./i18n/es/statistic-report.ts");
/* harmony import */ var _product_report__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./product-report */ "./i18n/es/product-report.ts");
/* harmony import */ var _scans_report__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./scans-report */ "./i18n/es/scans-report.ts");
// ES




























/* harmony default export */ __webpack_exports__["default"] = ({
  navbar: _navbar__WEBPACK_IMPORTED_MODULE_0__["default"],
  home: _home__WEBPACK_IMPORTED_MODULE_1__["default"],
  table: _table__WEBPACK_IMPORTED_MODULE_23__["default"],
  missions: _missions__WEBPACK_IMPORTED_MODULE_2__["default"],
  captures: _captures__WEBPACK_IMPORTED_MODULE_3__["default"],
  capture: _capture__WEBPACK_IMPORTED_MODULE_4__["default"],
  catalogs: _catalogs__WEBPACK_IMPORTED_MODULE_5__["default"],
  profile: _profile__WEBPACK_IMPORTED_MODULE_6__["default"],
  products: _products__WEBPACK_IMPORTED_MODULE_7__["default"],
  product: _product__WEBPACK_IMPORTED_MODULE_8__["default"],
  rankings: _rankings__WEBPACK_IMPORTED_MODULE_9__["default"],
  graphTab: _graph_tab__WEBPACK_IMPORTED_MODULE_10__["default"],
  advancedSearch: _advanced_search__WEBPACK_IMPORTED_MODULE_11__["default"],
  tableTab: _table_tab__WEBPACK_IMPORTED_MODULE_12__["default"],
  productTab: _product_tab__WEBPACK_IMPORTED_MODULE_13__["default"],
  scannersTab: _scanners_tab__WEBPACK_IMPORTED_MODULE_14__["default"],
  validatorsTab: _validators_tab__WEBPACK_IMPORTED_MODULE_15__["default"],
  brandsCatalog: _brands_catalog__WEBPACK_IMPORTED_MODULE_16__["default"],
  unitsCatalog: _units_catalog__WEBPACK_IMPORTED_MODULE_17__["default"],
  groupsCatalog: _groups_catalog__WEBPACK_IMPORTED_MODULE_18__["default"],
  linesCatalog: _lines_catalog__WEBPACK_IMPORTED_MODULE_19__["default"],
  chainsCatalog: _chains_catalog__WEBPACK_IMPORTED_MODULE_20__["default"],
  regionsCatalog: _regions_catalog__WEBPACK_IMPORTED_MODULE_21__["default"],
  usersCatalog: _users_catalog__WEBPACK_IMPORTED_MODULE_22__["default"],
  graphTabCompare: _graph_tab_compare__WEBPACK_IMPORTED_MODULE_24__["default"],
  statisticReport: _statistic_report__WEBPACK_IMPORTED_MODULE_25__["default"],
  productReport: _product_report__WEBPACK_IMPORTED_MODULE_26__["default"],
  scansReport: _scans_report__WEBPACK_IMPORTED_MODULE_27__["default"]
});

/***/ }),

/***/ "./i18n/es/lines-catalog.ts":
/*!**********************************!*\
  !*** ./i18n/es/lines-catalog.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Líneas',
  search: 'Buscar una línea',
  searchByName: 'Buscar por nombre ',
  actions: {
    add: 'Añadir línea',
    download: 'Descargar Reporte'
  },
  table: {
    headers: {
      name_line: 'Línea',
      name_group: 'Grupo'
    }
  },
  toast: {
    success: {
      title: 'Notificación de éxito.'
    },
    error: {
      title: 'Error con la petición.',
      message: 'Error con la petición.'
    },
    create: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha creado la línea correctamente. '
      }
    },
    delete: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha eliminado la línea correctamente. '
      }
    },
    edit: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha editado la línea correctamente.'
      }
    },
    downloadData: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha descargado el reporte exitosamente.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Crear línea'
    },
    editModal: {
      title: 'Editar línea'
    },
    options: {
      save: 'Guardar',
      create: 'Crear'
    }
  }
});

/***/ }),

/***/ "./i18n/es/missions.ts":
/*!*****************************!*\
  !*** ./i18n/es/missions.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'MISIONES',
  table: {
    head: {
      title: 'Título',
      description: 'Descripción',
      capture_points: 'Puntos por capturas',
      mission_points: 'Puntos por misión',
      start_date: 'Fecha de inicio',
      end_date: 'Fecha de fin',
      regions: 'Región',
      actions: 'Acciones'
    }
  },
  options: {
    add: 'Nueva misión'
  },
  toast: {
    createMission: {
      success: {
        title: 'Notificación de éxito. ',
        message: 'Se ha creado la misión correctamente. '
      },
      error: {
        title: 'Notificación de error. ',
        duplicatedMessage: 'El Titulo se duplicó.',
        message: 'Algo salió mal. '
      }
    }
  },
  modal: {
    dialog: {
      message: 'Esta operación no se puede realizar debido a que la misión tiene capturas asociadas',
      options: {
        acept: 'Aceptar'
      }
    },
    add: {
      title: 'Nueva misión',
      options: {
        cancel: 'Cancelar',
        create: 'Crear'
      }
    },
    edit: {
      title: 'Editar misión',
      options: {
        cancel: 'Cancelar',
        edit: 'editar'
      }
    },
    input: {
      title: {
        label: 'Título (obligatorio)',
        validations: {
          required: 'El campo es requerido'
        }
      },
      description: {
        label: 'Descripción (obligatorio / máximo 255 caracteres)',
        validations: {
          required: 'El campo es requerido',
          minLength: 'La descripción debe tener por lo menos 5 caracteres.',
          maxLength: 'La descripción debe tener máximo 255 caracteres.'
        }
      },
      startDate: {
        label: 'Fecha de inicio',
        validations: {
          required: 'La fecha de inicio no es válida',
          greaterThan: 'La fecha de inicio debe ser mayor al día de ayer.'
        }
      },
      endDate: {
        label: 'Fecha de fin',
        validations: {
          required: 'La fecha de fin no es válida'
        }
      },
      region: {
        label: 'Selecciona una región',
        validations: {
          required: 'Debes seleccionar por lo menos una región'
        }
      },
      missionPoints: {
        label: 'Puntaje de la misión',
        validations: {
          valid: 'El puntaje debe ser un número válido'
        }
      },
      capturePoints: {
        label: 'Puntaje de captura',
        validations: {
          valid: 'El puntaje debe ser un número válido'
        }
      }
    }
  }
});

/***/ }),

/***/ "./i18n/es/navbar.ts":
/*!***************************!*\
  !*** ./i18n/es/navbar.ts ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  option: {
    validations: 'Validación',
    missions: 'Misiones',
    captures: 'Capturas',
    products: 'Productos',
    rankings: 'Rankings',
    catalogs: 'Catálogos',
    editProfile: 'Editar perfil',
    signOut: 'Cerrar sesión',
    reports: {
      geolocalization: 'Reporte de geolocalización',
      statistic: 'Reporte comparativo de precios',
      product: 'Reporte de producto',
      scans: 'Reporte de capturas'
    }
  }
});

/***/ }),

/***/ "./i18n/es/product-report.ts":
/*!***********************************!*\
  !*** ./i18n/es/product-report.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Reporte de Producto',
  newSerach: 'Nueva Búsqueda',
  placeholderSearch: 'Nombre / Código',
  selected: 'Seleccionado',
  search: 'Buscar',
  myList: 'Ver mi lista',
  generalSearch: 'Búsqueda General',
  saveList: 'Guardar a mi lista',
  graphic: 'Gráfica',
  clearGraphic: 'Limpiar Gráfica',
  emptyState: 'Hacer búsqueda para ver resultados',
  emptGraphyState: 'Graficar para ver resultados',
  saveProducts: 'Productos han sido agregados a la lista',
  saveProductsError: 'Un error ocurrio mientras se guardaba la lista',
  parameter: 'Parametros',
  values: 'Valor',
  startDate: 'Fecha Inicio',
  endDate: 'Fecha Terminación',
  deleteFilters: "Limpiar Filtros",
  download: "Descargar",
  nameOrCode: "Nombre / Código del producto",
  successDownload: "Reporte descargado exitosamente",
  deleteFromList: "Borrar de mi lista",
  successDelete: "Los productos han sido borrados de la lista",
  errorDelete: "Un error ocurrio mientras se removian productos de la lista",
  errorDownload: "Un  error ocurrio mientras se descargaba el reporte",
  noSelected: "No hay productos seleccionados.....",
  card: {
    id: "ID:",
    barcode: "CÓDIGO DE BARRAS:",
    brand: "MARCA:",
    line: "LINEA:",
    group: "GRUPO:",
    unit: "UNIDAD:",
    type: "TIPO:",
    name: "NOMBRE:",
    lower_price: "MENOR PRECIO:",
    highest_price: "MAYOR PRECIO:",
    grammage: "GRAMAJE / UNIDAD:",
    recently: "Reciente",
    higher: "Más alto",
    lower: "Más bajo",
    lowerPromotion: "Más bajo con descuento"
  }
});

/***/ }),

/***/ "./i18n/es/product-tab.ts":
/*!********************************!*\
  !*** ./i18n/es/product-tab.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  detail: {
    input: {
      productId: {
        label: 'ID Producto'
      },
      barcode: {
        label: 'Código de barras'
      },
      name: {
        label: 'Nombre',
        validations: {
          minLength: 'El campo debe contener al menos dos caracteres'
        }
      },
      brand: {
        label: 'Marca'
      },
      type: {
        label: 'Tipo'
      },
      group: {
        label: 'Grupo'
      },
      line: {
        label: 'Línea'
      },
      amount: {
        label: 'Gramaje / Cantidad',
        validations: {
          valid: 'El gramaje o cantidad debe ser un número válido: Con dos decimales máximo.'
        }
      },
      unit: {
        label: 'Unidad'
      },
      mainImage: {
        label: 'Foto principal'
      },
      priceImage: {
        label: 'Foto de precio'
      },
      minPrice: {
        label: 'Precio mínimo'
      },
      maxPrice: {
        label: 'Precio máximo'
      }
    },
    detailsContainer: {
      title: 'Foto del producto'
    },
    options: {
      cancel: 'Cancelar',
      changeImage: 'Cambiar imagen',
      editInformation: 'Editar información',
      saveInformation: 'Guardar información'
    }
  }
});

/***/ }),

/***/ "./i18n/es/product.ts":
/*!****************************!*\
  !*** ./i18n/es/product.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  options: {
    listPrice: 'Gráfica - Precio de lista',
    unitaryPrice: 'Gráfica - Precio unitario',
    priceHistory: 'Historial de precios',
    detail: 'Detalle'
  },
  startDate: 'Fecha inicial',
  endDate: 'Fecha final',
  table: {
    headers: {
      branchOffice: 'Sucursal',
      minPrice: 'Precio mínimo',
      maxPrice: 'Precio máximo',
      currentPrice: 'Precio actual',
      averagePrice: 'Precio promedio'
    },
    options: {
      seeHistory: 'Ver historial'
    }
  },
  detail: {
    input: {
      productId: {
        label: 'ID Producto'
      },
      barcode: {
        label: 'Código de barras'
      },
      name: {
        label: 'Nombre'
      },
      brand: {
        label: 'Marca'
      },
      type: {
        label: 'Tipo'
      },
      group: {
        label: 'Grupo'
      },
      line: {
        label: 'Línea'
      },
      amount: {
        label: 'Gramaje / Cantidad'
      },
      unit: {
        label: 'Unidad'
      },
      mainImage: {
        label: 'Foto principal'
      },
      priceImage: {
        label: 'Foto de precio'
      }
    },
    options: {
      changeImage: 'Cambiar imagen',
      editInformation: 'Editar información',
      saveInformation: 'Guardar información'
    }
  }
});

/***/ }),

/***/ "./i18n/es/products.ts":
/*!*****************************!*\
  !*** ./i18n/es/products.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'PRODUCTOS',
  filters: {
    searchField: 'Buscar por nombre o código del producto',
    startDate: 'Desde',
    endDate: 'Hasta',
    updatedAt: 'Fecha de modificación',
    createdAt: 'Fecha de Alta',
    param: 'Parámetro',
    value: 'Valor'
  },
  actions: {
    search: 'Buscar',
    cleanFilter: 'Limpiar filtros',
    download: 'Descargar',
    comparativeChart: 'Graficar comparativos'
  },
  optionsCatalog: {
    brandsCatalog: 'Marca',
    groupsCatalog: 'Grupo',
    linesCatalog: 'Línea',
    storesCatalog: 'Cadena',
    unitsCatalog: 'Unidad'
  },
  modal: {
    delete: {
      buttonAcceptLabel: 'Eliminar',
      message: ''
    }
  },
  table: {
    head: {
      selected: 'Seleccionar',
      photo: 'Foto del producto',
      product: 'Nombre',
      barcode: 'Código',
      brand: 'Marca',
      type: 'Tipo',
      created_at: 'Fecha de captura',
      updated_at: 'Fecha de modificación',
      grammage_quantity: 'Cantidad',
      unit: 'Unidad',
      group: 'Grupo',
      line: 'Línea',
      highest_price: 'Precio más alto',
      lower_price: 'Precio más bajo',
      promotion_lower_price: 'Precio más bajo con promoción',
      last_price: 'Último precio capturado'
    }
  }
});

/***/ }),

/***/ "./i18n/es/profile.ts":
/*!****************************!*\
  !*** ./i18n/es/profile.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  input: {
    role: {
      label: 'Rol *',
      error: 'El campo es requerido'
    },
    first_name: {
      label: 'Nombre *',
      error: 'El campo es requerido'
    },
    last_name: {
      label: 'Apellido paterno *',
      error: 'El campo es requerido'
    },
    mother_last_name: {
      label: 'Apellido materno',
      error: 'El campo es requerido'
    },
    theme: {
      label: 'Usar tema oscuro',
      error: 'El campo es requerido'
    },
    locale: {
      label: 'Cambiar idioma',
      error: 'El campo es requerido'
    },
    employee_number: {
      label: 'Número de empleado',
      error: 'El campo es requerido'
    },
    cellphone: {
      label: 'Número de celular',
      error: 'El campo es requerido'
    },
    region: {
      label: 'Región',
      error: 'El campo es requerido'
    },
    username: {
      label: 'Usuario *',
      error: 'El campo es requerido'
    },
    password: {
      label: 'Contraseña *',
      error: 'El campo es requerido'
    }
  },
  options: {
    close: 'Cerrar',
    save: 'Guardar'
  }
});

/***/ }),

/***/ "./i18n/es/rankings.ts":
/*!*****************************!*\
  !*** ./i18n/es/rankings.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Rankings',
  tabs: {
    capturists: {
      title: 'capturistas',
      startDate: 'Fecha inicial',
      endDate: 'Fecha final',
      input: {
        search: {
          placeholder: 'Buscar por nombre o número de empleado'
        }
      },
      options: {
        clearDate: 'Limpiar fechas'
      },
      table: {
        header: {
          position: 'Posición',
          employeeNumber: 'No. de empleado',
          name: 'Nombre',
          percentage: 'Porcentaje',
          validatedCaptures: 'Capturas validadas',
          points: 'Puntos'
        }
      }
    },
    validators: {
      title: 'Validadores',
      startDate: 'Fecha inicial',
      endDate: 'Fecha final',
      input: {
        search: {
          placeholder: 'Buscar por nombre o número de empleado'
        }
      },
      options: {
        clearDate: 'Limpiar fechas',
        generateData: 'Generar datos'
      },
      total: {
        captures: 'Total de capturas',
        validated: 'Total validadas'
      },
      history: {
        captures: 'Historial de capturas',
        validated: 'Historial de validadas'
      },
      table: {
        header: {
          employeeNumber: 'No. de empleado',
          nombre: 'Nombre',
          percentage: 'Porcentaje',
          validatedCaptures: 'Capturas validadas'
        }
      }
    }
  }
});

/***/ }),

/***/ "./i18n/es/regions-catalog.ts":
/*!************************************!*\
  !*** ./i18n/es/regions-catalog.ts ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Regiones',
  search: 'Buscar una región',
  searchByName: 'Buscar por nombre ',
  actions: {
    add: 'Añadir región',
    download: 'Descargar Reporte'
  },
  table: {
    headers: {
      name: 'Nombre',
      alias: 'Alias'
    }
  },
  toast: {
    success: {
      title: 'Notificación de éxito.'
    },
    error: {
      title: 'Error con la petición.',
      message: 'Error con la petición.'
    },
    create: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha creado la región correctamente. '
      }
    },
    delete: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha eliminado la región correctamente. '
      }
    },
    edit: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha editado la región correctamente.'
      }
    },
    downloadData: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha descargado el reporte exitosamente.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Crear región'
    },
    editModal: {
      title: 'Editar región'
    },
    options: {
      save: 'Guardar',
      create: 'Crear'
    }
  }
});

/***/ }),

/***/ "./i18n/es/scanners-tab.ts":
/*!*********************************!*\
  !*** ./i18n/es/scanners-tab.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  startDate: 'Fecha inicial',
  endDate: 'Fecha final',
  input: {
    search: {
      placeholder: 'Buscar por nombre o número de empleado'
    },
    mission: {
      placeholder: 'Misión'
    }
  },
  options: {
    clearDate: 'Limpiar fechas'
  },
  table: {
    header: {
      ranking: 'Posición',
      employee_number: 'No. de empleado',
      name: 'Nombre',
      efficiency: 'Porcentaje',
      validated_captures: 'Capturas validadas',
      points: 'Puntos'
    }
  }
});

/***/ }),

/***/ "./i18n/es/scans-report.ts":
/*!*********************************!*\
  !*** ./i18n/es/scans-report.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Reporte de capturas',
  filters: {
    region: 'Región',
    scanner: 'Capturista',
    mission: 'Misión'
  }
});

/***/ }),

/***/ "./i18n/es/statistic-report.ts":
/*!*************************************!*\
  !*** ./i18n/es/statistic-report.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Reporte Comparativo de Precios'
});

/***/ }),

/***/ "./i18n/es/table-tab.ts":
/*!******************************!*\
  !*** ./i18n/es/table-tab.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  table: {
    headers: {
      branchOffice: 'Sucursal',
      minPrice: 'Precio mínimo',
      maxPrice: 'Precio máximo',
      currentPrice: 'Precio actual',
      averagePrice: 'Precio promedio'
    },
    options: {
      seeHistory: 'Ver historial'
    }
  },
  modal: {
    table: {
      headers: {
        scan: 'Captura',
        capturedAt: 'Fecha de captura',
        price: 'Precio'
      }
    },
    options: {
      close: 'cerrar'
    }
  }
});

/***/ }),

/***/ "./i18n/es/table.ts":
/*!**************************!*\
  !*** ./i18n/es/table.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  actions: 'Acciones'
});

/***/ }),

/***/ "./i18n/es/units-catalog.ts":
/*!**********************************!*\
  !*** ./i18n/es/units-catalog.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Unidades',
  search: 'Buscar una unidad',
  searchByName: 'Buscar por nombre ',
  actions: {
    add: 'Añadir unidad',
    download: 'Descargar Reporte'
  },
  table: {
    headers: {
      name: 'Nombre',
      abbreviation: 'Abreviación'
    }
  },
  toast: {
    success: {
      title: 'Notificación de éxito.'
    },
    error: {
      title: 'Error con la petición.',
      message: 'Error con la petición.'
    },
    create: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha creado la unidad correctamente. '
      }
    },
    delete: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha eliminado la unidad correctamente. '
      }
    },
    edit: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha editado la unidad correctamente.'
      }
    },
    downloadData: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha descargado el reporte exitosamente.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Crear unidad'
    },
    editModal: {
      title: 'Editar unidad'
    },
    options: {
      save: 'Guardar',
      create: 'Crear'
    }
  }
});

/***/ }),

/***/ "./i18n/es/users-catalog.ts":
/*!**********************************!*\
  !*** ./i18n/es/users-catalog.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'Usuarios',
  search: 'Buscar un usuario',
  searchByName: 'Buscar por nombre, usuario, email, etiquetas, o número de empleado.',
  tags: 'Etiquetas',
  actions: {
    add: 'Crear nuevo usuario',
    addTags: 'Agregar etiquetas',
    close: 'Cerrar',
    download: 'Descargar Reporte'
  },
  filters: {
    role: 'Filtrar por rol',
    region: 'Filtrar por región',
    allRegions: 'Todas las regiones'
  },
  table: {
    headers: {
      first_name: 'Nombre',
      last_name: 'Apellido paterno',
      mother_last_name: 'Apellido materno',
      username: 'Usuario',
      email: 'Correo electrónico',
      employee_number: 'No. de empleado',
      rolSelected: 'Rol'
    }
  },
  toast: {
    success: {
      title: 'Notificación de éxito.'
    },
    error: {
      title: 'Error con la petición.',
      message: 'Error con la petición.'
    },
    create: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha creado el usuario correctamente. '
      }
    },
    delete: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha eliminado el usuario correctamente. '
      }
    },
    edit: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha editado el usuario correctamente.'
      }
    },
    downloadData: {
      success: {
        title: 'Notificación de éxito.',
        message: 'Se ha descargado el reporte exitosamente.'
      }
    }
  },
  modal: {
    createModal: {
      title: 'Crear usuario'
    },
    editModal: {
      title: 'Editar usuario'
    },
    options: {
      save: 'Guardar',
      create: 'Crear'
    }
  }
});

/***/ }),

/***/ "./i18n/es/validators-tab.ts":
/*!***********************************!*\
  !*** ./i18n/es/validators-tab.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  startDate: 'Fecha inicial',
  endDate: 'Fecha final',
  input: {
    search: {
      placeholder: 'Buscar por nombre o número de empleado'
    },
    mission: {
      placeholder: 'Misión'
    }
  },
  options: {
    clearDate: 'Limpiar fechas',
    generateData: 'Generar datos'
  },
  total: {
    captures: 'Total de capturas',
    validated: 'Total validadas'
  },
  history: {
    captures: 'Historial de capturas',
    validated: 'Historial de validadas'
  },
  table: {
    header: {
      employee_number: 'Núm de empleado',
      fullName: 'Nombre',
      efficiency: 'Porcentaje',
      userValidates: 'Capturas validadas'
    }
  }
});

/***/ }),

/***/ "./i18n/index.ts":
/*!***********************!*\
  !*** ./i18n/index.ts ***!
  \***********************/
/*! exports provided: getI18nLabel, translateTableHeader, translateTableComplexHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getI18nLabel", function() { return getI18nLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateTableHeader", function() { return translateTableHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateTableComplexHeader", function() { return translateTableComplexHeader; });
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.get */ "lodash.get");
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./es */ "./i18n/es/index.ts");
/* harmony import */ var _en__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./en */ "./i18n/en/index.ts");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


// LOCALES


const locales = {
  es: _es__WEBPACK_IMPORTED_MODULE_1__["default"],
  en: _en__WEBPACK_IMPORTED_MODULE_2__["default"]
};
const getI18nLabel = (locale, key) => lodash_get__WEBPACK_IMPORTED_MODULE_0___default()(locales[locale], key) || '';
const translateTableHeader = (locale, headers, path) => headers.map(header => _objectSpread(_objectSpread({}, header), {}, {
  label: getI18nLabel(locale, `${path}.${header.key}`)
}));
const translateTableComplexHeader = (locale, headers, path) => headers.map(header => _objectSpread(_objectSpread({}, header), {}, {
  title: getI18nLabel(locale, `${path}.${header.name}`)
}));

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js");
exports.__esModule = true;
exports.default = void 0;
var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));
var _router = __webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js");
var _router2 = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");
let cachedObserver;
const listeners = new Map();
const IntersectionObserver = false ? undefined : null;
const prefetched = {};
function getObserver() {
  // Return shared instance of IntersectionObserver if already created
  if (cachedObserver) {
    return cachedObserver;
  } // Only create shared IntersectionObserver if supported in browser
  if (!IntersectionObserver) {
    return undefined;
  }
  return cachedObserver = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (!listeners.has(entry.target)) {
        return;
      }
      const cb = listeners.get(entry.target);
      if (entry.isIntersecting || entry.intersectionRatio > 0) {
        cachedObserver.unobserve(entry.target);
        listeners.delete(entry.target);
        cb();
      }
    });
  }, {
    rootMargin: '200px'
  });
}
const listenToIntersections = (el, cb) => {
  const observer = getObserver();
  if (!observer) {
    return () => {};
  }
  observer.observe(el);
  listeners.set(el, cb);
  return () => {
    try {
      observer.unobserve(el);
    } catch (err) {
      console.error(err);
    }
    listeners.delete(el);
  };
};
function prefetch(router, href, as, options) {
  if (true) return;
  if (!(0, _router.isLocalURL)(href)) return; // Prefetch the JSON page if asked (only in the client)
  // We need to handle a prefetch error here since we may be
  // loading with priority which can reject but we don't
  // want to force navigation since this is only a prefetch
  router.prefetch(href, as, options).catch(err => {
    if (true) {
      // rethrow to show invalid URL errors
      throw err;
    }
  }); // Join on an invalid URI character
  prefetched[href + '%' + as] = true;
}
function isModifiedEvent(event) {
  const {
    target
  } = event.currentTarget;
  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey ||
  // triggers resource download
  event.nativeEvent && event.nativeEvent.which === 2;
}
function linkClicked(e, router, href, as, replace, shallow, scroll, locale) {
  const {
    nodeName
  } = e.currentTarget;
  if (nodeName === 'A' && (isModifiedEvent(e) || !(0, _router.isLocalURL)(href))) {
    // ignore click for browser’s default behavior
    return;
  }
  e.preventDefault(); //  avoid scroll for urls with anchor refs
  if (scroll == null) {
    scroll = as.indexOf('#') < 0;
  } // replace state instead of push if prop is present
  router[replace ? 'replace' : 'push'](href, as, {
    shallow,
    locale
  }).then(success => {
    if (!success) return;
    if (scroll) {
      window.scrollTo(0, 0);
      document.body.focus();
    }
  });
}
function Link(props) {
  if (true) {
    function createPropError(args) {
      return new Error(`Failed prop type: The prop \`${args.key}\` expects a ${args.expected} in \`<Link>\`, but got \`${args.actual}\` instead.` + (false ? undefined : ''));
    } // TypeScript trick for type-guarding:
    const requiredPropsGuard = {
      href: true
    };
    const requiredProps = Object.keys(requiredPropsGuard);
    requiredProps.forEach(key => {
      if (key === 'href') {
        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {
          throw createPropError({
            key,
            expected: '`string` or `object`',
            actual: props[key] === null ? 'null' : typeof props[key]
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _ = key;
      }
    }); // TypeScript trick for type-guarding:
    const optionalPropsGuard = {
      as: true,
      replace: true,
      scroll: true,
      shallow: true,
      passHref: true,
      prefetch: true,
      locale: true
    };
    const optionalProps = Object.keys(optionalPropsGuard);
    optionalProps.forEach(key => {
      const valType = typeof props[key];
      if (key === 'as') {
        if (props[key] && valType !== 'string' && valType !== 'object') {
          throw createPropError({
            key,
            expected: '`string` or `object`',
            actual: valType
          });
        }
      } else if (key === 'locale') {
        if (props[key] && valType !== 'string') {
          throw createPropError({
            key,
            expected: '`string`',
            actual: valType
          });
        }
      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {
        if (props[key] != null && valType !== 'boolean') {
          throw createPropError({
            key,
            expected: '`boolean`',
            actual: valType
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _ = key;
      }
    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const hasWarned = _react.default.useRef(false);
    if (props.prefetch && !hasWarned.current) {
      hasWarned.current = true;
      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://err.sh/vercel/next.js/prefetch-true-deprecated');
    }
  }
  const p = props.prefetch !== false;
  const [childElm, setChildElm] = _react.default.useState();
  const router = (0, _router2.useRouter)();
  const pathname = router && router.pathname || '/';
  const {
    href,
    as
  } = _react.default.useMemo(() => {
    const [resolvedHref, resolvedAs] = (0, _router.resolveHref)(pathname, props.href, true);
    return {
      href: resolvedHref,
      as: props.as ? (0, _router.resolveHref)(pathname, props.as) : resolvedAs || resolvedHref
    };
  }, [pathname, props.href, props.as]);
  _react.default.useEffect(() => {
    if (p && IntersectionObserver && childElm && childElm.tagName && (0, _router.isLocalURL)(href)) {
      // Join on an invalid URI character
      const isPrefetched = prefetched[href + '%' + as];
      if (!isPrefetched) {
        return listenToIntersections(childElm, () => {
          prefetch(router, href, as);
        });
      }
    }
  }, [p, childElm, href, as, router]);
  let {
    children,
    replace,
    shallow,
    scroll,
    locale
  } = props; // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag
  if (typeof children === 'string') {
    children = /*#__PURE__*/_react.default.createElement("a", null, children);
  } // This will return the first child, if multiple are provided it will throw an error
  const child = _react.Children.only(children);
  const childProps = {
    ref: el => {
      if (el) setChildElm(el);
      if (child && typeof child === 'object' && child.ref) {
        if (typeof child.ref === 'function') child.ref(el);else if (typeof child.ref === 'object') {
          child.ref.current = el;
        }
      }
    },
    onClick: e => {
      if (child.props && typeof child.props.onClick === 'function') {
        child.props.onClick(e);
      }
      if (!e.defaultPrevented) {
        linkClicked(e, router, href, as, replace, shallow, scroll, locale);
      }
    }
  };
  if (p) {
    childProps.onMouseEnter = e => {
      if (!(0, _router.isLocalURL)(href)) return;
      if (child.props && typeof child.props.onMouseEnter === 'function') {
        child.props.onMouseEnter(e);
      }
      prefetch(router, href, as, {
        priority: true
      });
    };
  } // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
  // defined, we specify the current 'href', so that repetition is not needed by the user
  if (props.passHref || child.type === 'a' && !('href' in child.props)) {
    childProps.href = (0, _router.addBasePath)((0, _router.addLocale)(as, typeof locale !== 'undefined' ? locale : router && router.locale, router && router.defaultLocale));
  }
  return /*#__PURE__*/_react.default.cloneElement(child, childProps);
}
var _default = Link;
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.removePathTrailingSlash = removePathTrailingSlash;
exports.normalizePathTrailingSlash = void 0; /**
                                             * Removes the trailing slash of a path if there is one. Preserves the root path `/`.
                                             */
function removePathTrailingSlash(path) {
  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;
} /**
  * Normalizes the trailing slash of a path according to the `trailingSlash` option
  * in `next.config.js`.
  */
const normalizePathTrailingSlash =  false ? undefined : removePathTrailingSlash;
exports.normalizePathTrailingSlash = normalizePathTrailingSlash;

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js");
var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");
exports.__esModule = true;
exports.useRouter = useRouter;
exports.makePublicRouterInstance = makePublicRouterInstance;
exports.createRouter = exports.withRouter = exports.default = void 0;
var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));
var _router2 = _interopRequireWildcard(__webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js"));
exports.Router = _router2.default;
exports.NextRouter = _router2.NextRouter;
var _routerContext = __webpack_require__(/*! ../next-server/lib/router-context */ "../next-server/lib/router-context");
var _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ "./node_modules/next/dist/client/with-router.js"));
exports.withRouter = _withRouter.default; /* global window */
const singletonRouter = {
  router: null,
  // holds the actual router instance
  readyCallbacks: [],
  ready(cb) {
    if (this.router) return cb();
    if (false) {}
  }
}; // Create public properties and methods of the router in the singletonRouter
const urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale'];
const routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];
const coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it
Object.defineProperty(singletonRouter, 'events', {
  get() {
    return _router2.default.events;
  }
});
urlPropertyFields.forEach(field => {
  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  Object.defineProperty(singletonRouter, field, {
    get() {
      const router = getRouter();
      return router[field];
    }
  });
});
coreMethodFields.forEach(field => {
  // We don't really know the types here, so we add them later instead
  ;
  singletonRouter[field] = (...args) => {
    const router = getRouter();
    return router[field](...args);
  };
});
routerEvents.forEach(event => {
  singletonRouter.ready(() => {
    _router2.default.events.on(event, (...args) => {
      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;
      const _singletonRouter = singletonRouter;
      if (_singletonRouter[eventField]) {
        try {
          _singletonRouter[eventField](...args);
        } catch (err) {
          console.error(`Error when running the Router event: ${eventField}`);
          console.error(`${err.message}\n${err.stack}`);
        }
      }
    });
  });
});
function getRouter() {
  if (!singletonRouter.router) {
    const message = 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n';
    throw new Error(message);
  }
  return singletonRouter.router;
} // Export the singletonRouter and this is the public API.
var _default = singletonRouter; // Reexport the withRoute HOC
exports.default = _default;
function useRouter() {
  return _react.default.useContext(_routerContext.RouterContext);
} // INTERNAL APIS
// -------------
// (do not use following exports inside the app)
// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.
const createRouter = (...args) => {
  singletonRouter.router = new _router2.default(...args);
  singletonRouter.readyCallbacks.forEach(cb => cb());
  singletonRouter.readyCallbacks = [];
  return singletonRouter.router;
}; // This function is used to create the `withRouter` router instance
exports.createRouter = createRouter;
function makePublicRouterInstance(router) {
  const _router = router;
  const instance = {};
  for (const property of urlPropertyFields) {
    if (typeof _router[property] === 'object') {
      instance[property] = Object.assign(Array.isArray(_router[property]) ? [] : {}, _router[property]); // makes sure query is not stateful
      continue;
    }
    instance[property] = _router[property];
  } // Events is a static property on the router, the router doesn't have to be initialized to use it
  instance.events = _router2.default.events;
  coreMethodFields.forEach(field => {
    instance[field] = (...args) => {
      return _router[field](...args);
    };
  });
  return instance;
}

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");
exports.__esModule = true;
exports.default = withRouter;
var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));
var _router = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");
function withRouter(ComposedComponent) {
  function WithRouterWrapper(props) {
    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({
      router: (0, _router.useRouter)()
    }, props));
  }
  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps // This is needed to allow checking for custom getInitialProps in _app
  ;
  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;
  if (true) {
    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';
    WithRouterWrapper.displayName = `withRouter(${name})`;
  }
  return WithRouterWrapper;
}

/***/ }),

/***/ "./node_modules/next/dist/compiled/path-to-regexp/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/compiled/path-to-regexp/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tokenize input string.
 */
function lexer(str) {
    var tokens = [];
    var i = 0;
    while (i < str.length) {
        var char = str[i];
        if (char === "*" || char === "+" || char === "?") {
            tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
            continue;
        }
        if (char === "\\") {
            tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
            continue;
        }
        if (char === "{") {
            tokens.push({ type: "OPEN", index: i, value: str[i++] });
            continue;
        }
        if (char === "}") {
            tokens.push({ type: "CLOSE", index: i, value: str[i++] });
            continue;
        }
        if (char === ":") {
            var name = "";
            var j = i + 1;
            while (j < str.length) {
                var code = str.charCodeAt(j);
                if (
                // `0-9`
                (code >= 48 && code <= 57) ||
                    // `A-Z`
                    (code >= 65 && code <= 90) ||
                    // `a-z`
                    (code >= 97 && code <= 122) ||
                    // `_`
                    code === 95) {
                    name += str[j++];
                    continue;
                }
                break;
            }
            if (!name)
                throw new TypeError("Missing parameter name at " + i);
            tokens.push({ type: "NAME", index: i, value: name });
            i = j;
            continue;
        }
        if (char === "(") {
            var count = 1;
            var pattern = "";
            var j = i + 1;
            if (str[j] === "?") {
                throw new TypeError("Pattern cannot start with \"?\" at " + j);
            }
            while (j < str.length) {
                if (str[j] === "\\") {
                    pattern += str[j++] + str[j++];
                    continue;
                }
                if (str[j] === ")") {
                    count--;
                    if (count === 0) {
                        j++;
                        break;
                    }
                }
                else if (str[j] === "(") {
                    count++;
                    if (str[j + 1] !== "?") {
                        throw new TypeError("Capturing groups are not allowed at " + j);
                    }
                }
                pattern += str[j++];
            }
            if (count)
                throw new TypeError("Unbalanced pattern at " + i);
            if (!pattern)
                throw new TypeError("Missing pattern at " + i);
            tokens.push({ type: "PATTERN", index: i, value: pattern });
            i = j;
            continue;
        }
        tokens.push({ type: "CHAR", index: i, value: str[i++] });
    }
    tokens.push({ type: "END", index: i, value: "" });
    return tokens;
}
/**
 * Parse a string for the raw tokens.
 */
function parse(str, options) {
    if (options === void 0) { options = {}; }
    var tokens = lexer(str);
    var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
    var defaultPattern = "[^" + escapeString(options.delimiter || "/#?") + "]+?";
    var result = [];
    var key = 0;
    var i = 0;
    var path = "";
    var tryConsume = function (type) {
        if (i < tokens.length && tokens[i].type === type)
            return tokens[i++].value;
    };
    var mustConsume = function (type) {
        var value = tryConsume(type);
        if (value !== undefined)
            return value;
        var _a = tokens[i], nextType = _a.type, index = _a.index;
        throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
    };
    var consumeText = function () {
        var result = "";
        var value;
        // tslint:disable-next-line
        while ((value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR"))) {
            result += value;
        }
        return result;
    };
    while (i < tokens.length) {
        var char = tryConsume("CHAR");
        var name = tryConsume("NAME");
        var pattern = tryConsume("PATTERN");
        if (name || pattern) {
            var prefix = char || "";
            if (prefixes.indexOf(prefix) === -1) {
                path += prefix;
                prefix = "";
            }
            if (path) {
                result.push(path);
                path = "";
            }
            result.push({
                name: name || key++,
                prefix: prefix,
                suffix: "",
                pattern: pattern || defaultPattern,
                modifier: tryConsume("MODIFIER") || ""
            });
            continue;
        }
        var value = char || tryConsume("ESCAPED_CHAR");
        if (value) {
            path += value;
            continue;
        }
        if (path) {
            result.push(path);
            path = "";
        }
        var open = tryConsume("OPEN");
        if (open) {
            var prefix = consumeText();
            var name_1 = tryConsume("NAME") || "";
            var pattern_1 = tryConsume("PATTERN") || "";
            var suffix = consumeText();
            mustConsume("CLOSE");
            result.push({
                name: name_1 || (pattern_1 ? key++ : ""),
                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
                prefix: prefix,
                suffix: suffix,
                modifier: tryConsume("MODIFIER") || ""
            });
            continue;
        }
        mustConsume("END");
    }
    return result;
}
exports.parse = parse;
/**
 * Compile a string to a template function for the path.
 */
function compile(str, options) {
    return tokensToFunction(parse(str, options), options);
}
exports.compile = compile;
/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens, options) {
    if (options === void 0) { options = {}; }
    var reFlags = flags(options);
    var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;
    // Compile all the tokens into regexps.
    var matches = tokens.map(function (token) {
        if (typeof token === "object") {
            return new RegExp("^(?:" + token.pattern + ")$", reFlags);
        }
    });
    return function (data) {
        var path = "";
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];
            if (typeof token === "string") {
                path += token;
                continue;
            }
            var value = data ? data[token.name] : undefined;
            var optional = token.modifier === "?" || token.modifier === "*";
            var repeat = token.modifier === "*" || token.modifier === "+";
            if (Array.isArray(value)) {
                if (!repeat) {
                    throw new TypeError("Expected \"" + token.name + "\" to not repeat, but got an array");
                }
                if (value.length === 0) {
                    if (optional)
                        continue;
                    throw new TypeError("Expected \"" + token.name + "\" to not be empty");
                }
                for (var j = 0; j < value.length; j++) {
                    var segment = encode(value[j], token);
                    if (validate && !matches[i].test(segment)) {
                        throw new TypeError("Expected all \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                    }
                    path += token.prefix + segment + token.suffix;
                }
                continue;
            }
            if (typeof value === "string" || typeof value === "number") {
                var segment = encode(String(value), token);
                if (validate && !matches[i].test(segment)) {
                    throw new TypeError("Expected \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                }
                path += token.prefix + segment + token.suffix;
                continue;
            }
            if (optional)
                continue;
            var typeOfMessage = repeat ? "an array" : "a string";
            throw new TypeError("Expected \"" + token.name + "\" to be " + typeOfMessage);
        }
        return path;
    };
}
exports.tokensToFunction = tokensToFunction;
/**
 * Create path match function from `path-to-regexp` spec.
 */
function match(str, options) {
    var keys = [];
    var re = pathToRegexp(str, keys, options);
    return regexpToFunction(re, keys, options);
}
exports.match = match;
/**
 * Create a path match function from `path-to-regexp` output.
 */
function regexpToFunction(re, keys, options) {
    if (options === void 0) { options = {}; }
    var _a = options.decode, decode = _a === void 0 ? function (x) { return x; } : _a;
    return function (pathname) {
        var m = re.exec(pathname);
        if (!m)
            return false;
        var path = m[0], index = m.index;
        var params = Object.create(null);
        var _loop_1 = function (i) {
            // tslint:disable-next-line
            if (m[i] === undefined)
                return "continue";
            var key = keys[i - 1];
            if (key.modifier === "*" || key.modifier === "+") {
                params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {
                    return decode(value, key);
                });
            }
            else {
                params[key.name] = decode(m[i], key);
            }
        };
        for (var i = 1; i < m.length; i++) {
            _loop_1(i);
        }
        return { path: path, index: index, params: params };
    };
}
exports.regexpToFunction = regexpToFunction;
/**
 * Escape a regular expression string.
 */
function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
/**
 * Get the flags for a regexp from the options.
 */
function flags(options) {
    return options && options.sensitive ? "" : "i";
}
/**
 * Pull out keys from a regexp.
 */
function regexpToRegexp(path, keys) {
    if (!keys)
        return path;
    // Use a negative lookahead to match only capturing groups.
    var groups = path.source.match(/\((?!\?)/g);
    if (groups) {
        for (var i = 0; i < groups.length; i++) {
            keys.push({
                name: i,
                prefix: "",
                suffix: "",
                modifier: "",
                pattern: ""
            });
        }
    }
    return path;
}
/**
 * Transform an array into a regexp.
 */
function arrayToRegexp(paths, keys, options) {
    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });
    return new RegExp("(?:" + parts.join("|") + ")", flags(options));
}
/**
 * Create a path regexp from string input.
 */
function stringToRegexp(path, keys, options) {
    return tokensToRegexp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 */
function tokensToRegexp(tokens, keys, options) {
    if (options === void 0) { options = {}; }
    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d;
    var endsWith = "[" + escapeString(options.endsWith || "") + "]|$";
    var delimiter = "[" + escapeString(options.delimiter || "/#?") + "]";
    var route = start ? "^" : "";
    // Iterate over the tokens and create our regexp string.
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        if (typeof token === "string") {
            route += escapeString(encode(token));
        }
        else {
            var prefix = escapeString(encode(token.prefix));
            var suffix = escapeString(encode(token.suffix));
            if (token.pattern) {
                if (keys)
                    keys.push(token);
                if (prefix || suffix) {
                    if (token.modifier === "+" || token.modifier === "*") {
                        var mod = token.modifier === "*" ? "?" : "";
                        route += "(?:" + prefix + "((?:" + token.pattern + ")(?:" + suffix + prefix + "(?:" + token.pattern + "))*)" + suffix + ")" + mod;
                    }
                    else {
                        route += "(?:" + prefix + "(" + token.pattern + ")" + suffix + ")" + token.modifier;
                    }
                }
                else {
                    route += "(" + token.pattern + ")" + token.modifier;
                }
            }
            else {
                route += "(?:" + prefix + suffix + ")" + token.modifier;
            }
        }
    }
    if (end) {
        if (!strict)
            route += delimiter + "?";
        route += !options.endsWith ? "$" : "(?=" + endsWith + ")";
    }
    else {
        var endToken = tokens[tokens.length - 1];
        var isEndDelimited = typeof endToken === "string"
            ? delimiter.indexOf(endToken[endToken.length - 1]) > -1
            : // tslint:disable-next-line
                endToken === undefined;
        if (!strict) {
            route += "(?:" + delimiter + "(?=" + endsWith + "))?";
        }
        if (!isEndDelimited) {
            route += "(?=" + delimiter + "|" + endsWith + ")";
        }
    }
    return new RegExp(route, flags(options));
}
exports.tokensToRegexp = tokensToRegexp;
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 */
function pathToRegexp(path, keys, options) {
    if (path instanceof RegExp)
        return regexpToRegexp(path, keys);
    if (Array.isArray(path))
        return arrayToRegexp(path, keys, options);
    return stringToRegexp(path, keys, options);
}
exports.pathToRegexp = pathToRegexp;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.normalizeLocalePath = normalizeLocalePath;
function normalizeLocalePath(pathname, locales) {
  let detectedLocale; // first item will be empty string from splitting at first char
  const pathnameParts = pathname.split('/');
  (locales || []).some(locale => {
    if (pathnameParts[1].toLowerCase() === locale.toLowerCase()) {
      detectedLocale = locale;
      pathnameParts.splice(1, 1);
      pathname = pathnameParts.join('/') || '/';
      return true;
    }
    return false;
  });
  return {
    pathname,
    detectedLocale
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/mitt.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/mitt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = mitt; /*
                        MIT License
                        Copyright (c) Jason Miller (https://jasonformat.com/)
                        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
                        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
                        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                        */ // This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
// It's been edited for the needs of this script
// See the LICENSE at the top of the file
function mitt() {
  const all = Object.create(null);
  return {
    on(type, handler) {
      ;
      (all[type] || (all[type] = [])).push(handler);
    },
    off(type, handler) {
      if (all[type]) {
        all[type].splice(all[type].indexOf(handler) >>> 0, 1);
      }
    },
    emit(type, ...evts) {
      // eslint-disable-next-line array-callback-return
      ;
      (all[type] || []).slice().map(handler => {
        handler(...evts);
      });
    }
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/router.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.addLocale = addLocale;
exports.delLocale = delLocale;
exports.hasBasePath = hasBasePath;
exports.addBasePath = addBasePath;
exports.delBasePath = delBasePath;
exports.isLocalURL = isLocalURL;
exports.interpolateAs = interpolateAs;
exports.resolveHref = resolveHref;
exports.markLoadingError = markLoadingError;
exports.default = void 0;
var _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");
var _denormalizePagePath = __webpack_require__(/*! ../../server/denormalize-page-path */ "./node_modules/next/dist/next-server/server/denormalize-page-path.js");
var _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ "./node_modules/next/dist/next-server/lib/mitt.js"));
var _utils = __webpack_require__(/*! ../utils */ "./node_modules/next/dist/next-server/lib/utils.js");
var _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js");
var _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js");
var _querystring = __webpack_require__(/*! ./utils/querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");
var _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js"));
var _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js");
var _routeRegex = __webpack_require__(/*! ./utils/route-regex */ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js");
var _escapePathDelimiters = _interopRequireDefault(__webpack_require__(/*! ./utils/escape-path-delimiters */ "./node_modules/next/dist/next-server/lib/router/utils/escape-path-delimiters.js"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
} /* global __NEXT_DATA__ */ // tslint:disable:no-console
const basePath =  false || '';
function buildCancellationError() {
  return Object.assign(new Error('Route Cancelled'), {
    cancelled: true
  });
}
function addPathPrefix(path, prefix) {
  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : `${prefix}${path}` : path;
}
function addLocale(path, locale, defaultLocale) {
  if (true) {
    return locale && locale !== defaultLocale && !path.startsWith('/' + locale) ? addPathPrefix(path, '/' + locale) : path;
  }
  return path;
}
function delLocale(path, locale) {
  if (true) {
    return locale && path.startsWith('/' + locale) ? path.substr(locale.length + 1) || '/' : path;
  }
  return path;
}
function hasBasePath(path) {
  return path === basePath || path.startsWith(basePath + '/');
}
function addBasePath(path) {
  // we only add the basepath on relative urls
  return addPathPrefix(path, basePath);
}
function delBasePath(path) {
  return path.slice(basePath.length) || '/';
} /**
  * Detects whether a given url is routable by the Next.js router (browser only).
  */
function isLocalURL(url) {
  if (url.startsWith('/')) return true;
  try {
    // absolute urls can be local if they are on the same origin
    const locationOrigin = (0, _utils.getLocationOrigin)();
    const resolved = new URL(url, locationOrigin);
    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);
  } catch (_) {
    return false;
  }
}
function interpolateAs(route, asPathname, query) {
  let interpolatedRoute = '';
  const dynamicRegex = (0, _routeRegex.getRouteRegex)(route);
  const dynamicGroups = dynamicRegex.groups;
  const dynamicMatches =
  // Try to match the dynamic route against the asPath
  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') ||
  // Fall back to reading the values from the href
  // TODO: should this take priority; also need to change in the router.
  query;
  interpolatedRoute = route;
  const params = Object.keys(dynamicGroups);
  if (!params.every(param => {
    let value = dynamicMatches[param] || '';
    const {
      repeat,
      optional
    } = dynamicGroups[param]; // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)
    let replaced = `[${repeat ? '...' : ''}${param}]`;
    if (optional) {
      replaced = `${!value ? '/' : ''}[${replaced}]`;
    }
    if (repeat && !Array.isArray(value)) value = [value];
    return (optional || param in dynamicMatches) && (
    // Interpolate group into data URL if present
    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map(_escapePathDelimiters.default).join('/') : (0, _escapePathDelimiters.default)(value)) || '/');
  })) {
    interpolatedRoute = ''; // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
  }
  return {
    params,
    result: interpolatedRoute
  };
}
function omitParmsFromQuery(query, params) {
  const filteredQuery = {};
  Object.keys(query).forEach(key => {
    if (!params.includes(key)) {
      filteredQuery[key] = query[key];
    }
  });
  return filteredQuery;
} /**
  * Resolves a given hyperlink with a certain router state (basePath not included).
  * Preserves absolute urls.
  */
function resolveHref(currentPath, href, resolveAs) {
  // we use a dummy base url for relative urls
  const base = new URL(currentPath, 'http://n');
  const urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href);
  try {
    const finalUrl = new URL(urlAsString, base);
    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);
    let interpolatedAs = '';
    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {
      const query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);
      const {
        result,
        params
      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);
      if (result) {
        interpolatedAs = (0, _utils.formatWithValidation)({
          pathname: result,
          hash: finalUrl.hash,
          query: omitParmsFromQuery(query, params)
        });
      }
    } // if the origin didn't change, it means we received a relative href
    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;
    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;
  } catch (_) {
    return resolveAs ? [urlAsString] : urlAsString;
  }
}
const PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR');
function markLoadingError(err) {
  return Object.defineProperty(err, PAGE_LOAD_ERROR, {});
}
function prepareUrlAs(router, url, as) {
  // If url and as provided as an object representation,
  // we'll format them into the string version here.
  return {
    url: addBasePath(resolveHref(router.pathname, url)),
    as: as ? addBasePath(resolveHref(router.pathname, as)) : as
  };
}
const manualScrollRestoration =  false && false;
const SSG_DATA_NOT_FOUND_ERROR = 'SSG Data NOT_FOUND';
function fetchRetry(url, attempts) {
  return fetch(url, {
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    credentials: 'same-origin'
  }).then(res => {
    if (!res.ok) {
      if (attempts > 1 && res.status >= 500) {
        return fetchRetry(url, attempts - 1);
      }
      if (res.status === 404) {
        // TODO: handle reloading in development from fallback returning 200
        // to on-demand-entry-handler causing it to reload periodically
        throw new Error(SSG_DATA_NOT_FOUND_ERROR);
      }
      throw new Error(`Failed to load static props`);
    }
    return res.json();
  });
}
function fetchNextData(dataHref, isServerRender) {
  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {
    // We should only trigger a server-side transition if this was caused
    // on a client-side transition. Otherwise, we'd get into an infinite
    // loop.
    if (!isServerRender) {
      markLoadingError(err);
    }
    throw err;
  });
}
class Router {
  /**
  * Map of all components loaded in `Router`
  */ // Static Data Cache
  constructor(_pathname, _query, _as, {
    initialProps,
    pageLoader,
    App,
    wrapApp,
    Component,
    initialStyleSheets,
    err,
    subscription,
    isFallback,
    locale,
    locales,
    defaultLocale
  }) {
    this.route = void 0;
    this.pathname = void 0;
    this.query = void 0;
    this.asPath = void 0;
    this.basePath = void 0;
    this.components = void 0;
    this.sdc = {};
    this.sub = void 0;
    this.clc = void 0;
    this.pageLoader = void 0;
    this._bps = void 0;
    this.events = void 0;
    this._wrapApp = void 0;
    this.isSsr = void 0;
    this.isFallback = void 0;
    this._inFlightRoute = void 0;
    this._shallow = void 0;
    this.locale = void 0;
    this.locales = void 0;
    this.defaultLocale = void 0;
    this.onPopState = e => {
      const state = e.state;
      if (!state) {
        // We get state as undefined for two reasons.
        //  1. With older safari (< 8) and older chrome (< 34)
        //  2. When the URL changed with #
        //
        // In the both cases, we don't need to proceed and change the route.
        // (as it's already changed)
        // But we can simply replace the state with the new changes.
        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
        // So, doing the following for (1) does no harm.
        const {
          pathname,
          query
        } = this;
        this.changeState('replaceState', (0, _utils.formatWithValidation)({
          pathname: addBasePath(pathname),
          query
        }), (0, _utils.getURL)());
        return;
      }
      if (!state.__N) {
        return;
      }
      const {
        url,
        as,
        options
      } = state;
      const {
        pathname
      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,
      // can be caused by navigating back from an external site
      if (this.isSsr && as === this.asPath && pathname === this.pathname) {
        return;
      } // If the downstream application returns falsy, return.
      // They will then be responsible for handling the event.
      if (this._bps && !this._bps(state)) {
        return;
      }
      this.change('replaceState', url, as, Object.assign({}, options, {
        shallow: options.shallow && this._shallow,
        locale: options.locale || this.defaultLocale
      }));
    }; // represents the current component key
    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)
    this.components = {}; // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.
    if (_pathname !== '/_error') {
      this.components[this.route] = {
        Component,
        styleSheets: initialStyleSheets,
        props: initialProps,
        err,
        __N_SSG: initialProps && initialProps.__N_SSG,
        __N_SSP: initialProps && initialProps.__N_SSP
      };
    }
    this.components['/_app'] = {
      Component: App,
      styleSheets: [/* /_app does not need its stylesheets managed */]
    }; // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented
    this.events = Router.events;
    this.pageLoader = pageLoader;
    this.pathname = _pathname;
    this.query = _query; // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch
    this.asPath =
    // @ts-ignore this is temporarily global (attached to window)
    (0, _isDynamic.isDynamicRoute)(_pathname) && __NEXT_DATA__.autoExport ? _pathname : _as;
    this.basePath = basePath;
    this.sub = subscription;
    this.clc = null;
    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating
    // back from external site
    this.isSsr = true;
    this.isFallback = isFallback;
    if (true) {
      this.locale = locale;
      this.locales = locales;
      this.defaultLocale = defaultLocale;
    }
    if (false) {}
  }
  reload() {
    window.location.reload();
  } /**
    * Go back in history
    */
  back() {
    window.history.back();
  } /**
    * Performs a `pushState` with arguments
    * @param url of the route
    * @param as masks `url` for the browser
    * @param options object you can define `shallow` and other options
    */
  push(url, as = url, options = {}) {
    ;
    ({
      url,
      as
    } = prepareUrlAs(this, url, as));
    return this.change('pushState', url, as, options);
  } /**
    * Performs a `replaceState` with arguments
    * @param url of the route
    * @param as masks `url` for the browser
    * @param options object you can define `shallow` and other options
    */
  replace(url, as = url, options = {}) {
    ;
    ({
      url,
      as
    } = prepareUrlAs(this, url, as));
    return this.change('replaceState', url, as, options);
  }
  async change(method, url, as, options) {
    if (!isLocalURL(url)) {
      window.location.href = url;
      return false;
    }
    if (true) {
      this.locale = options.locale || this.locale;
      if (typeof options.locale === 'undefined') {
        options.locale = this.locale;
      }
      const {
        normalizeLocalePath
      } = __webpack_require__(/*! ../i18n/normalize-locale-path */ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js");
      const localePathResult = normalizeLocalePath(as, this.locales);
      if (localePathResult.detectedLocale) {
        this.locale = localePathResult.detectedLocale;
        url = localePathResult.pathname;
      }
    }
    if (!options._h) {
      this.isSsr = false;
    } // marking route changes as a navigation start entry
    if (_utils.ST) {
      performance.mark('routeChange');
    }
    if (this._inFlightRoute) {
      this.abortComponentLoad(this._inFlightRoute);
    }
    as = addLocale(as, options.locale, this.defaultLocale);
    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);
    this._inFlightRoute = as; // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.
    if (!options._h && this.onlyAHashChange(cleanedAs)) {
      this.asPath = cleanedAs;
      Router.events.emit('hashChangeStart', as); // TODO: do we need the resolved href when only a hash change?
      this.changeState(method, url, as, options);
      this.scrollToHash(cleanedAs);
      this.notify(this.components[this.route]);
      Router.events.emit('hashChangeComplete', as);
      return true;
    } // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to
    const pages = await this.pageLoader.getPageList();
    const {
      __rewrites: rewrites
    } = await this.pageLoader.promisedBuildManifest;
    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
    let {
      pathname,
      query
    } = parsed;
    parsed = this._resolveHref(parsed, pages);
    if (parsed.pathname !== pathname) {
      pathname = parsed.pathname;
      url = (0, _utils.formatWithValidation)(parsed);
    } // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1
    pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url
    if (!this.urlIsNew(cleanedAs)) {
      method = 'replaceState';
    }
    let route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);
    const {
      shallow = false
    } = options; // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly
    let resolvedAs = as;
    if (true) {
      resolvedAs = (0, _resolveRewrites.default)((0, _parseRelativeUrl.parseRelativeUrl)(as).pathname, pages, basePath, rewrites, query, p => this._resolveHref({
        pathname: p
      }, pages).pathname);
      if (resolvedAs !== as) {
        const potentialHref = (0, _normalizeTrailingSlash.removePathTrailingSlash)(this._resolveHref(Object.assign({}, parsed, {
          pathname: resolvedAs
        }), pages, false).pathname); // if this directly matches a page we need to update the href to
        // allow the correct page chunk to be loaded
        if (pages.includes(potentialHref)) {
          route = potentialHref;
          pathname = potentialHref;
          parsed.pathname = pathname;
          url = (0, _utils.formatWithValidation)(parsed);
        }
      }
    }
    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);
    if ((0, _isDynamic.isDynamicRoute)(route)) {
      const parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);
      const asPathname = parsedAs.pathname;
      const routeRegex = (0, _routeRegex.getRouteRegex)(route);
      const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);
      const shouldInterpolate = route === asPathname;
      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};
      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {
        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);
        if (missingParams.length > 0) {
          if (true) {
            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \`as\` and \`href\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \`href\`'s \`query\``);
          }
          throw new Error((shouldInterpolate ? `The provided \`href\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \`as\` value (${asPathname}) is incompatible with the \`href\` value (${route}). `) + `Read more: https://err.sh/vercel/next.js/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);
        }
      } else if (shouldInterpolate) {
        as = (0, _utils.formatWithValidation)(Object.assign({}, parsedAs, {
          pathname: interpolatedAs.result,
          query: omitParmsFromQuery(query, interpolatedAs.params)
        }));
      } else {
        // Merge params into `query`, overwriting any specified in search
        Object.assign(query, routeMatch);
      }
    }
    Router.events.emit('routeChangeStart', as);
    try {
      const routeInfo = await this.getRouteInfo(route, pathname, query, as, shallow);
      let {
        error,
        props,
        __N_SSG,
        __N_SSP
      } = routeInfo; // handle redirect on client-transition
      if ((__N_SSG || __N_SSP) && props && props.pageProps && props.pageProps.__N_REDIRECT) {
        const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt
        // client-navigation if it is falling back to hard navigation if
        // it's not
        if (destination.startsWith('/')) {
          const parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);
          this._resolveHref(parsedHref, pages);
          if (pages.includes(parsedHref.pathname)) {
            return this.change(method, destination, destination, options);
          }
        }
        window.location.href = destination;
        return new Promise(() => {});
      }
      Router.events.emit('beforeHistoryChange', as);
      this.changeState(method, url, addLocale(as, options.locale, this.defaultLocale), options);
      if (true) {
        const appComp = this.components['/_app'].Component;
        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;
      }
      await this.set(route, pathname, query, cleanedAs, routeInfo).catch(e => {
        if (e.cancelled) error = error || e;else throw e;
      });
      if (error) {
        Router.events.emit('routeChangeError', error, cleanedAs);
        throw error;
      }
      if (false) {}
      Router.events.emit('routeChangeComplete', as);
      return true;
    } catch (err) {
      if (err.cancelled) {
        return false;
      }
      throw err;
    }
  }
  changeState(method, url, as, options = {}) {
    if (true) {
      if (typeof window.history === 'undefined') {
        console.error(`Warning: window.history is not available.`);
        return;
      }
      if (typeof window.history[method] === 'undefined') {
        console.error(`Warning: window.history.${method} is not available`);
        return;
      }
    }
    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {
      this._shallow = options.shallow;
      window.history[method]({
        url,
        as,
        options,
        __N: true
      },
      // Most browsers currently ignores this parameter, although they may use it in the future.
      // Passing the empty string here should be safe against future changes to the method.
      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState
      '', as);
    }
  }
  async handleRouteInfoError(err, pathname, query, as, loadErrorFail) {
    if (err.cancelled) {
      // bubble up cancellation errors
      throw err;
    }
    if (PAGE_LOAD_ERROR in err || loadErrorFail) {
      Router.events.emit('routeChangeError', err, as); // If we can't load the page it could be one of following reasons
      //  1. Page doesn't exists
      //  2. Page does exist in a different zone
      //  3. Internal error while loading the page
      // So, doing a hard reload is the proper way to deal with this.
      window.location.href = as; // Changing the URL doesn't block executing the current code path.
      // So let's throw a cancellation error stop the routing logic.
      throw buildCancellationError();
    }
    try {
      let Component;
      let styleSheets;
      let props;
      const ssg404 = err.message === SSG_DATA_NOT_FOUND_ERROR;
      if (ssg404) {
        try {
          let mod;
          ({
            page: Component,
            styleSheets,
            mod
          } = await this.fetchComponent('/404')); // TODO: should we tolerate these props missing and still render the
          // page instead of falling back to _error?
          if (mod && mod.__N_SSG) {
            props = await this._getStaticData(this.pageLoader.getDataHref('/404', '/404', true, this.locale));
          }
        } catch (_err) {// non-fatal fallback to _error
        }
      }
      if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {
        ;
        ({
          page: Component,
          styleSheets
        } = await this.fetchComponent('/_error'));
      }
      const routeInfo = {
        props,
        Component,
        styleSheets,
        err: ssg404 ? undefined : err,
        error: ssg404 ? undefined : err
      };
      if (!routeInfo.props) {
        try {
          routeInfo.props = await this.getInitialProps(Component, {
            err,
            pathname,
            query
          });
        } catch (gipErr) {
          console.error('Error in error page `getInitialProps`: ', gipErr);
          routeInfo.props = {};
        }
      }
      return routeInfo;
    } catch (routeInfoErr) {
      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true);
    }
  }
  async getRouteInfo(route, pathname, query, as, shallow = false) {
    try {
      const cachedRouteInfo = this.components[route];
      if (shallow && cachedRouteInfo && this.route === route) {
        return cachedRouteInfo;
      }
      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({
        Component: res.page,
        styleSheets: res.styleSheets,
        __N_SSG: res.mod.__N_SSG,
        __N_SSP: res.mod.__N_SSP
      }));
      const {
        Component,
        __N_SSG,
        __N_SSP
      } = routeInfo;
      if (true) {
        const {
          isValidElementType
        } = __webpack_require__(/*! react-is */ "react-is");
        if (!isValidElementType(Component)) {
          throw new Error(`The default export is not a React Component in page: "${pathname}"`);
        }
      }
      let dataHref;
      if (__N_SSG || __N_SSP) {
        dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({
          pathname,
          query
        }), delBasePath(as), __N_SSG, this.locale);
      }
      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component,
      // we provide AppTree later so this needs to be `any`
      {
        pathname,
        query,
        asPath: as
      }));
      routeInfo.props = props;
      this.components[route] = routeInfo;
      return routeInfo;
    } catch (err) {
      return this.handleRouteInfoError(err, pathname, query, as);
    }
  }
  set(route, pathname, query, as, data) {
    this.isFallback = false;
    this.route = route;
    this.pathname = pathname;
    this.query = query;
    this.asPath = as;
    return this.notify(data);
  } /**
    * Callback to execute before replacing router state
    * @param cb callback to be executed
    */
  beforePopState(cb) {
    this._bps = cb;
  }
  onlyAHashChange(as) {
    if (!this.asPath) return false;
    const [oldUrlNoHash, oldHash] = this.asPath.split('#');
    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same
    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
      return true;
    } // If the urls are change, there's more than a hash change
    if (oldUrlNoHash !== newUrlNoHash) {
      return false;
    } // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.
    return oldHash !== newHash;
  }
  scrollToHash(as) {
    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value
    if (hash === '') {
      window.scrollTo(0, 0);
      return;
    } // First we check if the element by id is found
    const idEl = document.getElementById(hash);
    if (idEl) {
      idEl.scrollIntoView();
      return;
    } // If there's no element with the id, we check the `name` property
    // To mirror browsers
    const nameEl = document.getElementsByName(hash)[0];
    if (nameEl) {
      nameEl.scrollIntoView();
    }
  }
  urlIsNew(asPath) {
    return this.asPath !== asPath;
  }
  _resolveHref(parsedHref, pages, applyBasePath = true) {
    const {
      pathname
    } = parsedHref;
    const cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(applyBasePath ? delBasePath(pathname) : pathname));
    if (cleanPathname === '/404' || cleanPathname === '/_error') {
      return parsedHref;
    } // handle resolving href for dynamic routes
    if (!pages.includes(cleanPathname)) {
      // eslint-disable-next-line array-callback-return
      pages.some(page => {
        if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {
          parsedHref.pathname = applyBasePath ? addBasePath(page) : page;
          return true;
        }
      });
    }
    return parsedHref;
  } /**
    * Prefetch page code, you may wait for the data during page rendering.
    * This feature only works in production!
    * @param url the href of prefetched page
    * @param asPath the as path of the prefetched page
    */
  async prefetch(url, asPath = url, options = {}) {
    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
    let {
      pathname
    } = parsed;
    const pages = await this.pageLoader.getPageList();
    parsed = this._resolveHref(parsed, pages);
    if (parsed.pathname !== pathname) {
      pathname = parsed.pathname;
      url = (0, _utils.formatWithValidation)(parsed);
    } // Prefetch is not supported in development mode because it would trigger on-demand-entries
    if (true) {
      return;
    }
    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);
    await Promise.all([this.pageLoader.prefetchData(url, asPath, this.locale, this.defaultLocale), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);
  }
  async fetchComponent(route) {
    let cancelled = false;
    const cancel = this.clc = () => {
      cancelled = true;
    };
    const componentResult = await this.pageLoader.loadPage(route);
    if (cancelled) {
      const error = new Error(`Abort fetching component for route: "${route}"`);
      error.cancelled = true;
      throw error;
    }
    if (cancel === this.clc) {
      this.clc = null;
    }
    return componentResult;
  }
  _getData(fn) {
    let cancelled = false;
    const cancel = () => {
      cancelled = true;
    };
    this.clc = cancel;
    return fn().then(data => {
      if (cancel === this.clc) {
        this.clc = null;
      }
      if (cancelled) {
        const err = new Error('Loading initial props cancelled');
        err.cancelled = true;
        throw err;
      }
      return data;
    });
  }
  _getStaticData(dataHref) {
    const {
      href: cacheKey
    } = new URL(dataHref, window.location.href);
    if (false) {}
    return fetchNextData(dataHref, this.isSsr).then(data => {
      this.sdc[cacheKey] = data;
      return data;
    });
  }
  _getServerData(dataHref) {
    return fetchNextData(dataHref, this.isSsr);
  }
  getInitialProps(Component, ctx) {
    const {
      Component: App
    } = this.components['/_app'];
    const AppTree = this._wrapApp(App);
    ctx.AppTree = AppTree;
    return (0, _utils.loadGetInitialProps)(App, {
      AppTree,
      Component,
      router: this,
      ctx
    });
  }
  abortComponentLoad(as) {
    if (this.clc) {
      Router.events.emit('routeChangeError', buildCancellationError(), as);
      this.clc();
      this.clc = null;
    }
  }
  notify(data) {
    return this.sub(data, this.components['/_app'].Component);
  }
}
exports.default = Router;
Router.events = (0, _mitt.default)();

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/escape-path-delimiters.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/escape-path-delimiters.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = escapePathDelimiters; // escape delimiters used by path-to-regexp
function escapePathDelimiters(segment) {
  return segment.replace(/[/#?]/g, char => encodeURIComponent(char));
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/format-url.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.formatUrl = formatUrl;
var querystring = _interopRequireWildcard(__webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js"));
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function () {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
} // Format function modified from nodejs
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
const slashedProtocols = /https?|ftp|gopher|file/;
function formatUrl(urlObj) {
  let {
    auth,
    hostname
  } = urlObj;
  let protocol = urlObj.protocol || '';
  let pathname = urlObj.pathname || '';
  let hash = urlObj.hash || '';
  let query = urlObj.query || '';
  let host = false;
  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';
  if (urlObj.host) {
    host = auth + urlObj.host;
  } else if (hostname) {
    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname);
    if (urlObj.port) {
      host += ':' + urlObj.port;
    }
  }
  if (query && typeof query === 'object') {
    query = String(querystring.urlQueryToSearchParams(query));
  }
  let search = urlObj.search || query && `?${query}` || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }
  if (hash && hash[0] !== '#') hash = '#' + hash;
  if (search && search[0] !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, encodeURIComponent);
  search = search.replace('#', '%23');
  return `${protocol}${host}${pathname}${search}${hash}`;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isDynamicRoute = isDynamicRoute; // Identify /[param]/ in route string
const TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;
function isDynamicRoute(route) {
  return TEST_ROUTE.test(route);
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.parseRelativeUrl = parseRelativeUrl;
var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/next/dist/next-server/lib/utils.js");
var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");
const DUMMY_BASE = new URL(true ? 'http://n' : undefined); /**
                                                                                 * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative
                                                                                 * (e.g. `./hello`) then at least base must be.
                                                                                 * Absolute urls are rejected with one exception, in the browser, absolute urls that are on
                                                                                 * the current origin will be parsed as relative
                                                                                 */
function parseRelativeUrl(url, base) {
  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE;
  const {
    pathname,
    searchParams,
    search,
    hash,
    href,
    origin,
    protocol
  } = new URL(url, resolvedBase);
  if (origin !== DUMMY_BASE.origin || protocol !== 'http:' && protocol !== 'https:') {
    throw new Error('invariant: invalid relative URL');
  }
  return {
    pathname,
    query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
    search,
    hash,
    href: href.slice(DUMMY_BASE.origin.length)
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/path-match.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/path-match.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
exports.__esModule = true;
exports.pathToRegexp = exports.default = exports.customRouteMatcherOptions = exports.matcherOptions = void 0;
var pathToRegexp = _interopRequireWildcard(__webpack_require__(/*! next/dist/compiled/path-to-regexp */ "./node_modules/next/dist/compiled/path-to-regexp/index.js"));
exports.pathToRegexp = pathToRegexp;
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function () {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const matcherOptions = {
  sensitive: false,
  delimiter: '/'
};
exports.matcherOptions = matcherOptions;
const customRouteMatcherOptions = _objectSpread(_objectSpread({}, matcherOptions), {}, {
  strict: true
});
exports.customRouteMatcherOptions = customRouteMatcherOptions;
var _default = (customRoute = false) => {
  return path => {
    const keys = [];
    const matcherRegex = pathToRegexp.pathToRegexp(path, keys, customRoute ? customRouteMatcherOptions : matcherOptions);
    const matcher = pathToRegexp.regexpToFunction(matcherRegex, keys);
    return (pathname, params) => {
      const res = pathname == null ? false : matcher(pathname);
      if (!res) {
        return false;
      }
      if (customRoute) {
        for (const key of keys) {
          // unnamed params should be removed as they
          // are not allowed to be used in the destination
          if (typeof key.name === 'number') {
            delete res.params[key.name];
          }
        }
      }
      return _objectSpread(_objectSpread({}, params), res.params);
    };
  };
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
exports.__esModule = true;
exports.default = prepareDestination;
var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");
var _parseRelativeUrl = __webpack_require__(/*! ./parse-relative-url */ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js");
var pathToRegexp = _interopRequireWildcard(__webpack_require__(/*! next/dist/compiled/path-to-regexp */ "./node_modules/next/dist/compiled/path-to-regexp/index.js"));
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function () {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function prepareDestination(destination, params, query, appendParamsToQuery, basePath) {
  let parsedDestination = {};
  if (destination.startsWith('/')) {
    parsedDestination = (0, _parseRelativeUrl.parseRelativeUrl)(destination);
  } else {
    const {
      pathname,
      searchParams,
      hash,
      hostname,
      port,
      protocol,
      search,
      href
    } = new URL(destination);
    parsedDestination = {
      pathname,
      query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
      hash,
      protocol,
      hostname,
      port,
      search,
      href
    };
  }
  const destQuery = parsedDestination.query;
  const destPath = `${parsedDestination.pathname}${parsedDestination.hash || ''}`;
  const destPathParamKeys = [];
  pathToRegexp.pathToRegexp(destPath, destPathParamKeys);
  const destPathParams = destPathParamKeys.map(key => key.name);
  let destinationCompiler = pathToRegexp.compile(destPath,
  // we don't validate while compiling the destination since we should
  // have already validated before we got to this point and validating
  // breaks compiling destinations with named pattern params from the source
  // e.g. /something:hello(.*) -> /another/:hello is broken with validation
  // since compile validation is meant for reversing and not for inserting
  // params from a separate path-regex into another
  {
    validate: false
  });
  let newUrl; // update any params in query values
  for (const [key, strOrArray] of Object.entries(destQuery)) {
    let value = Array.isArray(strOrArray) ? strOrArray[0] : strOrArray;
    if (value) {
      // the value needs to start with a forward-slash to be compiled
      // correctly
      value = `/${value}`;
      const queryCompiler = pathToRegexp.compile(value, {
        validate: false
      });
      value = queryCompiler(params).substr(1);
    }
    destQuery[key] = value;
  } // add path params to query if it's not a redirect and not
  // already defined in destination query or path
  const paramKeys = Object.keys(params);
  if (appendParamsToQuery && !paramKeys.some(key => destPathParams.includes(key))) {
    for (const key of paramKeys) {
      if (!(key in destQuery)) {
        destQuery[key] = params[key];
      }
    }
  }
  const shouldAddBasePath = destination.startsWith('/') && basePath;
  try {
    newUrl = `${shouldAddBasePath ? basePath : ''}${destinationCompiler(params)}`;
    const [pathname, hash] = newUrl.split('#');
    parsedDestination.pathname = pathname;
    parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`;
    delete parsedDestination.search;
  } catch (err) {
    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {
      throw new Error(`To use a multi-match in the destination you must add \`*\` at the end of the param name to signify it should repeat. https://err.sh/vercel/next.js/invalid-multi-match`);
    }
    throw err;
  } // Query merge order lowest priority to highest
  // 1. initial URL query values
  // 2. path segment values
  // 3. destination specified query values
  parsedDestination.query = _objectSpread(_objectSpread({}, query), parsedDestination.query);
  return {
    newUrl,
    parsedDestination
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/querystring.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.searchParamsToUrlQuery = searchParamsToUrlQuery;
exports.urlQueryToSearchParams = urlQueryToSearchParams;
exports.assign = assign;
function searchParamsToUrlQuery(searchParams) {
  const query = {};
  searchParams.forEach((value, key) => {
    if (typeof query[key] === 'undefined') {
      query[key] = value;
    } else if (Array.isArray(query[key])) {
      ;
      query[key].push(value);
    } else {
      query[key] = [query[key], value];
    }
  });
  return query;
}
function stringifyUrlQueryParam(param) {
  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {
    return String(param);
  } else {
    return '';
  }
}
function urlQueryToSearchParams(urlQuery) {
  const result = new URLSearchParams();
  Object.entries(urlQuery).forEach(([key, value]) => {
    if (Array.isArray(value)) {
      value.forEach(item => result.append(key, stringifyUrlQueryParam(item)));
    } else {
      result.set(key, stringifyUrlQueryParam(value));
    }
  });
  return result;
}
function assign(target, ...searchParamsList) {
  searchParamsList.forEach(searchParams => {
    Array.from(searchParams.keys()).forEach(key => target.delete(key));
    searchParams.forEach((value, key) => target.append(key, value));
  });
  return target;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = resolveRewrites;
var _pathMatch = _interopRequireDefault(__webpack_require__(/*! ./path-match */ "./node_modules/next/dist/next-server/lib/router/utils/path-match.js"));
var _prepareDestination = _interopRequireDefault(__webpack_require__(/*! ./prepare-destination */ "./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js"));
var _normalizeTrailingSlash = __webpack_require__(/*! ../../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
const customRouteMatcher = (0, _pathMatch.default)(true);
function resolveRewrites(asPath, pages, basePath, rewrites, query, resolveHref) {
  if (!pages.includes(asPath)) {
    for (const rewrite of rewrites) {
      const matcher = customRouteMatcher(rewrite.source);
      const params = matcher(asPath);
      if (params) {
        if (!rewrite.destination) {
          // this is a proxied rewrite which isn't handled on the client
          break;
        }
        const destRes = (0, _prepareDestination.default)(rewrite.destination, params, query, true, rewrite.basePath === false ? '' : basePath);
        asPath = destRes.parsedDestination.pathname;
        Object.assign(query, destRes.parsedDestination.query);
        if (pages.includes((0, _normalizeTrailingSlash.removePathTrailingSlash)(asPath))) {
          // check if we now match a page as this means we are done
          // resolving the rewrites
          break;
        } // check if we match a dynamic-route, if so we break the rewrites chain
        const resolvedHref = resolveHref(asPath);
        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {
          break;
        }
      }
    }
  }
  return asPath;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteMatcher = getRouteMatcher;
function getRouteMatcher(routeRegex) {
  const {
    re,
    groups
  } = routeRegex;
  return pathname => {
    const routeMatch = re.exec(pathname);
    if (!routeMatch) {
      return false;
    }
    const decode = param => {
      try {
        return decodeURIComponent(param);
      } catch (_) {
        const err = new Error('failed to decode param');
        err.code = 'DECODE_FAILED';
        throw err;
      }
    };
    const params = {};
    Object.keys(groups).forEach(slugName => {
      const g = groups[slugName];
      const m = routeMatch[g.pos];
      if (m !== undefined) {
        params[slugName] = ~m.indexOf('/') ? m.split('/').map(entry => decode(entry)) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-regex.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module
// to reduce bytes
function escapeRegex(str) {
  return str.replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&');
}
function parseParameter(param) {
  const optional = param.startsWith('[') && param.endsWith(']');
  if (optional) {
    param = param.slice(1, -1);
  }
  const repeat = param.startsWith('...');
  if (repeat) {
    param = param.slice(3);
  }
  return {
    key: param,
    repeat,
    optional
  };
}
function getRouteRegex(normalizedRoute) {
  const segments = (normalizedRoute.replace(/\/$/, '') || '/').slice(1).split('/');
  const groups = {};
  let groupIndex = 1;
  const parameterizedRoute = segments.map(segment => {
    if (segment.startsWith('[') && segment.endsWith(']')) {
      const {
        key,
        optional,
        repeat
      } = parseParameter(segment.slice(1, -1));
      groups[key] = {
        pos: groupIndex++,
        repeat,
        optional
      };
      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';
    } else {
      return `/${escapeRegex(segment)}`;
    }
  }).join(''); // dead code eliminate for browser since it's only needed
  // while generating routes-manifest
  if (true) {
    let routeKeyCharCode = 97;
    let routeKeyCharLength = 1; // builds a minimal routeKey using only a-z and minimal number of characters
    const getSafeRouteKey = () => {
      let routeKey = '';
      for (let i = 0; i < routeKeyCharLength; i++) {
        routeKey += String.fromCharCode(routeKeyCharCode);
        routeKeyCharCode++;
        if (routeKeyCharCode > 122) {
          routeKeyCharLength++;
          routeKeyCharCode = 97;
        }
      }
      return routeKey;
    };
    const routeKeys = {};
    let namedParameterizedRoute = segments.map(segment => {
      if (segment.startsWith('[') && segment.endsWith(']')) {
        const {
          key,
          optional,
          repeat
        } = parseParameter(segment.slice(1, -1)); // replace any non-word characters since they can break
        // the named regex
        let cleanedKey = key.replace(/\W/g, '');
        let invalidKey = false; // check if the key is still invalid and fallback to using a known
        // safe key
        if (cleanedKey.length === 0 || cleanedKey.length > 30) {
          invalidKey = true;
        }
        if (!isNaN(parseInt(cleanedKey.substr(0, 1)))) {
          invalidKey = true;
        }
        if (invalidKey) {
          cleanedKey = getSafeRouteKey();
        }
        routeKeys[cleanedKey] = key;
        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;
      } else {
        return `/${escapeRegex(segment)}`;
      }
    }).join('');
    return {
      re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
      groups,
      routeKeys,
      namedRegex: `^${namedParameterizedRoute}(?:/)?$`
    };
  }
  return {
    re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
    groups
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/utils.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.execOnce = execOnce;
exports.getLocationOrigin = getLocationOrigin;
exports.getURL = getURL;
exports.getDisplayName = getDisplayName;
exports.isResSent = isResSent;
exports.loadGetInitialProps = loadGetInitialProps;
exports.formatWithValidation = formatWithValidation;
exports.ST = exports.SP = exports.urlObjectKeys = void 0;
var _formatUrl = __webpack_require__(/*! ./router/utils/format-url */ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js"); /**
                                                       * Utils
                                                       */
function execOnce(fn) {
  let used = false;
  let result;
  return (...args) => {
    if (!used) {
      used = true;
      result = fn(...args);
    }
    return result;
  };
}
function getLocationOrigin() {
  const {
    protocol,
    hostname,
    port
  } = window.location;
  return `${protocol}//${hostname}${port ? ':' + port : ''}`;
}
function getURL() {
  const {
    href
  } = window.location;
  const origin = getLocationOrigin();
  return href.substring(origin.length);
}
function getDisplayName(Component) {
  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}
function isResSent(res) {
  return res.finished || res.headersSent;
}
async function loadGetInitialProps(App, ctx) {
  if (true) {
    var _App$prototype;
    if ((_App$prototype = App.prototype) == null ? void 0 : _App$prototype.getInitialProps) {
      const message = `"${getDisplayName(App)}.getInitialProps()" is defined as an instance method - visit https://err.sh/vercel/next.js/get-initial-props-as-an-instance-method for more information.`;
      throw new Error(message);
    }
  } // when called from _app `ctx` is nested in `ctx`
  const res = ctx.res || ctx.ctx && ctx.ctx.res;
  if (!App.getInitialProps) {
    if (ctx.ctx && ctx.Component) {
      // @ts-ignore pageProps default
      return {
        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)
      };
    }
    return {};
  }
  const props = await App.getInitialProps(ctx);
  if (res && isResSent(res)) {
    return props;
  }
  if (!props) {
    const message = `"${getDisplayName(App)}.getInitialProps()" should resolve to an object. But found "${props}" instead.`;
    throw new Error(message);
  }
  if (true) {
    if (Object.keys(props).length === 0 && !ctx.ctx) {
      console.warn(`${getDisplayName(App)} returned an empty object from \`getInitialProps\`. This de-optimizes and prevents automatic static optimization. https://err.sh/vercel/next.js/empty-object-getInitialProps`);
    }
  }
  return props;
}
const urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];
exports.urlObjectKeys = urlObjectKeys;
function formatWithValidation(url) {
  if (true) {
    if (url !== null && typeof url === 'object') {
      Object.keys(url).forEach(key => {
        if (urlObjectKeys.indexOf(key) === -1) {
          console.warn(`Unknown key passed via urlObject into url.format: ${key}`);
        }
      });
    }
  }
  return (0, _formatUrl.formatUrl)(url);
}
const SP = typeof performance !== 'undefined';
exports.SP = SP;
const ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';
exports.ST = ST;

/***/ }),

/***/ "./node_modules/next/dist/next-server/server/denormalize-page-path.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/server/denormalize-page-path.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
exports.__esModule=true;exports.normalizePathSep=normalizePathSep;exports.denormalizePagePath=denormalizePagePath;function normalizePathSep(path){return path.replace(/\\/g,'/');}function denormalizePagePath(page){page=normalizePathSep(page);if(page.startsWith('/index/')){page=page.slice(6);}else if(page==='/index'){page='/';}return page;}
//# sourceMappingURL=denormalize-page-path.js.map

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/client/link */ "./node_modules/next/dist/client/link.js")


/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./pages/home/home.module.scss":
/*!*************************************!*\
  !*** ./pages/home/home.module.scss ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Exports
module.exports = {
	"container": "home_container__33K-2",
	"itemList": "home_itemList__39Wix",
	"title": "home_title__8-y3k",
	"formContainer": "home_formContainer__2NNev",
	"capturesList": "home_capturesList__Xy9WR",
	"withProduct": "home_withProduct__1IB9A",
	"currentProduct": "home_currentProduct__10sV5",
	"labelRadio": "home_labelRadio__1mJRD",
	"productScan": "home_productScan__g0kL0",
	"scannerDataContainer": "home_scannerDataContainer__32HJQ",
	"element": "home_element__2Z5HP",
	"dataContainer": "home_dataContainer__1bkqL",
	"left-images": "home_left-images__3AHbf",
	"imageRight": "home_imageRight__3RnAo",
	"imageLeft": "home_imageLeft__26FeR",
	"image": "home_image__2ac_C",
	"priceText": "home_priceText__2rQQJ",
	"productData": "home_productData__hs3vK",
	"productDataContainer": "home_productDataContainer__24b0Y",
	"productDataContainerCompleted": "home_productDataContainerCompleted__2ES0T",
	"historyContainer": "home_historyContainer__K0IBJ",
	"squareContainer": "home_squareContainer__2a05k",
	"messageNoElementsContainer": "home_messageNoElementsContainer__1q9IW",
	"separator": "home_separator__3CYiL",
	"border": "home_border__1Yxrj",
	"modalImage": "home_modalImage__1fHiR",
	"modalImageClose": "home_modalImageClose__3AVt8",
	"containerRadio": "home_containerRadio__1TVWV",
	"displayRadio": "home_displayRadio__3M_g3"
};


/***/ }),

/***/ "./pages/home/index.tsx":
/*!******************************!*\
  !*** ./pages/home/index.tsx ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/header */ "./components/header/index.js");
/* harmony import */ var _utils_session_management__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/session-management */ "./utils/session-management.ts");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/head */ "next/head");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _home_module_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./home.module.scss */ "./pages/home/home.module.scss");
/* harmony import */ var _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_home_module_scss__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _components_select__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/select */ "./components/select/index.js");
/* harmony import */ var _components_buttons__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../components/buttons */ "./components/buttons/index.js");
/* harmony import */ var _components_autocomplete__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../components/autocomplete */ "./components/autocomplete/index.tsx");
/* harmony import */ var _components_buttons_SecondaryButton__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../components/buttons/SecondaryButton */ "./components/buttons/SecondaryButton.tsx");
/* harmony import */ var _components_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../components/input */ "./components/input/index.js");
/* harmony import */ var _components_checkbox__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../components/checkbox */ "./components/checkbox/index.js");
/* harmony import */ var _components_square_Square__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../components/square/Square */ "./components/square/Square.tsx");
/* harmony import */ var _utils_api__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utils/api */ "./utils/api.ts");
/* harmony import */ var _utils_catalogs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utils/catalogs */ "./utils/catalogs.ts");
/* harmony import */ var _utils_photo_url__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utils/photo_url */ "./utils/photo_url.ts");
/* harmony import */ var _components_modal_Modal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../components/modal/Modal */ "./components/modal/Modal.tsx");
/* harmony import */ var _utils_format_date__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utils/format-date */ "./utils/format-date.ts");
/* harmony import */ var _components_loader_Loader__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../components/loader/Loader */ "./components/loader/Loader.tsx");
/* harmony import */ var _components_map_Map__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../components/map/Map */ "./components/map/Map.tsx");
/* harmony import */ var _components_pageTitle_PageTitle__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../components/pageTitle/PageTitle */ "./components/pageTitle/PageTitle.tsx");
/* harmony import */ var react_nextjs_toast__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! react-nextjs-toast */ "react-nextjs-toast");
/* harmony import */ var react_nextjs_toast__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(react_nextjs_toast__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../i18n */ "./i18n/index.ts");
/* harmony import */ var _utils_theme__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../utils/theme */ "./utils/theme.ts");
var _jsxFileName = "C:\\Users\\hgm\\Desktop\\Maquina3B\\ManDoc\\Proyectos\\Php\\DashBoard\\SVN\\Develop\\pricecheck-dashboard\\pages\\home\\index.tsx";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
























const emptyLocation = {
  type: '',
  coordinates: [90, -90]
};
const emptyStore = {
  id: 0,
  name: '',
  address: '',
  location: emptyLocation,
  chain: [],
  storeId: 0
};
const emptyMission = {
  id: 1,
  title: '',
  description: '',
  points: 0
};
const emptyCatalog = {
  id: 0,
  name: ''
};
const emptyGroup = {
  id: 0,
  name: ''
};
const emptyLine = {
  id: 0,
  name: '',
  id_group: 0
};
const emptyProduct = {
  id: 0,
  name: '',
  quantity: 1,
  barcode: '',
  unit: emptyCatalog,
  group: emptyCatalog,
  line: emptyLine,
  brand: emptyCatalog,
  type: '',
  is_enable: false,
  picture_path: ''
};
const emptyUser = {
  id: 1,
  first_name: '',
  last_name: '',
  mother_last_name: '',
  employee_number: 0
};
const emptyPicture = {
  product_picture: '',
  shelf_picture: '',
  promo_picture: ''
};
const emptyHistoryData = {
  price: 0,
  capture_date: ''
};
const emptyHistory = {
  recent_price: emptyHistoryData,
  max_price: emptyHistoryData,
  min_price: emptyHistoryData,
  min_price_with_promotion: emptyHistoryData
};
const emptyScan = {
  id: 0,
  barcode: '',
  price: '',
  special_price: false,
  comments: '',
  capture_date: '',
  reception_date: '',
  mission: emptyMission,
  product: emptyProduct,
  scanned_by: emptyUser,
  reviewed: false,
  store: emptyStore,
  pictures: [emptyPicture],
  history: emptyHistory
};
const tabOrder = {
  viewPicture: -1,
  productName: 0,
  productImage: 1,
  productBarcode: -1,
  productBrand: 2,
  productQuantity: 3,
  productUnit: 4,
  productGroup: 5,
  productLine: 6,
  productType: 7,
  barcode: 8,
  price: 9,
  special_price: 10,
  store: 11,
  reject: 12,
  validate: 13,
  address: -1,
  comments: -1
};
const tabOrderBlockedProduct = {
  viewPicture: -1,
  productName: -1,
  productImage: -1,
  productBarcode: -1,
  productBrand: -1,
  productQuantity: -1,
  productUnit: -1,
  productGroup: -1,
  productLine: -1,
  productType: -1,
  barcode: -1,
  price: 0,
  special_price: 1,
  store: 2,
  reject: 3,
  validate: 4,
  address: -1,
  comments: -1
};
const tabOrderSpecial = {
  viewPicture: 11,
  productName: 0,
  productImage: 1,
  productBarcode: -1,
  productBrand: 2,
  productQuantity: 3,
  productUnit: 4,
  productGroup: 5,
  productLine: 6,
  productType: 7,
  barcode: 8,
  price: 9,
  special_price: 10,
  store: 12,
  reject: 13,
  validate: 14,
  address: -1,
  comments: -1
};
const tabOrderBlockedProductSpecial = {
  viewPicture: 2,
  productName: -1,
  productImage: -1,
  productBarcode: -1,
  productBrand: -1,
  productQuantity: -1,
  productUnit: -1,
  productGroup: -1,
  productLine: -1,
  productType: -1,
  barcode: -1,
  price: 0,
  special_price: 1,
  store: 3,
  reject: 4,
  validate: 5,
  address: -1,
  comments: -1
};
class HomePage extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(props) {
    super(props);
    _defineProperty(this, "productRef", void 0);
    _defineProperty(this, "typeFilter", [{
      value: 'MC',
      label: 'MC'
    }, {
      value: 'MP',
      label: 'MP'
    }]);
    _defineProperty(this, "state", {
      scans: [],
      loadedScan: emptyScan,
      nextScanId: null,
      productFilter: null,
      missionFilter: null,
      groupList: [],
      missionList: [],
      brandList: [],
      unitList: [],
      storeList: [],
      lineList: [],
      lineListFilter: [],
      loadedProduct: emptyProduct,
      loadedStore: emptyStore,
      loadedBrand: null,
      loadedGroup: emptyCatalog,
      loadedUnit: emptyCatalog,
      loadedLine: emptyLine,
      loadedRecentPrice: emptyHistoryData,
      loadedMaxPrice: emptyHistoryData,
      loadedMinPrice: emptyHistoryData,
      loadedMinPricePromotion: emptyHistoryData,
      isValid: false,
      showModal: false,
      showRejectModal: false,
      selectedRadio: null,
      isImageModal: false,
      showLoader: false,
      disabledFilterBtn: false,
      barcodeErrorMsg: '',
      priceErrorMsg: '',
      productNameErrorMsg: '',
      productTypeErrorMsg: '',
      productBrandErrorMsg: '',
      productLineErrorMsg: '',
      productUnitErrorMsg: '',
      productGroupErrorMsg: '',
      showMessageNoElements: true,
      selectedPicture: '',
      existProduct: false,
      imageVis: '',
      selectedScanId: 0,
      lat: '',
      lng: '',
      address: '',
      currentScanVerifiedId: 0,
      currentScanWasVerified: false,
      isBeingValidated: false,
      isBeingValidatedByCurrentUser: false,
      userId: 0,
      validatorId: 0,
      scansTotal: 0,
      scansTotalWithProduct: 0,
      scansTotalWithoutProduct: 0,
      scanFilter: [{
        value: '',
        label: 'Todos',
        key: 'all'
      }, {
        value: 'yes',
        label: 'Con producto',
        key: 'withProduct'
      }, {
        value: 'no',
        label: 'Sin producto',
        key: 'withoutProduct'
      }],
      resetLine: false
    });
    _defineProperty(this, "handleWindowClose", async event => {
      event.preventDefault();
      const {
        isBeingValidatedByCurrentUser,
        selectedScanId
      } = this.state;
      if (isBeingValidatedByCurrentUser) {
        await this.updateBeingValidatedStatus('disable', selectedScanId);
      }
      return null;
    });
    _defineProperty(this, "updateBeingValidatedStatus", async (status, scanId) => {
      try {
        const {
          selectedScanId
        } = this.state;
        if (status === 'enable') {
          status = '1';
        } else if (status === 'disable') {
          status = '0';
        }
        const endpoint = 'api/scan/being-validated';
        const request = {
          id_scan: scanId,
          status
        };
        const headers = {
          headers: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])()
        };
        const response = await _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].post(endpoint, request, headers);
        const {
          isBeingValidated,
          validatorId
        } = response.data;
        let userId = await Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getId"])();
        userId = parseInt(userId);
        const isBeingValidatedByCurrentUser = validatorId === userId;
        this.setState({
          currentScanWasVerified: true,
          currentScanVerifiedId: selectedScanId,
          isBeingValidated,
          isBeingValidatedByCurrentUser,
          validatorId,
          userId
        });
      } catch (error) {
        console.error('HomePage.updateBeingValidatedStatus[error]: ', error);
      }
    });
    _defineProperty(this, "handleCommands", event => {
      const keyCode = event.which ? event.which : event.keyCode;
      const key = event.code ? event.code : event.key;
      const isControlKey = event.ctrlKey;
      const isShiftKey = event.shiftKey;
      const isPlusKey = keyCode === 187 || keyCode === 107 || key === '*';
      const isLessKey = keyCode === 189 || keyCode === 109;
      if (isControlKey && isShiftKey) {
        if (isLessKey) {
          event.preventDefault();
          this.openReject();
        }
        if (isPlusKey) {
          event.preventDefault();
          this.validateScanButtonHandler();
        }
      }
    });
    _defineProperty(this, "getScanList", async (isFirstRun = false) => {
      const params = {};
      const locale = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getLocale"])();
      if (this.state.productFilter) {
        params.withProduct = `${this.state.productFilter}`;
      }
      if (this.state.missionFilter) {
        params.textSearch = `${this.state.missionFilter}`;
      }
      try {
        const res = await _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].get('/api/scan/all', {
          headers: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])(),
          params
        });
        if (res.data.scans.data.length > 0) {
          const {
            data,
            total_pending,
            with_product,
            without_product
          } = res.data.scans;
          const scans = data.map(scan => _objectSpread({}, scan));
          const scansCounts = {
            all: total_pending,
            withProduct: with_product,
            withoutProduct: without_product
          };
          const scanFilter = this.state.scanFilter.map(filter => {
            filter.label = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, `home.sidebar.scanFilter.${filter.key}`);
            filter.label = filter.label.replace(/ *\([^)]*\) */g, '');
            filter.label = `${filter.label} (${scansCounts[filter.key]})`;
            return filter;
          });
          this.setState({
            scans,
            showMessageNoElements: isFirstRun,
            scanFilter
          });
          const {
            nextScanId
          } = this.state;
          if (!isFirstRun) {
            if (nextScanId) {
              await this.scanSelectedHandler(nextScanId);
              await this.updateBeingValidatedStatus('enable', nextScanId);
            } else {
              await this.scanSelectedHandler(scans[0].id);
              await this.updateBeingValidatedStatus('enable', scans[0].id);
            }
          }
        }
        if (res.data.scans.data.length === 0 || isFirstRun) {
          this.setState({
            loadedScan: emptyScan,
            showMessageNoElements: true,
            disabledFilterBtn: false,
            showLoader: false
          });
        }
      } catch (err) {
        // TODO: enviar notificación cuando falla al obtener los scans
      }
    });
    _defineProperty(this, "scanSelectedHandler", async (scanId, barcode) => {
      try {
        var _scans;
        this.cleanScan();
        const {
          scans,
          isBeingValidatedByCurrentUser,
          resetLine
        } = this.state;
        let {
          selectedScanId
        } = this.state;
        if (selectedScanId) {
          if (isBeingValidatedByCurrentUser) {
            await this.updateBeingValidatedStatus('disable', selectedScanId);
          }
        }
        const nextIndex = scans.findIndex(s => s.id === scanId);
        const nextScanId = ((_scans = scans[nextIndex + 1]) === null || _scans === void 0 ? void 0 : _scans.id) || null;
        this.setState({
          showLoader: true,
          showMessageNoElements: false
        });
        let res;
        if (!barcode) {
          res = await _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].get(`api/scan/${scanId}`, {
            headers: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])()
          });
        } else {
          res = await _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].get(`api/scan/${selectedScanId}/barcode/${barcode}`, {
            headers: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])()
          });
        }
        await this.updateBeingValidatedStatus('enable', scanId);
        const loadedScan = _objectSpread(_objectSpread({}, res.data.scan), {}, {
          pictures: res.data.scan.pictures.map(p => {
            return _objectSpread(_objectSpread({}, p), {}, {
              product_picture: p.product_picture ? `${_utils_photo_url__WEBPACK_IMPORTED_MODULE_15__["photoUrl"]}/${p.product_picture}` : null,
              shelf_picture: p.shelf_picture ? `${_utils_photo_url__WEBPACK_IMPORTED_MODULE_15__["photoUrl"]}/${p.shelf_picture}` : null,
              promo_picture: p.promo_picture ? `${_utils_photo_url__WEBPACK_IMPORTED_MODULE_15__["photoUrl"]}/${p.promo_picture}` : null
            });
          })
        });
        const productExists = Boolean(res.data.scan.product);
        const productImage = productExists && `${_utils_photo_url__WEBPACK_IMPORTED_MODULE_15__["photoUrl"]}/${res.data.scan.product.picture_path}`;
        const loadedStore = res.data.scan.store ? res.data.scan.store : emptyStore;
        const selectedStore = this.state.storeList.find(store => {
          return store.label === loadedStore.name;
        });
        loadedStore.storeId = selectedStore.value;
        selectedScanId = res.data.scan.id;
        const nextState = {
          loadedScan,
          nextScanId,
          selectedScanId,
          loadedProduct: res.data.scan.product ? res.data.scan.product : emptyProduct,
          loadedStore,
          loadedBrand: res.data.scan.product ? res.data.scan.product.brand : '',
          loadedUnit: res.data.scan.product ? res.data.scan.product.unit : emptyCatalog,
          loadedGroup: res.data.scan.product ? res.data.scan.product.group : emptyGroup,
          loadedGroupName: '',
          loadedLine: res.data.scan.product ? res.data.scan.product.line : emptyLine,
          existProduct: productExists,
          imageVis: productImage || (loadedScan.pictures.length > 0 ? loadedScan.pictures[0].product_picture : ''),
          loadedRecentPrice: res.data.scan.product && Object.keys(res.data.scan.history.recent_price).length !== 0 ? res.data.scan.history.recent_price : emptyHistoryData,
          loadedMaxPrice: res.data.scan.product && Object.keys(res.data.scan.history.max_price).length !== 0 ? res.data.scan.history.max_price : emptyHistoryData,
          loadedMinPrice: res.data.scan.product && Object.keys(res.data.scan.history.min_price).length !== 0 ? res.data.scan.history.min_price : emptyHistoryData,
          loadedMinPricePromotion: res.data.scan.product && Object.keys(res.data.scan.history.min_price_with_promotion).length !== 0 ? res.data.scan.history.min_price_with_promotion : emptyHistoryData,
          showLoader: false,
          disabledFilterBtn: false,
          lat: res.data.scan.store !== null ? res.data.scan.store.location.coordinates[1] : '',
          lng: res.data.scan.store !== null ? res.data.scan.store.location.coordinates[0] : '',
          resetLine: !barcode ? true : false
        };
        this.setState(nextState, () => {
          if (selectedScanId) {
            const firstTabindex = document.querySelector('input[tabindex="0"]');
            if (firstTabindex) {
              firstTabindex.focus();
              firstTabindex.select();
            }
          }
        });
      } catch (err) {
        // TODO: enviar notificación cuando falla al obtener un scan
      }
    });
    _defineProperty(this, "cleanScan", () => {
      this.setState({
        loadedScan: emptyScan,
        loadedStore: emptyStore,
        loadedProduct: emptyProduct,
        loadedBrand: emptyCatalog,
        loadedGroup: emptyGroup,
        loadedUnit: emptyCatalog,
        loadedLine: emptyLine,
        loadedRecentPrice: emptyHistoryData,
        loadedMaxPrice: emptyHistoryData,
        loadedMinPrice: emptyHistoryData,
        loadedMinPricePromotion: emptyHistoryData,
        barcodeErrorMsg: '',
        priceErrorMsg: '',
        productNameErrorMsg: '',
        productTypeErrorMsg: '',
        productBrandErrorMsg: '',
        productLineErrorMsg: '',
        productUnitErrorMsg: '',
        productGroupErrorMsg: '',
        resetLine: false,
        lat: 0,
        lng: 0
      });
    });
    _defineProperty(this, "changeProductHandler", e => {
      const productFilter = e.target.value;
      this.setState({
        productFilter
      }, () => this.filterButtonHandler());
    });
    _defineProperty(this, "changeMissionFilterHandler", e => {
      const missionFilter = e.target.value;
      this.setState({
        missionFilter
      }, () => this.filterButtonHandler());
    });
    _defineProperty(this, "filterButtonHandler", () => {
      this.setState({
        disabledFilterBtn: true,
        nextScanId: null
      }, () => this.getScanList());
    });
    _defineProperty(this, "priceHandler", event => {
      const price = event.target.value;
      const loadedScan = _objectSpread(_objectSpread({}, this.state.loadedScan), {}, {
        price
      });
      this.setState({
        loadedScan
      });
    });
    _defineProperty(this, "addressHandler", e => {
      const address = e.target.value;
      const store = _objectSpread(_objectSpread({}, this.state.loadedStore), {}, {
        address
      });
      this.setState({
        loadedStore: store
      });
    });
    _defineProperty(this, "commentHandler", e => {
      const comments = e.target.value;
      const scan = _objectSpread(_objectSpread({}, this.state.loadedScan), {}, {
        comments
      });
      this.setState({
        loadedScan: scan
      });
    });
    _defineProperty(this, "changeStoreHandler", e => {
      const {
        storeList
      } = this.state;
      const storeId = e.target.value;
      const store = storeList.find(store => store.value === storeId);
      const loadedStore = _objectSpread(_objectSpread({}, this.state.loadedStore), {}, {
        id: parseInt(storeId),
        storeId: parseInt(storeId),
        name: store.label
      });
      this.setState({
        loadedStore
      });
    });
    _defineProperty(this, "productNameHandler", e => {
      const name = e.target.value;
      const product = _objectSpread(_objectSpread({}, this.state.loadedProduct), {}, {
        name
      });
      this.setState({
        loadedProduct: product
      });
    });
    _defineProperty(this, "changeBrandHandler", e => {
      const brandId = e.target.value;
      const brand = _objectSpread(_objectSpread({}, this.state.loadedBrand), {}, {
        id: parseInt(brandId)
      });
      this.setState({
        loadedBrand: brand
      });
    });
    _defineProperty(this, "changeUnitHandler", e => {
      const unitId = e.target.value;
      const unit = _objectSpread(_objectSpread({}, this.state.loadedUnit), {}, {
        id: parseInt(unitId)
      });
      this.setState({
        loadedUnit: unit
      });
    });
    _defineProperty(this, "quantityHandler", e => {
      const quantity = e.target.value;
      const product = _objectSpread(_objectSpread({}, this.state.loadedProduct), {}, {
        quantity
      });
      this.setState({
        loadedProduct: product
      });
    });
    _defineProperty(this, "changeTypeHandler", e => {
      const type = e.target.value;
      const product = _objectSpread(_objectSpread({}, this.state.loadedProduct), {}, {
        type
      });
      this.setState({
        loadedProduct: product
      });
    });
    _defineProperty(this, "specialPriceCheckHandler", () => {
      const scan = _objectSpread(_objectSpread({}, this.state.loadedScan), {}, {
        special_price: !this.state.loadedScan.special_price
      });
      this.setState({
        loadedScan: scan
      });
    });
    _defineProperty(this, "selectProductImageHandler", () => {
      this.setState({
        showModal: true
      });
    });
    _defineProperty(this, "validateScanButtonHandler", () => {
      const {
        loadedStore,
        loadedScan,
        existProduct
      } = this.state;
      const selectedStoreName = loadedStore.name.toLowerCase();
      const storeInput = document.querySelector('.store-input');
      const options = Array.from(storeInput.querySelectorAll('option'));
      const selectedOption = options.find(option => option.selected);
      if (selectedStoreName === 'no store') {
        if (!storeInput.classList.contains('input-error')) {
          storeInput.classList.add('input-error');
        }
      } else {
        storeInput.classList.remove('input-error');
        if (existProduct) {
          this.validateScan();
        } else {
          this.validateScanAndProduct();
        }
      }
    });
    _defineProperty(this, "validateScan", async () => {
      const scanData = this.checkAndDeleteUnusedFields(this.state.loadedScan, true);
      const storeData = this.checkAndDeleteUnusedFiledsForStore(this.state.loadedStore, this.state.loadedStore.location);
      if (this.validateRequiredFieldsForScan(scanData)) {
        try {
          const headers = _objectSpread(_objectSpread({}, Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])()), {}, {
            'content-type': 'multipart/form-data'
          });
          let form_data = new FormData();
          for (let key in scanData) {
            form_data.append(`scan[${key}]`, scanData[key]);
          }
          for (let key in storeData) {
            form_data.append(`store[${key}]`, storeData[key]);
          }
          const response = await _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].post(`api/scan/${this.state.loadedScan.id}`, form_data, {
            headers
          });
          if (response.status === 200) {
            await this.cleanScan();
            await this.getScanList();
          }
        } catch (error) {
          console.error(error);
        }
      }
    });
    _defineProperty(this, "validateScanAndProduct", async () => {
      const scanData = this.checkAndDeleteUnusedFields(this.state.loadedScan, true);
      const productData = this.checkAndDeleteUnusedFieldsForProduct(this.state.loadedProduct, this.state.loadedScan, this.state.loadedBrand, this.state.loadedGroup, this.state.loadedLine, this.state.loadedUnit);
      const storeData = this.checkAndDeleteUnusedFiledsForStore(this.state.loadedStore, this.state.loadedStore.location);
      if (this.validateRequiredFields(scanData, productData)) {
        try {
          const headers = _objectSpread(_objectSpread({}, Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])()), {}, {
            'content-type': 'multipart/form-data'
          });
          let form_data = new FormData();
          for (let key in productData) {
            form_data.append(`product[${key}]`, productData[key]);
          }
          for (let key in scanData) {
            form_data.append(`scan[${key}]`, scanData[key]);
          }
          for (let key in storeData) {
            form_data.append(`store[${key}]`, storeData[key]);
          }
          const response = await _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].post(`api/scan/${this.state.loadedScan.id}`, form_data, {
            headers
          });
          if (response.status === 200) {
            this.cleanScan();
            this.getScanList();
            this.setState(_objectSpread(_objectSpread({}, this.setState), {}, {
              loadedGroup: {
                id: 0,
                name: ""
              }
            }));
          }
        } catch (error) {
          console.error(error);
        }
      }
    });
    _defineProperty(this, "checkAndDeleteUnusedFields", (object, isValid) => {
      const scan = {
        barcode: object.barcode,
        is_valid: isValid,
        price: object.price,
        special_price: object.special_price,
        comments: ''
      };
      if (!object.comments || object.comments.length === 0) {
        delete scan.comments;
      } else {
        scan.comments = object.comments;
      }
      return scan;
    });
    _defineProperty(this, "checkAndDeleteUnusedFieldsForProduct", (object, scan, brand, group, line, unit) => {
      const product = {
        id: object.id,
        name: object.name,
        quantity: object.quantity,
        unit: unit.id,
        group: group.id,
        line: line.id,
        brand: brand.id,
        type: object.type,
        picture_path: object.picture_path instanceof File ? object.picture_path : ''
      };
      return product;
    });
    _defineProperty(this, "checkAndDeleteUnusedFiledsForStore", (object, location) => {
      const store = {
        id: object.id,
        name: object.name,
        address: '',
        lat: location.coordinates[1],
        lng: location.coordinates[0]
      };
      if (!object.address || object.address.length === 0) {
        delete store.address;
      } else {
        store.address = object.address;
      }
      return store;
    });
    _defineProperty(this, "validateRequiredFields", (scan, product) => {
      const locale = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getLocale"])();
      let isValid = true;
      let barcodeErrorMsg = '';
      let priceErrorMsg = '';
      let productNameErrorMsg = '';
      let productTypeErrorMsg = '';
      let productBrandErrorMsg = '';
      let productGroupErrorMsg = '';
      let productUnitErrorMsg = '';
      let productLineErrorMsg = '';
      if (!scan.barcode.trim()) {
        barcodeErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.barcode.error');
        isValid = false;
      }
      const hasValidPrice = Math.ceil(parseFloat(scan.price)) > 0;
      if (!scan.price.trim() || !hasValidPrice) {
        priceErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.price.error');
        isValid = false;
      }
      if (!product.name.trim()) {
        productNameErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.name.error');
        isValid = false;
      }
      if (!product.type.trim() || product.type == '0') {
        productTypeErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.type.error');
        isValid = false;
      }
      if (!product.brand) {
        productBrandErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.brand.error');
        isValid = false;
      }
      if (!product.group) {
        productGroupErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.group.error');
        isValid = false;
      }
      if (!product.unit) {
        productUnitErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.unit.error');
        isValid = false;
      }
      if (!product.line) {
        productLineErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.line.error');
        isValid = false;
      }
      this.setState({
        barcodeErrorMsg,
        priceErrorMsg,
        productNameErrorMsg,
        productTypeErrorMsg,
        productBrandErrorMsg,
        productLineErrorMsg,
        productUnitErrorMsg,
        productGroupErrorMsg
      });
      return isValid;
    });
    _defineProperty(this, "validateRequiredFieldsForScan", scan => {
      const locale = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getLocale"])();
      let isValid = true;
      let barcodeErrorMsg = '';
      let priceErrorMsg = '';
      if (!scan.barcode.trim() || scan.barcode.length === 0) {
        barcodeErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.barcode.error');
        isValid = false;
      }
      const hasValidPrice = Math.ceil(parseFloat(scan.price)) > 0;
      if (!scan.price.trim() || !hasValidPrice) {
        priceErrorMsg = Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.price.error');
        isValid = false;
      }
      this.setState({
        barcodeErrorMsg,
        priceErrorMsg
      });
      return isValid;
    });
    _defineProperty(this, "rejectedButtonHandler", async () => {
      try {
        const response = await _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].get(`api/scan/${this.state.loadedScan.id}/rejected`, {
          headers: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])()
        });
        if (response.status === 201) {
          this.cleanScan();
          this.getScanList();
        }
      } catch (error) {
        // TODO: Mandar mensaje de error.
      }
    });
    _defineProperty(this, "openReject", async () => {
      this.setState({
        showRejectModal: true
      });
    });
    _defineProperty(this, "closeReject", async () => {
      this.setState({
        showRejectModal: false
      });
      this.setState({
        selectedRadio: null
      });
    });
    _defineProperty(this, "onChangeRadio", async e => {
      await this.setState({
        selectedRadio: parseInt(e.currentTarget.value, 10)
      });
      await this.sendCriterion();
    });
    _defineProperty(this, "sendCriterion", async () => {
      const locale = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getLocale"])();
      const endpoint = `/api/criterion/scan/${this.state.loadedScan.id}`;
      const request = {
        id_criterion: this.state.selectedRadio + 1
      };
      const headers = {
        headers: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])()
      };
      _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].post(endpoint, request, headers).then(async () => {
        await this.rejectedButtonHandler();
        await react_nextjs_toast__WEBPACK_IMPORTED_MODULE_21__["toast"].notify(Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.toast.sendCriterion.success.message'), {
          title: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.toast.sendCriterion.success.title'),
          duration: 6,
          type: "success"
        });
        this.closeReject();
      }).catch(() => {
        react_nextjs_toast__WEBPACK_IMPORTED_MODULE_21__["toast"].notify(Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.toast.sendCriterion.error.message'), {
          title: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.toast.sendCriterion.error.title'),
          duration: 6,
          type: "error"
        });
      });
    });
    _defineProperty(this, "selectImage", selectedPicture => {
      if (selectedPicture != null) {
        this.setState({
          selectedPicture,
          showModal: true,
          isImageModal: true
        });
      }
    });
    _defineProperty(this, "changeProductPicture", e => {
      if (e.target.files.length > 0) {
        const photo = e.target.files[0];
        const loadedProduct = _objectSpread(_objectSpread({}, this.state.loadedProduct), {}, {
          picture_path: photo
        });
        this.setState({
          imageVis: URL.createObjectURL(photo),
          loadedProduct
        });
      }
    });
    _defineProperty(this, "handleCloseModal", () => {
      this.setState({
        showModal: false
      });
    });
    _defineProperty(this, "getProductDetail", async productId => {
      try {
        this.setState({
          showLoader: true
        });
        const res = await _utils_api__WEBPACK_IMPORTED_MODULE_13__["default"].get(`api/product/${productId}`, {
          headers: Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getHeader"])()
        });
        const loadedProduct = _objectSpread(_objectSpread({}, res.data.product), {}, {
          picture_path: res.data.product.picture_path ? `${_utils_photo_url__WEBPACK_IMPORTED_MODULE_15__["photoUrl"]}/${res.data.product.picture_path}` : null
        });
        this.setState({
          loadedProduct,
          loadedScan: _objectSpread(_objectSpread({}, this.state.loadedScan), {}, {
            product: _objectSpread({}, loadedProduct)
          }),
          imageVis: res.data.product.picture_path ? `${_utils_photo_url__WEBPACK_IMPORTED_MODULE_15__["photoUrl"]}/${res.data.product.picture_path}` : null,
          showLoader: false,
          loadedUnit: res.data.product.unit,
          loadedGroup: res.data.product.group,
          loadedLine: res.data.product.line,
          loadedBrand: res.data.product.brand
        });
      } catch (err) {
        await this.scanSelectedHandler(this.state.selectedScanId);
      }
    });
    _defineProperty(this, "findScan", async barcode => {
      try {
        const {
          selectedScanId
        } = this.state;
        if (selectedScanId && barcode) {
          await this.scanSelectedHandler(selectedScanId, barcode);
        }
      } catch (error) {
        console.log(error);
      }
    });
    _defineProperty(this, "timeout", null);
    _defineProperty(this, "barcodeHandler", e => {
      const barcode = e.target.value;
      if (!isNaN(barcode)) {
        const loadedScan = _objectSpread(_objectSpread({}, this.state.loadedScan), {}, {
          barcode
        });
        this.setState({
          loadedScan
        });
        clearTimeout(this.timeout);
        this.timeout = setTimeout(async () => {
          try {
            await this.findScan(barcode);
          } catch (error) {
            console.log(error);
          }
        }, 2000);
      }
    });
    _defineProperty(this, "getSuggestions", (value, data) => {
      const inputValue = value.trim().toLowerCase();
      const inputLength = inputValue.length;
      return inputLength === 0 ? data.filter(item => {
        return true;
      }) : data.filter(item => {
        const query = inputValue.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const regexp = new RegExp(query, 'ig');
        const itemExist = item.label.search(regexp) != -1;
        return itemExist;
      });
    });
    _defineProperty(this, "getSuggestionValue", suggestion => {
      return suggestion.label;
    });
    _defineProperty(this, "onSuggestionsClearRequested", () => {
      this.setState({
        groupList: []
      });
    });
    _defineProperty(this, "renderSuggestion", suggestion => {
      return __jsx("div", {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 1440,
          columnNumber: 17
        }
      }, " ", suggestion.label, " ");
    });
    _defineProperty(this, "onSelectGroup", (event, {
      suggestion
    }) => {
      const groupId = suggestion.value;
      let lineId = 0;
      let lineName = '';
      const updateFilterLineList = this.state.lineList.filter(line => Number(groupId) === line.group);
      if (updateFilterLineList.length > 0) {
        lineId = updateFilterLineList[0].value;
        lineName = updateFilterLineList[0].label;
      }
      const group = _objectSpread(_objectSpread({}, this.state.loadedGroup), {}, {
        id: parseInt(groupId)
      });
      const line = _objectSpread(_objectSpread({}, this.state.loadedLine), {}, {
        name: lineName,
        id: lineId,
        id_group: groupId
      });
      this.setState({
        loadedGroup: group,
        lineListFilter: updateFilterLineList,
        loadedLine: line
      });
    });
    _defineProperty(this, "onSelectType", (event, {
      suggestion
    }) => {
      const type = suggestion.value;
      const product = _objectSpread(_objectSpread({}, this.state.loadedProduct), {}, {
        type
      });
      this.setState({
        loadedProduct: product
      });
    });
    _defineProperty(this, "onSelectBrand", (event, {
      suggestion
    }) => {
      const brandId = suggestion.value;
      const brand = _objectSpread(_objectSpread({}, this.state.loadedBrand), {}, {
        id: parseInt(brandId)
      });
      this.setState({
        loadedBrand: brand
      });
    });
    _defineProperty(this, "onSelectUnit", (event, {
      suggestion
    }) => {
      const unitId = suggestion.value;
      const unit = _objectSpread(_objectSpread({}, this.state.loadedUnit), {}, {
        id: parseInt(unitId)
      });
      this.setState({
        loadedUnit: unit
      });
    });
    _defineProperty(this, "onSelectLIne", (event, {
      suggestion
    }) => {
      const lineId = suggestion.value;
      const line = _objectSpread(_objectSpread({}, this.state.loadedLine), {}, {
        id: parseInt(lineId),
        name: suggestion.label,
        id_group: suggestion.group
      });
      this.setState({
        loadedLine: line
      });
    });
    next_router__WEBPACK_IMPORTED_MODULE_1___default.a.events.on('beforeHistoryChange', async url => {
      try {
        const {
          isBeingValidatedByCurrentUser,
          selectedScanId
        } = this.state;
        if (selectedScanId) {
          const isNextUrlHome = url == '/home';
          if (isBeingValidatedByCurrentUser && !isNextUrlHome) {
            await this.updateBeingValidatedStatus('disable', selectedScanId);
          }
        }
      } catch (error) {
        console.error(error);
      }
    });
  }
  async componentDidMount() {
    const isCustom = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["IsCustomTheme"])();
    const hasDarkTheme = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getDarkTheme"])() === '1' ? true : false;
    if (hasDarkTheme) {
      document.querySelector('body').classList.remove('custom');
      document.querySelector('body').classList.add('darkmode');
    }
    if (isCustom) {
      const theme = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getTheme"])();
      const currentTheme = Object(_utils_theme__WEBPACK_IMPORTED_MODULE_23__["buildTheme"])(theme);
      const style = document.createElement('style');
      style.innerHTML = currentTheme;
      document.body.appendChild(style);
      document.querySelector('body').classList.add('custom');
    }
    Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["validateSession"])();
    const groupList = await Object(_utils_catalogs__WEBPACK_IMPORTED_MODULE_14__["getGroupsCatalog"])();
    const missionList = await Object(_utils_catalogs__WEBPACK_IMPORTED_MODULE_14__["getMissionsValidation"])();
    const brandList = await Object(_utils_catalogs__WEBPACK_IMPORTED_MODULE_14__["getBrandsCatalog"])();
    const unitList = await Object(_utils_catalogs__WEBPACK_IMPORTED_MODULE_14__["getUnitsCatalog"])();
    const storeList = await Object(_utils_catalogs__WEBPACK_IMPORTED_MODULE_14__["getStoresCatalog"])();
    const lineList = await Object(_utils_catalogs__WEBPACK_IMPORTED_MODULE_14__["getLinesCatalog"])();
    const lineListFilter = await Object(_utils_catalogs__WEBPACK_IMPORTED_MODULE_14__["getLinesCatalog"])();
    missionList.unshift({
      value: '',
      label: 'Todas'
    });
    this.setState({
      groupList,
      brandList,
      unitList,
      missionList,
      storeList,
      lineList,
      lineListFilter,
      showLoader: true
    });
    await this.getScanList(true);
    document.addEventListener('keydown', this.handleTab);
    document.addEventListener('click', this.handleInputClick);
    window.addEventListener("beforeunload", this.handleWindowClose);
  }
  handleInputClick(event) {
    const {
      target
    } = event;
    if (target.classList.contains('indexed-element')) {
      if (target.select) {
        target.select();
      }
    }
  }
  async componentDidUpdate() {
    const {
      selectedScanId,
      isBeingValidated,
      isBeingValidatedByCurrentUser,
      currentScanWasVerified
    } = this.state;
    if (this.state.selectedScanId) {
      document.addEventListener('keydown', this.handleCommands);
    } else {
      document.removeEventListener('keydown', this.handleCommands);
    }
  }
  handleTab(event) {
    const keyCode = event.which ? event.which : event.keyCode;
    const key = event.code ? event.code : event.key;
    const isTabKey = keyCode === 9 && key === 'Tab';
    if (document && isTabKey) {
      event.preventDefault();
      event.stopPropagation();
      let indexedElements = [];
      indexedElements = document.querySelectorAll('.indexed-element:not([tabindex="-1"])');
      indexedElements = [...indexedElements].sort((a, b) => a.tabIndex - b.tabIndex);
      if (indexedElements.length) {
        const currentElement = event.target;
        const nextElementIndex = currentElement.tabIndex + 1;
        const nextElement = indexedElements.find(element => element.tabIndex === nextElementIndex);
        if (nextElement) {
          nextElement.focus();
          if (nextElement.select) {
            nextElement.select();
          }
        } else {
          if (indexedElements.length && indexedElements[0] && indexedElements[0].select) {
            indexedElements[0].focus();
            indexedElements[0].select();
          }
        }
      }
    }
  }
  render() {
    const {
      scans,
      loadedScan,
      groupList,
      missionList,
      brandList,
      unitList,
      storeList,
      lineListFilter,
      loadedStore,
      loadedProduct,
      loadedMaxPrice,
      loadedMinPricePromotion,
      loadedMinPrice,
      loadedRecentPrice,
      lat,
      lng,
      loadedBrand,
      loadedLine,
      loadedGroup,
      loadedUnit,
      showModal,
      isImageModal,
      selectedScanId,
      showLoader,
      disabledFilterBtn,
      barcodeErrorMsg,
      priceErrorMsg,
      productNameErrorMsg,
      productTypeErrorMsg,
      productBrandErrorMsg,
      productLineErrorMsg,
      productUnitErrorMsg,
      productGroupErrorMsg,
      showRejectModal,
      selectedRadio,
      showMessageNoElements,
      selectedPicture,
      imageVis,
      isBeingValidated,
      isBeingValidatedByCurrentUser,
      resetLine
    } = this.state;
    const locale = Object(_utils_session_management__WEBPACK_IMPORTED_MODULE_3__["getLocale"])();
    brandList.sort((a, b) => a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1);
    unitList.sort((a, b) => a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1);
    const existProduct = loadedScan.product ? true : false;
    const captureDate = Object(_utils_format_date__WEBPACK_IMPORTED_MODULE_17__["default"])(loadedScan.capture_date);
    const fullName = `${loadedScan.scanned_by.first_name} ${loadedScan.scanned_by.last_name}`;
    const recentPriceDate = existProduct && loadedRecentPrice.capture_date.length > 0 ? Object(_utils_format_date__WEBPACK_IMPORTED_MODULE_17__["default"])(loadedRecentPrice.capture_date) : null;
    const maxPriceDate = existProduct && loadedMaxPrice.capture_date.length > 0 ? Object(_utils_format_date__WEBPACK_IMPORTED_MODULE_17__["default"])(loadedMaxPrice.capture_date) : null;
    const minPriceDate = existProduct && loadedMinPrice.capture_date.length > 0 ? Object(_utils_format_date__WEBPACK_IMPORTED_MODULE_17__["default"])(loadedMinPrice.capture_date) : null;
    const minPricePromoDate = existProduct && loadedMinPricePromotion.capture_date.length > 0 ? Object(_utils_format_date__WEBPACK_IMPORTED_MODULE_17__["default"])(loadedMinPricePromotion.capture_date) : null;
    const tabs = existProduct ? tabOrderBlockedProduct : tabOrder;
    const specialAndExist = existProduct && loadedScan.special_price;
    const tabsSpecial = existProduct ? tabOrderBlockedProductSpecial : tabOrderSpecial;
    const loadedGroupName = loadedGroup && loadedGroup.name ? loadedGroup.name : '';
    const loadedBrandName = loadedBrand && loadedBrand.name ? loadedBrand.name : '';
    const loadedProductType = loadedProduct && loadedProduct.type ? loadedProduct.type : '';
    const loadedUnitName = loadedUnit && loadedUnit.name ? loadedUnit.name : '';
    const loadedLineName = loadedLine && loadedLine.name ? loadedLine.name : '';
    const radioMapFirst = [{
      id: 'blurry',
      value: 0,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioMapFirst.blurry'),
      checked: selectedRadio === 0
    }, {
      id: 'farAway',
      value: 1,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioMapFirst.farAway'),
      checked: selectedRadio === 1
    }, {
      id: 'dark',
      value: 2,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioMapFirst.dark'),
      checked: selectedRadio === 2
    }, {
      id: 'incomplete',
      value: 3,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioMapFirst.incomplete'),
      checked: selectedRadio === 3
    }, {
      id: 'doesntMatch',
      value: 4,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioMapFirst.doesntMatch'),
      checked: selectedRadio === 4
    }];
    const radioSecond = [{
      id: 'outsideShop',
      value: 5,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioSecond.outsideShop'),
      checked: selectedRadio === 5
    }, {
      id: 'shopTicket',
      value: 6,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioSecond.shopTicket'),
      checked: selectedRadio === 6
    }, {
      id: 'anotherCell',
      value: 7,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioSecond.anotherCell'),
      checked: selectedRadio === 7
    }, {
      id: 'testScan',
      value: 8,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.radioSecond.testScan'),
      checked: selectedRadio === 8
    }];
    return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx(_components_header__WEBPACK_IMPORTED_MODULE_2__["Header"], {
      locale: locale,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1667,
        columnNumber: 17
      }
    }), __jsx(next_head__WEBPACK_IMPORTED_MODULE_4___default.a, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1669,
        columnNumber: 17
      }
    }, __jsx("title", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1670,
        columnNumber: 21
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.title'))), __jsx(_components_modal_Modal__WEBPACK_IMPORTED_MODULE_16__["default"], {
      noPadding: true,
      containerWidth: "40%",
      showModal: showModal,
      isImageModal: isImageModal,
      closeModal: this.handleCloseModal,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1675,
        columnNumber: 17
      }
    }, __jsx("span", {
      onClick: () => this.handleCloseModal(),
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.modalImageClose,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1681,
        columnNumber: 21
      }
    }, __jsx("img", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.closeButton,
      src: "/img/close-button.svg",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1685,
        columnNumber: 25
      }
    })), __jsx("img", {
      src: selectedPicture,
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.modalImage,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1688,
        columnNumber: 21
      }
    })), __jsx(_components_modal_Modal__WEBPACK_IMPORTED_MODULE_16__["default"], {
      noPadding: false,
      containerWidth: "60%",
      showModal: showRejectModal,
      isImageModal: false,
      closeModal: this.closeReject,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1691,
        columnNumber: 17
      }
    }, __jsx("span", {
      onClick: () => this.closeReject(),
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.modalImageClose,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1697,
        columnNumber: 21
      }
    }, __jsx("img", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.closeButton,
      src: "/img/close-button.svg",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1701,
        columnNumber: 25
      }
    })), __jsx("h3", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1703,
        columnNumber: 21
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.modal.reject.subject')), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.containerRadio,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1706,
        columnNumber: 21
      }
    }, __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.displayRadio,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1707,
        columnNumber: 25
      }
    }, radioMapFirst.map(item => __jsx("div", {
      key: `id-${item.id}-${item.value}`,
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.formContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1710,
        columnNumber: 37
      }
    }, __jsx("input", {
      id: item.id,
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.labelRadio,
      value: item.value,
      checked: item.checked,
      style: {
        padding: '7px'
      },
      name: item.id,
      type: "radio",
      onChange: this.onChangeRadio,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1711,
        columnNumber: 41
      }
    }), __jsx("label", {
      style: {
        padding: '7px'
      },
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.labelRadio,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1720,
        columnNumber: 41
      }
    }, item.label)))), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.displayRadio,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1725,
        columnNumber: 25
      }
    }, radioSecond.map(item => __jsx("div", {
      key: `id-${item.id}-${item.value}`,
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.formContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1728,
        columnNumber: 37
      }
    }, __jsx("input", {
      id: item.id,
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.labelRadio,
      value: item.value,
      checked: item.checked,
      style: {
        padding: '7px'
      },
      name: item.id,
      type: "radio",
      onChange: this.onChangeRadio,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1729,
        columnNumber: 41
      }
    }), __jsx("label", {
      style: {
        padding: '7px'
      },
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.labelRadio,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1738,
        columnNumber: 41
      }
    }, item.label)))))), __jsx(_components_loader_Loader__WEBPACK_IMPORTED_MODULE_18__["default"], {
      show: showLoader,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1745,
        columnNumber: 17
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.container,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1747,
        columnNumber: 17
      }
    }, __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.itemList,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1748,
        columnNumber: 21
      }
    }, __jsx(_components_pageTitle_PageTitle__WEBPACK_IMPORTED_MODULE_20__["default"], {
      title: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.sidebar.title'),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1749,
        columnNumber: 25
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.formContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1751,
        columnNumber: 25
      }
    }, __jsx(_components_select__WEBPACK_IMPORTED_MODULE_6__["Select"], {
      bgColor: "transparent",
      options: missionList,
      onChange: this.changeMissionFilterHandler,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.sidebar.input.mission.label'),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1752,
        columnNumber: 29
      }
    })), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.formContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1760,
        columnNumber: 25
      }
    }, __jsx(_components_select__WEBPACK_IMPORTED_MODULE_6__["Select"], {
      bgColor: "transparent",
      options: this.state.scanFilter,
      onChange: this.changeProductHandler,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.sidebar.input.product.label'),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1761,
        columnNumber: 29
      }
    })), __jsx("hr", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1769,
        columnNumber: 25
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.capturesList,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1771,
        columnNumber: 25
      }
    }, scans.map(scan => __jsx("p", {
      className: `${scan.product.length === 0 ? '' : _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.withProduct}${scan.id === selectedScanId ? ` current-product ${_home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.currentProduct}` : ''}`,
      onClick: () => this.scanSelectedHandler(scan.id),
      key: scan.id,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1773,
        columnNumber: 33
      }
    }, scan.id)))), !showMessageNoElements && __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.productScan,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1785,
        columnNumber: 25
      }
    }, isBeingValidated && !isBeingValidatedByCurrentUser && __jsx("h5", {
      className: "text-danger",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1789,
        columnNumber: 37
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.topBar.beingValidated')), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.scannerDataContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1794,
        columnNumber: 29
      }
    }, __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.element,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1795,
        columnNumber: 33
      }
    }, loadedScan.scanned_by.employee_number ? loadedScan.scanned_by.employee_number : Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.topBar.withoutNumber')), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.elementBold,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1802,
        columnNumber: 33
      }
    }, fullName), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.element,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1806,
        columnNumber: 33
      }
    }, captureDate), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.element,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1810,
        columnNumber: 33
      }
    }, loadedScan.mission ? loadedScan.mission.title : Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.topBar.withoutMission'))), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.dataContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1815,
        columnNumber: 29
      }
    }, __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1816,
        columnNumber: 33
      }
    }, __jsx("div", {
      className: "width50",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1817,
        columnNumber: 37
      }
    }, __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.imageLeft,
      style: {
        backgroundImage: `url("${loadedScan.pictures.length > 0 ? loadedScan.pictures[0].product_picture : ''}")`,
        backgroundPosition: 'center',
        backgroundSize: 'cover',
        cursor: 'pointer'
      },
      onClick: () => this.selectImage(loadedScan.pictures[0].product_picture),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1818,
        columnNumber: 41
      }
    }), __jsx("p", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1829,
        columnNumber: 41
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.productImage.label'))), __jsx("div", {
      className: "width50",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1834,
        columnNumber: 37
      }
    }, __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.imageRight,
      style: {
        backgroundImage: `url("${loadedScan.pictures.length > 0 ? loadedScan.pictures[0].shelf_picture : ''}")`,
        backgroundPosition: 'center',
        backgroundSize: 'cover',
        cursor: 'pointer'
      },
      onClick: () => this.selectImage(loadedScan.pictures[0].shelf_picture),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1835,
        columnNumber: 41
      }
    }), __jsx("p", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.priceText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1846,
        columnNumber: 37
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.priceImage.label')))), __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1852,
        columnNumber: 33
      }
    }, __jsx("div", {
      className: "width30",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1853,
        columnNumber: 37
      }
    }, __jsx(_components_input__WEBPACK_IMPORTED_MODULE_10__["Input"], {
      defaultValue: loadedScan.barcode,
      placeholderColor: "#6d1515",
      type: "text",
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.barcode.label'),
      onChange: this.barcodeHandler,
      errorMessage: barcodeErrorMsg,
      tabindex: loadedScan.special_price ? tabsSpecial.barcode : tabs.barcode,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1854,
        columnNumber: 41
      }
    })), __jsx("div", {
      className: "width30",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1866,
        columnNumber: 37
      }
    }, __jsx(_components_input__WEBPACK_IMPORTED_MODULE_10__["Input"], {
      defaultValue: loadedScan.price,
      type: "text",
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.price.label'),
      onChange: this.priceHandler,
      errorMessage: priceErrorMsg,
      tabindex: tabs.price,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1867,
        columnNumber: 41
      }
    })), __jsx("div", {
      className: "width30",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1878,
        columnNumber: 37
      }
    }, __jsx(_components_checkbox__WEBPACK_IMPORTED_MODULE_11__["Checkbox"], {
      onChange: this.specialPriceCheckHandler,
      checked: loadedScan.special_price,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.promotionPrice.label'),
      tabindex: loadedScan.special_price ? tabsSpecial.special_price : tabs.special_price,
      checkboxClassName: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1879,
        columnNumber: 41
      }
    }), loadedScan.special_price ? __jsx(_components_buttons__WEBPACK_IMPORTED_MODULE_7__["SecondaryButton"], {
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.option.showPicture'),
      tabindex: loadedScan.special_price ? tabsSpecial.viewPicture : tabs.viewPicture,
      className: "indexed-element",
      onClick: () => this.selectImage(loadedScan.pictures[0].promo_picture),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1888,
        columnNumber: 45
      }
    }) : '')), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1899,
        columnNumber: 33
      }
    }), __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1901,
        columnNumber: 33
      }
    }, __jsx("div", {
      className: "width45",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1902,
        columnNumber: 37
      }
    }, __jsx(_components_select__WEBPACK_IMPORTED_MODULE_6__["Select"], {
      defaultOption: loadedStore.storeId,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.store.label'),
      options: storeList,
      onChange: this.changeStoreHandler,
      tabindex: loadedScan.special_price ? tabsSpecial.store : tabs.store,
      className: "store-input indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1903,
        columnNumber: 41
      }
    }))), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1914,
        columnNumber: 33
      }
    }), __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1916,
        columnNumber: 33
      }
    }, __jsx("div", {
      style: {
        marginBottom: '0.5rem'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1917,
        columnNumber: 37
      }
    }, __jsx(_components_buttons__WEBPACK_IMPORTED_MODULE_7__["SecondaryButton"], {
      variant: _components_buttons_SecondaryButton__WEBPACK_IMPORTED_MODULE_9__["SecondaryButtonVariant"].Error,
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.option.reject'),
      tabindex: loadedScan.special_price ? tabsSpecial.reject : tabs.reject,
      onClick: this.openReject,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1918,
        columnNumber: 41
      }
    })), __jsx("div", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1926,
        columnNumber: 37
      }
    }, __jsx(_components_buttons__WEBPACK_IMPORTED_MODULE_7__["PrimaryButton"], {
      label: this.state.existProduct ? Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.option.validate') : Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.option.validateAndAdd'),
      tabindex: loadedScan.special_price ? tabsSpecial.validate : tabs.validate,
      onClick: this.validateScanButtonHandler,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1927,
        columnNumber: 41
      }
    }))), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1935,
        columnNumber: 33
      }
    }), __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1937,
        columnNumber: 33
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1939,
        columnNumber: 33
      }
    }), loadedStore.address && __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1942,
        columnNumber: 37
      }
    }, __jsx("div", {
      className: "width100",
      style: {
        position: 'relative',
        height: '12rem'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1943,
        columnNumber: 41
      }
    }, __jsx(_components_map_Map__WEBPACK_IMPORTED_MODULE_19__["default"], {
      lat: lat,
      lng: lng,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1947,
        columnNumber: 45
      }
    }))), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1951,
        columnNumber: 33
      }
    }), __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1952,
        columnNumber: 33
      }
    }, __jsx("div", {
      className: "width100",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1953,
        columnNumber: 37
      }
    }, __jsx(_components_input__WEBPACK_IMPORTED_MODULE_10__["Input"], {
      defaultValue: loadedStore.address,
      type: "text",
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.address.label'),
      onChange: this.addressHandler,
      tabindex: loadedScan.special_price ? tabsSpecial.address : tabs.address,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1954,
        columnNumber: 41
      }
    })), __jsx("div", {
      className: "width100",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1964,
        columnNumber: 37
      }
    })), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1967,
        columnNumber: 33
      }
    }), __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1969,
        columnNumber: 33
      }
    }, __jsx("div", {
      className: "width100",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1970,
        columnNumber: 37
      }
    }, __jsx(_components_input__WEBPACK_IMPORTED_MODULE_10__["Input"], {
      defaultValue: loadedScan.comments,
      type: "text",
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.scan.input.aditionalComments.label'),
      tabindex: loadedScan.special_price ? tabsSpecial.comments : tabs.comments,
      onChange: this.commentHandler,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1971,
        columnNumber: 41
      }
    }))))), !showMessageNoElements && __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.productData,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1987,
        columnNumber: 25
      }
    }, __jsx("div", {
      className: existProduct ? _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.productDataContainerCompleted : _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.productDataContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1988,
        columnNumber: 29
      }
    }, __jsx("p", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.title,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1990,
        columnNumber: 33
      }
    }, existProduct ? "" : Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.title')), __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1994,
        columnNumber: 33
      }
    }, __jsx("div", {
      className: "width100",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1995,
        columnNumber: 37
      }
    }, __jsx(_components_input__WEBPACK_IMPORTED_MODULE_10__["Input"], {
      defaultValue: loadedProduct.name,
      type: "text",
      isBlack: true,
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.name.label'),
      bgColor: existProduct ? "Black" : "",
      placeholderColor: existProduct ? "#FFF" : "",
      color: existProduct ? "White" : "",
      onChange: this.productNameHandler,
      disabled: existProduct,
      errorMessage: productNameErrorMsg,
      tabindex: loadedScan.special_price ? tabsSpecial.productName : tabs.productName,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1996,
        columnNumber: 41
      }
    })), __jsx("div", {
      className: "width100",
      style: {
        marginTop: '5%'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2012,
        columnNumber: 37
      }
    }, imageVis && __jsx("img", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.image,
      src: imageVis,
      onClick: () => this.selectImage(imageVis),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2014,
        columnNumber: 57
      }
    }), !existProduct && __jsx("div", {
      style: {
        margin: '1em 0em 3em 0em'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2018,
        columnNumber: 45
      }
    }, __jsx(_components_buttons__WEBPACK_IMPORTED_MODULE_7__["SecondaryButton"], {
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.option.changeImage'),
      tabindex: loadedScan.special_price ? tabsSpecial.productImage : tabs.productImage,
      className: "indexed-element",
      onClick: () => {
        this.productRef.click();
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2019,
        columnNumber: 49
      }
    }), __jsx("input", {
      style: {
        display: 'none'
      },
      type: "file",
      onChange: this.changeProductPicture,
      ref: ref => this.productRef = ref,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2026,
        columnNumber: 49
      }
    })))), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2037,
        columnNumber: 33
      }
    }), __jsx("div", {
      className: "row",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2039,
        columnNumber: 33
      }
    }, __jsx("div", {
      className: "width45",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2040,
        columnNumber: 37
      }
    }, __jsx(_components_input__WEBPACK_IMPORTED_MODULE_10__["Input"], {
      defaultValue: existProduct ? loadedProduct.barcode : loadedScan.barcode,
      type: "text",
      isBlack: existProduct,
      placeholderColor: existProduct ? 'White' : '',
      bgColor: existProduct ? 'Black' : '',
      color: existProduct ? 'White' : '',
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.barcode.label'),
      disabled: true,
      onChange: this.barcodeHandler,
      tabindex: loadedScan.special_price ? tabsSpecial.productBarcode : tabs.productBarcode,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2041,
        columnNumber: 41
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2054,
        columnNumber: 41
      }
    }), __jsx(_components_input__WEBPACK_IMPORTED_MODULE_10__["Input"], {
      defaultValue: loadedProduct.quantity,
      isBlack: true,
      type: "text",
      placeholderColor: existProduct ? 'White' : '',
      bgColor: existProduct ? 'Black' : '',
      color: existProduct ? 'White' : '',
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.amount.label'),
      onChange: this.quantityHandler,
      disabled: existProduct,
      tabindex: loadedScan.special_price ? tabsSpecial.productQuantity : tabs.productQuantity,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2056,
        columnNumber: 41
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2070,
        columnNumber: 41
      }
    }), __jsx(_components_autocomplete__WEBPACK_IMPORTED_MODULE_8__["Autocomplete"], {
      getSuggestions: value => this.getSuggestions(value, groupList),
      getSuggestionValue: this.getSuggestionValue,
      renderSuggestion: this.renderSuggestion,
      onSuggestionSelected: this.onSelectGroup,
      tabindex: loadedScan.special_price ? tabsSpecial.productGroup : tabs.productGroup,
      disabled: existProduct,
      useWhiteText: existProduct,
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.group.label'),
      defaultValue: loadedGroupName,
      resetLine: resetLine,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2071,
        columnNumber: 41
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2083,
        columnNumber: 41
      }
    }), __jsx(_components_select__WEBPACK_IMPORTED_MODULE_6__["Select"], {
      defaultOption: loadedProduct.type || '0',
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.type.label'),
      bgColor: existProduct ? 'Black' : '',
      color: existProduct ? 'White' : '#565656',
      placeholderColor: existProduct ? 'White' : '',
      options: this.typeFilter,
      onChange: this.changeTypeHandler,
      isDisabled: existProduct,
      errorMessage: productTypeErrorMsg,
      tabindex: loadedScan.special_price ? tabsSpecial.productType : tabs.productType,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2084,
        columnNumber: 41
      }
    })), __jsx("div", {
      className: "width45",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2100,
        columnNumber: 37
      }
    }, __jsx(_components_select__WEBPACK_IMPORTED_MODULE_6__["Select"], {
      defaultOption: loadedBrand && loadedBrand.id || '0',
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.brand.label'),
      bgColor: existProduct ? 'Black' : '',
      color: existProduct ? 'White' : '#565656',
      placeholderColor: existProduct ? 'White' : '',
      options: brandList,
      onChange: this.changeBrandHandler,
      isDisabled: existProduct,
      errorMessage: productBrandErrorMsg,
      tabindex: loadedScan.special_price ? tabsSpecial.productBrand : tabs.productBrand,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2101,
        columnNumber: 41
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2114,
        columnNumber: 41
      }
    }), __jsx(_components_select__WEBPACK_IMPORTED_MODULE_6__["Select"], {
      defaultOption: loadedUnit.id || '0',
      label: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.unit.label'),
      bgColor: existProduct ? 'Black' : '',
      color: existProduct ? 'White' : '#565656',
      placeholderColor: existProduct ? 'White' : '',
      options: unitList,
      onChange: this.changeUnitHandler,
      isDisabled: existProduct,
      errorMessage: productUnitErrorMsg,
      tabindex: loadedScan.special_price ? tabsSpecial.productUnit : tabs.productUnit,
      className: "indexed-element",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2115,
        columnNumber: 41
      }
    }), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.separator,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2128,
        columnNumber: 41
      }
    }), __jsx(_components_autocomplete__WEBPACK_IMPORTED_MODULE_8__["Autocomplete"], {
      getSuggestions: value => this.getSuggestions(value, lineListFilter),
      getSuggestionValue: this.getSuggestionValue,
      renderSuggestion: this.renderSuggestion,
      onSuggestionSelected: this.onSelectLIne,
      tabindex: loadedScan.special_price ? tabsSpecial.productLine : tabs.productLine,
      disabled: existProduct,
      useWhiteText: existProduct,
      placeholder: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.product.input.line.label'),
      defaultValue: loadedLineName,
      resetLine: resetLine,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2130,
        columnNumber: 41
      }
    })))), __jsx("p", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.title,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2146,
        columnNumber: 29
      }
    }, "Historial"), __jsx("div", {
      className: `${_home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.historyContainer} ${existProduct ? 'productHistoryContainer' : ''}`,
      style: existProduct ? {
        backgroundColor: 'black'
      } : {
        backgroundColor: 'white'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2148,
        columnNumber: 29
      }
    }, __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.squareContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2152,
        columnNumber: 33
      }
    }, __jsx(_components_square_Square__WEBPACK_IMPORTED_MODULE_12__["default"], {
      date: recentPriceDate,
      title: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.history.recent'),
      value: existProduct && loadedRecentPrice.price !== 0 ? loadedRecentPrice.price : null,
      bgColor: existProduct && loadedRecentPrice.price !== 0 ? '#3f4d5e' : '',
      color: existProduct && loadedRecentPrice.price !== 0 ? 'white' : '',
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2153,
        columnNumber: 37
      }
    })), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.squareContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2162,
        columnNumber: 33
      }
    }, __jsx(_components_square_Square__WEBPACK_IMPORTED_MODULE_12__["default"], {
      date: maxPriceDate,
      title: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.history.mostExpensive'),
      value: existProduct && loadedMaxPrice.price !== 0 ? loadedMaxPrice.price : null,
      bgColor: existProduct && loadedMaxPrice.price !== 0 ? '#f55d5d' : '',
      color: existProduct && loadedMaxPrice.price !== 0 ? 'white' : '',
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2163,
        columnNumber: 37
      }
    })), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.squareContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2172,
        columnNumber: 33
      }
    }, __jsx(_components_square_Square__WEBPACK_IMPORTED_MODULE_12__["default"], {
      date: minPriceDate,
      title: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.history.cheapest'),
      value: existProduct && loadedMinPrice.price !== 0 ? loadedMinPrice.price : null,
      bgColor: existProduct && loadedMinPrice.price !== 0 ? '#71a4e4' : '',
      color: existProduct && loadedMinPrice.price !== 0 ? 'white' : '',
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2173,
        columnNumber: 37
      }
    })), __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.squareContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2182,
        columnNumber: 33
      }
    }, __jsx(_components_square_Square__WEBPACK_IMPORTED_MODULE_12__["default"], {
      date: minPricePromoDate,
      title: Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.history.cheapestWithPromotion'),
      value: existProduct && loadedMinPricePromotion.price !== 0 ? loadedMinPricePromotion.price : null,
      bgColor: existProduct && loadedMinPricePromotion.price !== 0 ? '#48a858' : '',
      color: existProduct && loadedMinPricePromotion.price !== 0 ? 'white' : '',
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2183,
        columnNumber: 37
      }
    })))), showMessageNoElements && __jsx("div", {
      className: _home_module_scss__WEBPACK_IMPORTED_MODULE_5___default.a.messageNoElementsContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2196,
        columnNumber: 25
      }
    }, __jsx("h2", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2197,
        columnNumber: 29
      }
    }, Object(_i18n__WEBPACK_IMPORTED_MODULE_22__["getI18nLabel"])(locale, 'home.welcome')))), __jsx(react_nextjs_toast__WEBPACK_IMPORTED_MODULE_21__["ToastContainer"], {
      align: "left",
      position: "bottom",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 2201,
        columnNumber: 17
      }
    }));
  }
}
const withRouter = props => {
  const router = Object(next_router__WEBPACK_IMPORTED_MODULE_1__["useRouter"])();
  return __jsx(HomePage, _extends({}, props, {
    router: router,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 2209,
      columnNumber: 12
    }
  }));
};
/* harmony default export */ __webpack_exports__["default"] = (withRouter);

/***/ }),

/***/ "./utils/api.ts":
/*!**********************!*\
  !*** ./utils/api.ts ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _baseUrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseUrl */ "./utils/baseUrl.ts");


/* harmony default export */ __webpack_exports__["default"] = (axios__WEBPACK_IMPORTED_MODULE_0___default.a.create({
  baseURL: _baseUrl__WEBPACK_IMPORTED_MODULE_1__["baseURL"],
  withCredentials: false
  //timeout: 1000
}));

/***/ }),

/***/ "./utils/baseUrl.ts":
/*!**************************!*\
  !*** ./utils/baseUrl.ts ***!
  \**************************/
/*! exports provided: baseURL, baseURLGeoref, georefApiKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "baseURL", function() { return baseURL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "baseURLGeoref", function() { return baseURLGeoref; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "georefApiKey", function() { return georefApiKey; });
const baseURL = "http://192.200.2.169:8000";
const baseURLGeoref = "https://pricecheck-location-api-dev.yema.mx/";
const georefApiKey = "8870826a-ebca-4866-8c52-9f962b50de09";

/***/ }),

/***/ "./utils/catalogs.ts":
/*!***************************!*\
  !*** ./utils/catalogs.ts ***!
  \***************************/
/*! exports provided: getRolesCatalog, getRegionsCatalog, getLabelsCatalog, getGroupsCatalog, getMissionsCatalog, getMissionsValidation, getUnitsCatalog, getBrandsCatalog, getStoresCatalog, getLinesCatalog, getMissionsCatalogByMission, getGeolocationCatalog, getRegionsLabelCatalog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRolesCatalog", function() { return getRolesCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRegionsCatalog", function() { return getRegionsCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLabelsCatalog", function() { return getLabelsCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGroupsCatalog", function() { return getGroupsCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMissionsCatalog", function() { return getMissionsCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMissionsValidation", function() { return getMissionsValidation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnitsCatalog", function() { return getUnitsCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBrandsCatalog", function() { return getBrandsCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStoresCatalog", function() { return getStoresCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLinesCatalog", function() { return getLinesCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMissionsCatalogByMission", function() { return getMissionsCatalogByMission; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGeolocationCatalog", function() { return getGeolocationCatalog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRegionsLabelCatalog", function() { return getRegionsLabelCatalog; });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./utils/api.ts");
/* harmony import */ var _session_management__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session-management */ "./utils/session-management.ts");
/* harmony import */ var _baseUrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseUrl */ "./utils/baseUrl.ts");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



const getRolesCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/roles', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return res.data.data.map(rol => {
    return {
      value: rol.name,
      label: rol.name
    };
  });
};
const getRegionsCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/regions', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return res.data.data.map(region => {
    return {
      value: region.id,
      label: region.name
    };
  });
};
const getRegionsLabelCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/regions', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return res.data.data.map(region => {
    return {
      value: region.name,
      label: region.name
    };
  });
};
const getLabelsCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/labels', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return res.data.data.map(label => {
    return {
      value: label.id,
      label: label.name
    };
  });
};
const getGroupsCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/groups/list', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return res.data.group.map(group => {
    return {
      value: group.id,
      label: group.name
    };
  });
};
const getMissionsCatalog = async () => {
  const data = {
    textSearch: ''
  };
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].post('api/missions/list', data, {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return Object.keys(res.data).map(missionKey => {
    return {
      value: missionKey,
      label: res.data[missionKey]
    };
  });
};
const getMissionsValidation = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/missions/list-validation', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return Object.keys(res.data).map(missionKey => {
    return {
      value: missionKey,
      label: res.data[missionKey]
    };
  });
};
const getMissionsCatalogByMission = async mission => {
  const data = {
    textSearch: mission
  };
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].post('api/missions/list', data, {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return Object.keys(res.data).map(missionKey => {
    return {
      value: missionKey,
      label: res.data[missionKey]
    };
  });
};
const getUnitsCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/units/list', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return Object.keys(res.data.data).map(unitKey => {
    return {
      value: unitKey,
      label: res.data.data[unitKey]
    };
  });
};
const getBrandsCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/brands/list', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return Object.keys(res.data.data).map(brandKey => {
    return {
      value: brandKey,
      label: res.data.data[brandKey]
    };
  });
};
const getStoresCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/store/list', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  const stores = Object.keys(res.data).map(storeKey => {
    return {
      value: storeKey,
      label: res.data[storeKey]
    };
  });
  stores.sort((a, b) => {
    if (a.label.toLowerCase() < b.label.toLowerCase()) {
      return -1;
    }
    if (a.label.toLowerCase() > b.label.toLowerCase()) {
      return 1;
    }
    return 0;
  });
  return stores;
};
const getLinesCatalog = async () => {
  const res = await _api__WEBPACK_IMPORTED_MODULE_0__["default"].get('api/lines/list', {
    headers: Object(_session_management__WEBPACK_IMPORTED_MODULE_1__["getHeader"])()
  });
  return res.data.lines.map(line => {
    return {
      value: line.id,
      label: line.name,
      group: line.id_group
    };
  });
};
const getGeolocationCatalog = async () => {
  var _response$data;
  const response = await Object(_api__WEBPACK_IMPORTED_MODULE_0__["default"])({
    url: "api/places",
    baseURL: _baseUrl__WEBPACK_IMPORTED_MODULE_2__["baseURLGeoref"],
    headers: {
      Authorization: `Api-Key ${_baseUrl__WEBPACK_IMPORTED_MODULE_2__["georefApiKey"]}`
    }
  });
  let transformGeolocation = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data;
  transformGeolocation = transformGeolocation.map(geolocation => {
    return _objectSpread(_objectSpread({}, geolocation), {}, {
      value: geolocation.id,
      label: geolocation.name
    });
  });
  return transformGeolocation;
};


/***/ }),

/***/ "./utils/format-date.ts":
/*!******************************!*\
  !*** ./utils/format-date.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return formatDate; });
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! date-fns */ "date-fns");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(date_fns__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! date-fns/locale */ "date-fns/locale");
/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(date_fns_locale__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _session_management__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./session-management */ "./utils/session-management.ts");



function formatDate(dateStr) {
  if (!dateStr || dateStr.trim() === '-') {
    return null;
  }
  let locale = Object(_session_management__WEBPACK_IMPORTED_MODULE_2__["getLocale"])();
  locale = locale === 'en' ? 'enUS' : locale;
  const parsedShort = Object(date_fns__WEBPACK_IMPORTED_MODULE_0__["parse"])(dateStr, 'dd/MMM/yyyy', new Date());
  if (Object(date_fns__WEBPACK_IMPORTED_MODULE_0__["isDate"])(parsedShort) && Object(date_fns__WEBPACK_IMPORTED_MODULE_0__["isValid"])(parsedShort)) {
    return Object(date_fns__WEBPACK_IMPORTED_MODULE_0__["format"])(parsedShort, 'dd/MMMM/yyyy', {
      locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_1__[locale]
    });
  }
  const parsedLong = Object(date_fns__WEBPACK_IMPORTED_MODULE_0__["parse"])(dateStr, 'yyyy-MM-dd HH:mm:ss', new Date());
  if (Object(date_fns__WEBPACK_IMPORTED_MODULE_0__["isDate"])(parsedLong) && Object(date_fns__WEBPACK_IMPORTED_MODULE_0__["isValid"])(parsedLong)) {
    return Object(date_fns__WEBPACK_IMPORTED_MODULE_0__["format"])(parsedLong, 'dd/MMMM/yyyy', {
      locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_1__[locale]
    });
  }
  return null;
}

/***/ }),

/***/ "./utils/photo_url.ts":
/*!****************************!*\
  !*** ./utils/photo_url.ts ***!
  \****************************/
/*! exports provided: photoUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "photoUrl", function() { return photoUrl; });
const photoUrl = 'https://lampt3bdiag.blob.core.windows.net/pricecheckv2';

/***/ }),

/***/ "./utils/session-management.ts":
/*!*************************************!*\
  !*** ./utils/session-management.ts ***!
  \*************************************/
/*! exports provided: getLogo, IsCustomTheme, createSession, deleteSession, getToken, getName, getProfilePicture, getRoles, validateSession, getHeader, getId, getDarkTheme, getLocale, validateIsAnalyst, getTheme, validateIsAdmin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLogo", function() { return getLogo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsCustomTheme", function() { return IsCustomTheme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSession", function() { return createSession; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteSession", function() { return deleteSession; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getToken", function() { return getToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getName", function() { return getName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getProfilePicture", function() { return getProfilePicture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRoles", function() { return getRoles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateSession", function() { return validateSession; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHeader", function() { return getHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getId", function() { return getId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDarkTheme", function() { return getDarkTheme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocale", function() { return getLocale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateIsAnalyst", function() { return validateIsAnalyst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTheme", function() { return getTheme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateIsAdmin", function() { return validateIsAdmin; });
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_0__);

const createSession = (token, name, rol, profilePictre, id, dark_theme, theme, logo, locale) => {
  localStorage.setItem('token', token);
  localStorage.setItem('name', name);
  localStorage.setItem('rol', rol.join('|'));
  localStorage.setItem('id', id);
  localStorage.setItem('dark_theme', dark_theme.toString());
  localStorage.setItem('locale', locale);
  if (theme !== null || !theme) {
    localStorage.setItem('theme', JSON.stringify(theme));
  } else {
    localStorage.setItem('theme', JSON.stringify({}));
  }
  if (profilePictre && profilePictre.length > 0) {
    localStorage.setItem('profilePicture', `https://cdn-pricecheck.sfo2.digitaloceanspaces.com/${profilePictre}`);
  }
  if (logo && logo.length > 0) {
    localStorage.setItem('logo', `https://lampt3bdiag.blob.core.windows.net/pricecheckv2/${logo}`);
  } else {
    localStorage.setItem('logo', `/img/logo.png`);
  }
};
const deleteSession = () => {
  localStorage.removeItem('locale');
  localStorage.removeItem('dark_theme');
  localStorage.removeItem('token');
  localStorage.removeItem('name');
  localStorage.removeItem('rol');
  localStorage.setItem('logo', `/img/logo.png`);
  localStorage.removeItem('profilePicture');
  localStorage.removeItem('theme');
};
const getToken = () => localStorage.getItem('token');
const getName = () => localStorage.getItem('name');
const getId = () => localStorage.getItem('id');
const getDarkTheme = () => localStorage.getItem('dark_theme');
const getLocale = () => {
  const isBrowser = () => false;
  const hasLocale = () => localStorage.getItem('locale') || false;
  let locale = 'es';
  if (isBrowser() && hasLocale()) {
    locale = localStorage.getItem('locale') || locale;
  }
  return locale;
};
const getProfilePicture = () => localStorage.getItem('profilePicture');
const getRoles = () => {
  const roles = localStorage.getItem('rol');
  if (roles) return roles.split('|');
  return null;
};
const validateSession = newRoute => {
  if (!localStorage.getItem('token')) {
    next_router__WEBPACK_IMPORTED_MODULE_0___default.a.push('/login');
  } else if (newRoute) {
    next_router__WEBPACK_IMPORTED_MODULE_0___default.a.push(newRoute);
  }
};
const getHeader = () => {
  const token = localStorage.getItem('token');
  return {
    Authorization: `Bearer ${token}`
  };
};
const validateIsAnalyst = () => {
  let role = '';
  if (false) {}
  const validation = role === 'Analista';
  return validation;
};
const validateIsAdmin = () => {
  let role = '';
  if (false) {}
  return role === 'Admin';
};
const getLogo = () => {
  let logo = "/img/logo.png";
  if (false) {}
  return logo;
};
const IsCustomTheme = () => {
  let isCustom = false;
  let theme = "";
  let objTheme = {};
  if (false) {}
  return isCustom;
};
const getTheme = () => {
  let theme = "";
  let objTheme = {};
  if (false) {}
  return objTheme;
};


/***/ }),

/***/ "./utils/theme.ts":
/*!************************!*\
  !*** ./utils/theme.ts ***!
  \************************/
/*! exports provided: buildTheme */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildTheme", function() { return buildTheme; });
const LightenDarkenColor = (col, amt) => {
  let usePound = false;
  if (col[0] == "#") {
    col = col.slice(1);
    usePound = true;
  }
  let num = parseInt(col, 16);
  let r = (num >> 16) + amt;
  if (r > 255) r = 255;else if (r < 0) r = 0;
  let b = (num >> 8 & 0x00FF) + amt;
  if (b > 255) b = 255;else if (b < 0) b = 0;
  let g = (num & 0x0000FF) + amt;
  if (g > 255) g = 255;else if (g < 0) g = 0;
  return (usePound ? "#" : "") + (g | b << 8 | r << 16).toString(16);
};
const buildTheme = theme => {
  if (theme && Object.keys(theme).length !== 0) {
    const lighten = (theme === null || theme === void 0 ? void 0 : theme.wallpaper) && `${LightenDarkenColor(theme.wallpaper, 20)} !important`;
    const darken = (theme === null || theme === void 0 ? void 0 : theme.wallpaper) && `${LightenDarkenColor(theme.wallpaper, -20)} !important`;
    const fontDarken = (theme === null || theme === void 0 ? void 0 : theme.text) && `${LightenDarkenColor(theme.text, -20)} !important`;
    const fontLighter = (theme === null || theme === void 0 ? void 0 : theme.text) && `${LightenDarkenColor(theme.text, 60)} !important`;
    return `
        .custom {
            --bgColor: ${theme.wallpaper};
            --font: ${theme.font};
            --textColor: ${theme.text};
            --bgBtnPrimary: ${theme.primary_button};
            --bgBtnSecondary: ${theme.secondary_button};
            --btnPrimaryText: ${theme.primary_text};
            --btnSecondaryText: ${theme.secondary_text};
    
            color: var(--textColor) !important;
            font-family: var(--font) !important;
            background-color: var(--bgColor) !important;
       }
        .custom-font, .custom-block-woodsmoke, .custom [class^='home_messageNoElementsContainer'], .custom [class^='header_header'], .custom [class^='header_optionsList'], .custom [class^='header_leftContainer'], .custom [class^='header_dropdown'], .custom [class^='advanced-search_container'], .custom [class^="input_input"], .custom [class^="advanced-search_inputSearch"], .custom [class^='modal_modal_'], .custom [class^="select_select"], .custom [class^="react-datepicker-popper"], .custom [class^="home_dataContainer"], .custom [class^="home_historyContainer"], .custom [class^="home_productDataContainerCompleted"], .custom [class^="home_productDataContainer"], .custom [class^="home_scannerDataContainer"], .custom [class^="modal_dialogModal"], .custom [class^="productDetails_price"], .custom [class^="productCompareDetails_graphContainer"], .custom [class^="productDetails_graphContainer"], .custom [class^="detailsContainer_details"], .custom [class^="react-datepicker-popper"] .react-datepicker__header, .custom [class^="react-datepicker-popper"] .react-datepicker, .custom-font *, .custom-block-woodsmoke *, .custom [class^='home_messageNoElementsContainer'] *, .custom [class^='header_header'] *, .custom [class^='header_optionsList'] *, .custom [class^='header_leftContainer'] *, .custom [class^='header_dropdown'] *, .custom [class^='advanced-search_container'] *, .custom [class^="input_input"] *, .custom [class^="advanced-search_inputSearch"] *, .custom [class^='modal_modal_'] *, .custom [class^="select_select"] *, .custom [class^="react-datepicker-popper"] *, .custom [class^="home_dataContainer"] *, .custom [class^="home_historyContainer"] *, .custom [class^="home_productDataContainerCompleted"] *, .custom [class^="home_productDataContainer"] *, .custom [class^="home_scannerDataContainer"] *, .custom [class^="modal_dialogModal"] *, .custom [class^="productDetails_price"] *, .custom [class^="productCompareDetails_graphContainer"] *, .custom [class^="productDetails_graphContainer"] *, .custom [class^="detailsContainer_details"] *, .custom [class^="react-datepicker-popper"] .react-datepicker__header *, .custom [class^="react-datepicker-popper"] .react-datepicker * {
            color: var(--textColor) !important;
       }
        .custom-block-woodsmoke, .custom [class^='home_messageNoElementsContainer'], .custom [class^='header_header'], .custom [class^='header_optionsList'], .custom [class^='header_leftContainer'], .custom [class^='header_dropdown'], .custom [class^='advanced-search_container'], .custom [class^="input_input"], .custom [class^="advanced-search_inputSearch"], .custom [class^='modal_modal_'], .custom [class^="select_select"], .custom [class^="react-datepicker-popper"], .custom [class^="home_dataContainer"], .custom [class^="home_historyContainer"], .custom [class^="home_productDataContainerCompleted"], .custom [class^="home_productDataContainer"], .custom [class^="home_scannerDataContainer"], .custom [class^="modal_dialogModal"], .custom [class^="productDetails_price"], .custom [class^="productCompareDetails_graphContainer"], .custom [class^="productDetails_graphContainer"], .custom [class^="detailsContainer_details"], .custom [class^="react-datepicker-popper"] .react-datepicker__header, .custom [class^="react-datepicker-popper"] .react-datepicker {
            background: var(--bgColor)!important;
       }
        .custom-link, .custom a, .custom [class^='home_messageNoElementsContainer'], .custom [class^='header_header'], .custom [class^='header_optionsList'], .custom [class^='header_leftContainer'], .custom [class^='header_dropdown'], .custom [class^='advanced-search_container'], .custom [class^="input_input"], .custom [class^="advanced-search_inputSearch"], .custom [class^='modal_modal_'], .custom [class^="select_select"], .custom [class^="react-datepicker-popper"], .custom [class^='home_messageNoElementsContainer'] a, .custom [class^='header_header'] a, .custom [class^='header_optionsList'] a, .custom [class^='header_leftContainer'] a, .custom [class^='header_dropdown'] a, .custom [class^='advanced-search_container'] a, .custom [class^="input_input"] a, .custom [class^="advanced-search_inputSearch"] a, .custom [class^='modal_modal_'] a, .custom [class^="select_select"] a, .custom [class^="react-datepicker-popper"] a {
            color: ${fontLighter};
       }
        .custom-link:hover, .custom a:hover, .custom [class^='home_messageNoElementsContainer']:hover, .custom [class^='header_header']:hover, .custom [class^='header_optionsList']:hover, .custom [class^='header_leftContainer']:hover, .custom [class^='header_dropdown']:hover, .custom [class^='advanced-search_container']:hover, .custom [class^="input_input"]:hover, .custom [class^="advanced-search_inputSearch"]:hover, .custom [class^='modal_modal_']:hover, .custom [class^="select_select"]:hover, .custom [class^="react-datepicker-popper"]:hover, .custom [class^='home_messageNoElementsContainer'] a:hover, .custom [class^='header_header'] a:hover, .custom [class^='header_optionsList'] a:hover, .custom [class^='header_leftContainer'] a:hover, .custom [class^='header_dropdown'] a:hover, .custom [class^='advanced-search_container'] a:hover, .custom [class^="input_input"] a:hover, .custom [class^="advanced-search_inputSearch"] a:hover, .custom [class^='modal_modal_'] a:hover, .custom [class^="select_select"] a:hover, .custom [class^="react-datepicker-popper"] a:hover {
            color: ${fontLighter};
       }
        .custom [class^="home_historyContainer"]:not(.productHistoryContainer) [class^="square_square"] {
            color: var(--textColor) !important;
            background: var(--bgColor) !important;
       }
        .custom [class^='optionList_tabBar'] [class^='optionList_selected'] {
            background: var(--bgColor) !important;
       }
        .custom [class^='optionList_tabBar'] li {
            background: var(--bgColor) !important;
       }
        .custom .table, .custom [class^='table_tableComplex'] {
            background: ${lighten};
            color: ${fontDarken};
            box-shadow: 0px 10px 10px -6px black;
            
       }
        .custom .table th, .custom [class^='table_tableComplex'] th {
            background: ${darken};

       }
        .custom .table tr:nth-child(odd), .custom [class^='table_tableComplex'] tr:nth-child(odd) {
            background: ${lighten};
       }
        .custom [class^="modal_dialogModalContainer"], .custom [class^="modal_modalContainer"] {
            background: ${lighten};
       }
        .custom [class^="input_blackInput"] {
            color: var(--btnPrimaryText) !important;
            background: var(--bgBtnPrimary) !important;
       }
        .custom [class^="button_primaryButton__27mbY"] {
            color: var(--btnPrimaryText) !important;
            background: var(--bgBtnPrimary) !important;
            text-align: center;
            text-transform: uppercase;
            font-weight: bold;
            padding: 0.5em;
            width: 100%;
            border: 2px solid var(--bgBtnPrimary) !important;
            border-radius: 0.5rem;
       }
       .custom [class^="button_secondaryButton__1N1vM"] {
            color: var(--btnSecondaryText) !important;
            background: var(--bgBtnSecondary) !important;
            text-align: center;
            text-transform: uppercase;
            font-weight: bold;
            padding: 0.5em;
            width: 100%;
            border: 2px solid ;
            border-radius: 0.5rem;
        }
        .custom [class^="home_capturesList"] p {
            color: var(--textColor) !important;
       }
        .custom [class^="home_capturesList"] p[class^="home_withProduct"] {
            color: var(--btnSecondaryText) !important;
       }
        .custom [class^="react-datepicker-popper"] .react-datepicker__day--keyboard-selected {
            background: #de3c26 !important;
       }
        .custom [class^="react-datepicker-popper"] .react-datepicker__day:hover {
            background: #1f2223 !important;
       }
       .custom [class^="home_messageNoElementsContainer__1q9IW"] {
            background: var(--bgBtnPrimary) !important;
            color: var(--btnPrimaryText) !important;
        }
        .custom [class^="btn-theme"] {
            background: var(--bgBtnPrimary) !important;
            color: var(--btnPrimaryText) !important;
        }
        .custom [class^="btn"] {
            background: var(--bgBtnPrimary) !important;
            color: var(--btnPrimaryText) !important;
        }
        .custom [class^="input_errorMessage__16yxH"] {
            color: red !important;
        }
        .current-product {
            background: var(--bgBtnPrimary) !important;
        }

        .custom .react-autosuggest__input::placeholder {  
            color: ${fontLighter};
        }
        .custom .react-autosuggest__input {
            min-width: 100%;
            width: 100%;
            height: 30px;
            font-family: "Catamaran", sans-serif;
            font-weight: 300;
            font-size: 0.9em;
            border: none;
            color: ${fontLighter};
            border-bottom: 1px solid #565656;
            border-radius: 0;
            -webkit-appearance: none;
            background-color: transparent;
          }
          .product-report_divContent__2U1XK {
            background: var(--bgBtnPrimary) !important;
          }
          .card_text-border__aIQRZ {
            color: var(--textColor) !important;
            font-weight: bold !important;
          }
          .card_border-product__3pKKS {
            color: var(--textColor) !important;
          }
          .product-report_tags__OG2vn {
            border: 2px solid ${fontLighter};
          }
          .product-report_btnToggle__1IR7O {
            color: var(--textColor) !important; 
          }
    `;
  }
  return "";
};

/***/ }),

/***/ "@fortawesome/free-solid-svg-icons":
/*!****************************************************!*\
  !*** external "@fortawesome/free-solid-svg-icons" ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@fortawesome/free-solid-svg-icons");

/***/ }),

/***/ "@fortawesome/react-fontawesome":
/*!*************************************************!*\
  !*** external "@fortawesome/react-fontawesome" ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@fortawesome/react-fontawesome");

/***/ }),

/***/ "@react-google-maps/api":
/*!*****************************************!*\
  !*** external "@react-google-maps/api" ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@react-google-maps/api");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("axios");

/***/ }),

/***/ "date-fns":
/*!***************************!*\
  !*** external "date-fns" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("date-fns");

/***/ }),

/***/ "date-fns/locale":
/*!**********************************!*\
  !*** external "date-fns/locale" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("date-fns/locale");

/***/ }),

/***/ "lodash.get":
/*!*****************************!*\
  !*** external "lodash.get" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("lodash.get");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/head");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/router");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ "react-autosuggest":
/*!************************************!*\
  !*** external "react-autosuggest" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-autosuggest");

/***/ }),

/***/ "react-is":
/*!***************************!*\
  !*** external "react-is" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-is");

/***/ }),

/***/ "react-nextjs-toast":
/*!*************************************!*\
  !*** external "react-nextjs-toast" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-nextjs-toast");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibmV4dC9kaXN0L25leHQtc2VydmVyL2xpYi9yb3V0ZXItY29udGV4dC5qc1wiIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYXV0b2NvbXBsZXRlL0F1dG9jb21wbGV0ZS50c3giLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9hdXRvY29tcGxldGUvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYmFja2Ryb3AvQmFja2Ryb3AudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYmFja2Ryb3AvYmFja2Ryb3AubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9idXR0b25zL1ByaW1hcnlCdXR0b24udHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYnV0dG9ucy9TZWNvbmRhcnlCdXR0b24udHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvYnV0dG9ucy9idXR0b24ubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9idXR0b25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvY2hlY2tib3gvQ2hlY2tib3gudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvY2hlY2tib3gvY2hlY2tib3gubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9jaGVja2JveC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2hlYWRlci9IZWFkZXIudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2hlYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2lucHV0L0ZpbGUudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvaW5wdXQvSW5wdXQudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvaW5wdXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9pbnB1dC9pbnB1dC5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2xvYWRlci9Mb2FkZXIudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbG9hZGVyL2xvYWRlci5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL21hcC9NYXAudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbW9kYWwvTW9kYWwudHN4Iiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbW9kYWwvbW9kYWwubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9wYWdlVGl0bGUvUGFnZVRpdGxlLnRzeCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3BhZ2VUaXRsZS9wYWdlVGl0bGUubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zZWxlY3QvU2VsZWN0LnRzeCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NlbGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zcXVhcmUvU3F1YXJlLnRzeCIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NxdWFyZS9zcXVhcmUubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lbi9hZHZhbmNlZC1zZWFyY2gudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lbi9icmFuZHMtY2F0YWxvZy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL2NhcHR1cmUudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lbi9jYXB0dXJlcy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL2NhdGFsb2dzLnRzIiwid2VicGFjazovLy8uL2kxOG4vZW4vY2hhaW5zLWNhdGFsb2cudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lbi9ncmFwaC10YWItY29tcGFyZS50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL2dyYXBoLXRhYi50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL2dyb3Vwcy1jYXRhbG9nLnRzIiwid2VicGFjazovLy8uL2kxOG4vZW4vaG9tZS50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL2luZGV4LnRzIiwid2VicGFjazovLy8uL2kxOG4vZW4vbGluZXMtY2F0YWxvZy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL21pc3Npb25zLnRzIiwid2VicGFjazovLy8uL2kxOG4vZW4vbmF2YmFyLnRzIiwid2VicGFjazovLy8uL2kxOG4vZW4vcHJvZHVjdC1yZXBvcnQudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lbi9wcm9kdWN0LXRhYi50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL3Byb2R1Y3QudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lbi9wcm9kdWN0cy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL3Byb2ZpbGUudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lbi9yYW5raW5ncy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL3JlZ2lvbnMtY2F0YWxvZy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL3NjYW5uZXJzLXRhYi50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL3NjYW5zLXJlcG9ydC50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL3RhYmxlLXRhYi50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL3RhYmxlLnRzIiwid2VicGFjazovLy8uL2kxOG4vZW4vdW5pdHMtY2F0YWxvZy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VuL3VzZXJzLWNhdGFsb2cudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lbi92YWxpZGF0b3JzLXRhYi50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL2FkdmFuY2VkLXNlYXJjaC50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL2JyYW5kcy1jYXRhbG9nLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvY2FwdHVyZS50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL2NhcHR1cmVzLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvY2F0YWxvZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lcy9jaGFpbnMtY2F0YWxvZy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL2dyYXBoLXRhYi1jb21wYXJlLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvZ3JhcGgtdGFiLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvZ3JvdXBzLWNhdGFsb2cudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lcy9ob21lLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lcy9saW5lcy1jYXRhbG9nLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvbWlzc2lvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lcy9uYXZiYXIudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lcy9wcm9kdWN0LXJlcG9ydC50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL3Byb2R1Y3QtdGFiLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvcHJvZHVjdC50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL3Byb2R1Y3RzLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvcHJvZmlsZS50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL3JhbmtpbmdzLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvcmVnaW9ucy1jYXRhbG9nLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvc2Nhbm5lcnMtdGFiLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvc2NhbnMtcmVwb3J0LnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvc3RhdGlzdGljLXJlcG9ydC50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL3RhYmxlLXRhYi50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL3RhYmxlLnRzIiwid2VicGFjazovLy8uL2kxOG4vZXMvdW5pdHMtY2F0YWxvZy50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2VzL3VzZXJzLWNhdGFsb2cudHMiLCJ3ZWJwYWNrOi8vLy4vaTE4bi9lcy92YWxpZGF0b3JzLXRhYi50cyIsIndlYnBhY2s6Ly8vLi9pMThuL2luZGV4LnRzIiwid2VicGFjazovLy8uLi8uLi9jbGllbnQvbGluay50c3giLCJ3ZWJwYWNrOi8vLy4uLy4uL2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2gudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uL2NsaWVudC9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uL2NsaWVudC93aXRoLXJvdXRlci50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbmV4dC1zZXJ2ZXIvbGliL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9uZXh0LXNlcnZlci9saWIvbWl0dC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvZXNjYXBlLXBhdGgtZGVsaW1pdGVycy50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vLi4vbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci91dGlscy9mb3JtYXQtdXJsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi8uLi9uZXh0LXNlcnZlci9saWIvcm91dGVyL3V0aWxzL2lzLWR5bmFtaWMudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcGFyc2UtcmVsYXRpdmUtdXJsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi8uLi9uZXh0LXNlcnZlci9saWIvcm91dGVyL3V0aWxzL3BhdGgtbWF0Y2gudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcHJlcGFyZS1kZXN0aW5hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vLi4vbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci91dGlscy9xdWVyeXN0cmluZy50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vLi4vLi4vbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci91dGlscy9yZXNvbHZlLXJld3JpdGVzLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi8uLi8uLi9uZXh0LXNlcnZlci9saWIvcm91dGVyL3V0aWxzL3JvdXRlLW1hdGNoZXIudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi9yb3V0ZXIvdXRpbHMvcm91dGUtcmVnZXgudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL25leHQtc2VydmVyL2xpYi91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtc2VydmVyL3NlcnZlci9kZW5vcm1hbGl6ZS1wYWdlLXBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25leHQvbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vcGFnZXMvaG9tZS9ob21lLm1vZHVsZS5zY3NzIiwid2VicGFjazovLy8uL3BhZ2VzL2hvbWUvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3V0aWxzL2FwaS50cyIsIndlYnBhY2s6Ly8vLi91dGlscy9iYXNlVXJsLnRzIiwid2VicGFjazovLy8uL3V0aWxzL2NhdGFsb2dzLnRzIiwid2VicGFjazovLy8uL3V0aWxzL2Zvcm1hdC1kYXRlLnRzIiwid2VicGFjazovLy8uL3V0aWxzL3Bob3RvX3VybC50cyIsIndlYnBhY2s6Ly8vLi91dGlscy9zZXNzaW9uLW1hbmFnZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vdXRpbHMvdGhlbWUudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiQHJlYWN0LWdvb2dsZS1tYXBzL2FwaVwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImF4aW9zXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZGF0ZS1mbnNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJkYXRlLWZucy9sb2NhbGVcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJsb2Rhc2guZ2V0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibmV4dC9oZWFkXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibmV4dC9yb3V0ZXJcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0LWF1dG9zdWdnZXN0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3QtaXNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdC1uZXh0anMtdG9hc3RcIiJdLCJuYW1lcyI6WyJBdXRvY29tcGxldGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJncyIsIl9kZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwic3VnZ2VzdGlvbnMiLCJkZWZhdWx0VmFsdWVXYXNEZWZpbmVkIiwiZXZlbnQiLCJuZXdWYWx1ZSIsIm5leHRTdGF0ZSIsInNldFN0YXRlIiwiY29udGV4dCIsImdldFN1Z2dlc3Rpb25zIiwicHJvcHMiLCJyZWFzb24iLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmVzZXRMaW5lIiwic3RhdGUiLCJyZW5kZXIiLCJkZWZhdWx0VmFsdWUiLCJ0YWJpbmRleCIsInBsYWNlaG9sZGVyIiwib25TdWdnZXN0aW9uU2VsZWN0ZWQiLCJnZXRTdWdnZXN0aW9uVmFsdWUiLCJyZW5kZXJTdWdnZXN0aW9uIiwiZGlzYWJsZWQiLCJ1c2VXaGl0ZVRleHQiLCJ0ZXh0V2hpdGUiLCJpbnB1dFByb3BzIiwidGFiSW5kZXgiLCJvbkNoYW5nZSIsImNsYXNzTmFtZSIsIl9fanN4IiwiX19zZWxmIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsIl9qc3hGaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJBdXRvc3VnZ2VzdCIsIm9uU3VnZ2VzdGlvbnNGZXRjaFJlcXVlc3RlZCIsIm9uU3VnZ2VzdGlvbnNDbGVhclJlcXVlc3RlZCIsImhpZ2hsaWdodEZpcnN0U3VnZ2VzdGlvbiIsInNob3VsZFJlbmRlclN1Z2dlc3Rpb25zIiwiZm9jdXNJbnB1dE9uU3VnZ2VzdGlvbkNsaWNrIiwiQmFja2Ryb3AiLCJkaXNwbGF5IiwiY2hpbGRyZW4iLCJzdHlsZSIsInN0eWxlcyIsIlByaW1hcnlCdXR0b25WYXJpYW50IiwiUHJpbWFyeUJ1dHRvbiIsImxhYmVsIiwidHlwZSIsIm9uQ2xpY2siLCJ2YXJpYW50IiwiYnV0dG9uQ2xhc3MiLCJFcnJvciIsInByaW1hcnlCdXR0b25FcnJvciIsInByaW1hcnlCdXR0b24iLCJkZWZhdWx0UHJvcHMiLCJTdWNjZXNzIiwiU2Vjb25kYXJ5QnV0dG9uVmFyaWFudCIsIlNlY29uZGFyeUJ1dHRvbiIsIm5vQm9yZGVyIiwic2Vjb25kYXJ5QnV0dG9uIiwic2Vjb25kYXJ5QnV0dG9uRXJyb3IiLCJib3JkZXIiLCJDaGVja2JveCIsImNoZWNrZWQiLCJjaGVja2JveENsYXNzTmFtZSIsInJhbmRvbSIsIk1hdGgiLCJjdXN0b21JZCIsImNsYXNzTmFtZXMiLCJqb2luIiwiaWQiLCJjaGVja2JveCIsImh0bWxGb3IiLCJIZWFkZXIiLCJQdXJlQ29tcG9uZW50IiwibmFtZSIsInByb2ZpbGVQaWN0dXJlIiwic2hvd01lbnUiLCJob3dTaG93TWVudSIsImlzQW5hbHlzdCIsImxvZ28iLCJlIiwia2V5Iiwid2hpY2giLCJrZXlDb2RlIiwiY3RybCIsImN0cmxLZXkiLCJkZWxldGVTZXNzaW9uIiwiUm91dGVyIiwicHVzaCIsImNvbXBvbmVudERpZE1vdW50Iiwicm9sQW5hbHlzdCIsInZhbGlkYXRlSXNBbmFseXN0IiwiZ2V0TG9nbyIsImdldE5hbWUiLCJnZXRQcm9maWxlUGljdHVyZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVLZXlkb3duIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibG9jYWxlIiwiZ2V0TG9jYWxlIiwiaGVhZGVyIiwiTGluayIsImhyZWYiLCJzcmMiLCJ3aWR0aCIsImhlaWdodCIsImFsdCIsIm9wdGlvbnNMaXN0Iiwib3B0aW9uRGlzYWJsZWQiLCJvcHRpb24iLCJnZXRJMThuTGFiZWwiLCJkcm9wZG93biIsIkZvbnRBd2Vzb21lSWNvbiIsInRyaWFuZ2xlIiwiaWNvbiIsImZhQ2FyZXREb3duIiwibGVmdENvbnRhaW5lciIsImNvbmZpZ3VyYXRpb24iLCJmYUNvZyIsInByb2ZpbGUiLCJkZWZhdWx0SW1nIiwiZmFVc2VyIiwiY2xvc2VTZXNzaW9uIiwid2l0aFJvdXRlciIsInJvdXRlciIsInVzZVJvdXRlciIsIl9leHRlbmRzIiwiRmlsZSIsImFjY2VwdGVkRm9ybWF0cyIsImZpbGVDb250YWluZXIiLCJyZWYiLCJpbnB1dFJlZiIsImZpbGUiLCJhY2NlcHQiLCJjbGljayIsImJ1dHRvbiIsImZhVXBsb2FkIiwiSW5wdXQiLCJtYXhMZW5ndGgiLCJiZ0NvbG9yIiwiY29sb3IiLCJvbktleVByZXNzIiwiZXJyb3JNZXNzYWdlIiwicGxhY2Vob2xkZXJPdmVyTGFiZWwiLCJtaW5MZW5ndGgiLCJwbGFjZWhvbGRlckNvbG9yIiwiaW5wdXRQbGFjZWhvbGRlciIsImZvbnRTaXplIiwiaXNCbGFjayIsInN0eWxlSW5wdXQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwbGFjZWhvbGRlcklucHV0IiwiaW5wdXRDb250YWluZXIiLCJpbnB1dExpbmVDb250YWluZXIiLCJpbnB1dCIsImxlbmd0aCIsIkxvYWRlciIsInNob3ciLCJsb2FkZXJDb250YWluZXIiLCJNYXAiLCJsYXQiLCJsbmciLCJjZW50ZXIiLCJjb250YWluZXJTdHlsZSIsIkxvYWRTY3JpcHQiLCJnb29nbGVNYXBzQXBpS2V5IiwiR29vZ2xlTWFwIiwibWFwQ29udGFpbmVyU3R5bGUiLCJ6b29tIiwiTWFya2VyIiwicG9zaXRpb24iLCJGcmFnbWVudCIsIk1vZGFsIiwiaXNJbWFnZU1vZGFsIiwiY2xvc2VNb2RhbCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInNob3dNb2RhbCIsImRvY3VtZW50IiwiaGFuZGxlRXNjYXBlS2V5IiwiY29udGFpbmVyV2lkdGgiLCJub1BhZGRpbmciLCJvbktleURvd24iLCJtb2RhbENvbnRhaW5lciIsImJhY2tncm91bmQiLCJoYW5kbGVLZXlNb2RhbCIsImhhbmRsZUNsb3NlTW9kYWwiLCJtb2RhbCIsIlBhZ2VUaXRsZSIsInRpdGxlIiwicyIsIlNlbGVjdCIsImRlZmF1bHRFbXB0eSIsIm9wdGlvbnMiLCJkZWZhdWx0T3B0aW9uIiwibm9MYWJlbCIsImlzRGlzYWJsZWQiLCJzZWxlY3QiLCJtYXAiLCJvcHQiLCJTcXVhcmUiLCJkYXRlIiwiY29sb3JTdHlsZSIsInNxdWFyZSIsImZpbHRlcnMiLCJzZWFyY2hGaWVsZCIsImFjdGlvbnMiLCJzZWFyY2giLCJjbGVhbkZpbHRlciIsImRvd25sb2FkIiwiY29tcGFyYXRpdmVDaGFydCIsImdlb3JlZmVyZW5jZSIsImdldEN1cnJlbnRSZXBvcnQiLCJ0YWJsZSIsImhlYWRlcnMiLCJ0b2FzdCIsInN1Y2Nlc3MiLCJlcnJvciIsIm1lc3NhZ2UiLCJjcmVhdGVCcmFuZCIsImRlbGV0ZUJyYW5kIiwiZWRpdEJyYW5kIiwiZG93bmxvYWREYXRhIiwiY3JlYXRlTW9kYWwiLCJzZWFyY2hCeU5hbWUiLCJlZGl0TW9kYWwiLCJhZGQiLCJzYXZlIiwiY3JlYXRlIiwiY2FwdHVyZUlkIiwicHJpY2UiLCJwcmljZVdpdGhQcm9tb3Rpb24iLCJiYXJjb2RlIiwiYnJhbmQiLCJ1bml0Iiwic3RvcmUiLCJncm91cCIsImxpbmUiLCJhbW91bnQiLCJjYXB0dXJlRGF0ZSIsInN0YXR1cyIsInNjYW5uZWRCeSIsInJldmlld2VkIiwiYnJhbmNoT2ZmaWNlIiwibWFpbkltYWdlIiwicHJpY2VJbWFnZSIsImRldGFpbHNDb250YWluZXIiLCJjaGFuZ2VJbWFnZSIsImVkaXRJbmZvcm1hdGlvbiIsInNhdmVJbmZvcm1hdGlvbiIsImNhbmNlbEluZm9ybWF0aW9uIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIndpdGhJbWFnZSIsIndpdGhvdXRJbWFnZSIsInN0YXR1c1JlamVjdGVkIiwibm9ybWFsUHJpY2UiLCJzdGF0dXNQZW5kaW5nIiwic3RhdHVzVmFsaWRhdGVkIiwicGFyYW0iLCJnZW9sb2NhbGl0YXRpb24iLCJleHBvcnRHZW9EYXRhIiwib3B0aW9uc0NhdGFsb2ciLCJicmFuZHNDYXRhbG9nIiwiZ3JvdXBzQ2F0YWxvZyIsImxpbmVzQ2F0YWxvZyIsInN0b3Jlc0NhdGFsb2ciLCJ1bml0c0NhdGFsb2ciLCJoZWFkIiwic2VsZWN0ZWQiLCJwaG90b19tYWluIiwicGhvdG9fcHJpY2UiLCJwcm9kdWN0IiwiY2hhaW4iLCJicmFuY2giLCJzY2FubmVkX2J5IiwiZ3JhbW1hZ2VfcXVhbnRpdHkiLCJ1bml0X3ByaWNlIiwicHJvZHVjdF9jcmVhdGVkX2RhdGUiLCJsb3dlcl9wcmljZSIsImhpZ2hlc3RfcHJpY2UiLCJjYXB0dXJlX2RhdGUiLCJjYXB0dXJlX3ByaWNlIiwidmFsaWRhdGVkIiwicGVuZGluZyIsInVuaXRzIiwiY20iLCJtIiwibWwiLCJsdCIsIm1nIiwiZyIsImtnIiwicGllemEiLCJkZWxldGUiLCJidXR0b25BY2NlcHRMYWJlbCIsImJyYW5kcyIsInVuaXRpZXMiLCJncm91cHMiLCJsaW5lcyIsInJlZ2lvbiIsInVzZXJzIiwiYWxpYXMiLCJlZGl0IiwidGFicyIsInByaWNlTGlzdCIsInVuaXRhcnlQcmljZSIsImhpc3RvcnkiLCJhYmJyZXZpYXRpb24iLCJ3ZWxjb21lIiwic2lkZWJhciIsIm1pc3Npb24iLCJzY2FuRmlsdGVyIiwiYWxsIiwid2l0aFByb2R1Y3QiLCJ3aXRob3V0UHJvZHVjdCIsInNjYW4iLCJ0b3BCYXIiLCJiZWluZ1ZhbGlkYXRlZCIsIndpdGhvdXROdW1iZXIiLCJ3aXRob3V0TWlzc2lvbiIsInByb2R1Y3RJbWFnZSIsInByb21vdGlvblByaWNlIiwiYWRkcmVzcyIsImFkaXRpb25hbENvbW1lbnRzIiwic2hvd1BpY3R1cmUiLCJyZWplY3QiLCJ2YWxpZGF0ZSIsInZhbGlkYXRlQW5kQWRkIiwic3ViamVjdCIsInNlbmRDcml0ZXJpb24iLCJyYWRpb01hcEZpcnN0IiwiYmx1cnJ5IiwiZmFyQXdheSIsImRhcmsiLCJpbmNvbXBsZXRlIiwiZG9lc250TWF0Y2giLCJyYWRpb1NlY29uZCIsIm91dHNpZGVTaG9wIiwic2hvcFRpY2tldCIsImFub3RoZXJDZWxsIiwidGVzdFNjYW4iLCJyZWNlbnQiLCJtb3N0RXhwZW5zaXZlIiwiY2hlYXBlc3QiLCJjaGVhcGVzdFdpdGhQcm9tb3Rpb24iLCJuYXZiYXIiLCJob21lIiwibWlzc2lvbnMiLCJjYXB0dXJlcyIsImNhcHR1cmUiLCJjYXRhbG9ncyIsInByb2R1Y3RzIiwicmFua2luZ3MiLCJncmFwaFRhYiIsImFkdmFuY2VkU2VhcmNoIiwidGFibGVUYWIiLCJwcm9kdWN0VGFiIiwic2Nhbm5lcnNUYWIiLCJ2YWxpZGF0b3JzVGFiIiwiY2hhaW5zQ2F0YWxvZyIsInJlZ2lvbnNDYXRhbG9nIiwidXNlcnNDYXRhbG9nIiwiZ3JhcGhUYWJDb21wYXJlIiwicHJvZHVjdFJlcG9ydCIsInNjYW5zUmVwb3J0IiwibmFtZV9saW5lIiwibmFtZV9ncm91cCIsImRlc2NyaXB0aW9uIiwiY2FwdHVyZV9wb2ludHMiLCJtaXNzaW9uX3BvaW50cyIsInN0YXJ0X2RhdGUiLCJlbmRfZGF0ZSIsInJlZ2lvbnMiLCJjcmVhdGVNaXNzaW9uIiwiZHVwbGljYXRlZE1lc3NhZ2UiLCJkaWFsb2ciLCJhY2VwdCIsImNhbmNlbCIsInZhbGlkYXRpb25zIiwicmVxdWlyZWQiLCJncmVhdGVyVGhhbiIsIm1pc3Npb25Qb2ludHMiLCJ2YWxpZCIsImNhcHR1cmVQb2ludHMiLCJlZGl0UHJvZmlsZSIsInNpZ25PdXQiLCJyZXBvcnRzIiwiZ2VvbG9jYWxpemF0aW9uIiwic3RhdGlzdGljIiwic2NhbnMiLCJuZXdTZXJhY2giLCJwbGFjZWhvbGRlclNlYXJjaCIsIm15TGlzdCIsImdlbmVyYWxTZWFyY2giLCJzYXZlTGlzdCIsImdyYXBoaWMiLCJjbGVhckdyYXBoaWMiLCJlbXB0eVN0YXRlIiwiZW1wdEdyYXBoeVN0YXRlIiwic2F2ZVByb2R1Y3RzIiwic2F2ZVByb2R1Y3RzRXJyb3IiLCJwYXJhbWV0ZXIiLCJ2YWx1ZXMiLCJkZWxldGVGaWx0ZXJzIiwibmFtZU9yQ29kZSIsInN1Y2Nlc3NEb3dubG9hZCIsImRlbGV0ZUZyb21MaXN0Iiwic3VjY2Vzc0RlbGV0ZSIsImVycm9yRGVsZXRlIiwiZXJyb3JEb3dubG9hZCIsIm5vU2VsZWN0ZWQiLCJjYXJkIiwiZ3JhbW1hZ2UiLCJyZWNlbnRseSIsImhpZ2hlciIsImxvd2VyIiwibG93ZXJQcm9tb3Rpb24iLCJkZXRhaWwiLCJwcm9kdWN0SWQiLCJtaW5QcmljZSIsIm1heFByaWNlIiwibGlzdFByaWNlIiwicHJpY2VIaXN0b3J5IiwidXBkYXRlZEF0IiwiY3JlYXRlZEF0IiwicGhvdG8iLCJjcmVhdGVkX2F0IiwidXBkYXRlZF9hdCIsInByb21vdGlvbl9sb3dlcl9wcmljZSIsImxhc3RfcHJpY2UiLCJyb2xlIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsIm1vdGhlcl9sYXN0X25hbWUiLCJ0aGVtZSIsImVtcGxveWVlX251bWJlciIsImNlbGxwaG9uZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJjbG9zZSIsImNhcHR1cmlzdHMiLCJjbGVhckRhdGUiLCJlbXBsb3llZU51bWJlciIsInBlcmNlbnRhZ2UiLCJ2YWxpZGF0ZWRDYXB0dXJlcyIsInBvaW50cyIsInZhbGlkYXRvcnMiLCJnZW5lcmF0ZURhdGEiLCJ0b3RhbCIsIm5vbWJyZSIsInJhbmtpbmciLCJlZmZpY2llbmN5IiwidmFsaWRhdGVkX2NhcHR1cmVzIiwiY3VycmVudFByaWNlIiwiYXZlcmFnZVByaWNlIiwic2VlSGlzdG9yeSIsImNhcHR1cmVkQXQiLCJ0YWdzIiwiYWRkVGFncyIsImFsbFJlZ2lvbnMiLCJlbWFpbCIsInJvbFNlbGVjdGVkIiwiZnVsbE5hbWUiLCJ1c2VyVmFsaWRhdGVzIiwiZ2VuZXJhdGVSZXBvcnQiLCJzdGF0aXN0aWNSZXBvcnQiLCJzY2FubmVyIiwibG9jYWxlcyIsImVzIiwiZW4iLCJnZXQiLCJ0cmFuc2xhdGVUYWJsZUhlYWRlciIsInBhdGgiLCJfb2JqZWN0U3ByZWFkIiwidHJhbnNsYXRlVGFibGVDb21wbGV4SGVhZGVyIiwiY2FjaGVkT2JzZXJ2ZXIiLCJsaXN0ZW5lcnMiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsInByZWZldGNoZWQiLCJnZXRPYnNlcnZlciIsInVuZGVmaW5lZCIsImVudHJpZXMiLCJmb3JFYWNoIiwiZW50cnkiLCJoYXMiLCJ0YXJnZXQiLCJjYiIsImlzSW50ZXJzZWN0aW5nIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJ1bm9ic2VydmUiLCJyb290TWFyZ2luIiwibGlzdGVuVG9JbnRlcnNlY3Rpb25zIiwiZWwiLCJvYnNlcnZlciIsIm9ic2VydmUiLCJzZXQiLCJlcnIiLCJjb25zb2xlIiwicHJlZmV0Y2giLCJhcyIsImNhdGNoIiwiaXNNb2RpZmllZEV2ZW50IiwiY3VycmVudFRhcmdldCIsIm1ldGFLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm5hdGl2ZUV2ZW50IiwibGlua0NsaWNrZWQiLCJyZXBsYWNlIiwic2hhbGxvdyIsInNjcm9sbCIsIm5vZGVOYW1lIiwicHJldmVudERlZmF1bHQiLCJpbmRleE9mIiwidGhlbiIsInNjcm9sbFRvIiwiYm9keSIsImZvY3VzIiwiY3JlYXRlUHJvcEVycm9yIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJyZXF1aXJlZFByb3BzR3VhcmQiLCJyZXF1aXJlZFByb3BzIiwiT2JqZWN0Iiwia2V5cyIsIl8iLCJvcHRpb25hbFByb3BzR3VhcmQiLCJwYXNzSHJlZiIsIm9wdGlvbmFsUHJvcHMiLCJ2YWxUeXBlIiwiaGFzV2FybmVkIiwidXNlUmVmIiwiY3VycmVudCIsIndhcm4iLCJwIiwiY2hpbGRFbG0iLCJzZXRDaGlsZEVsbSIsInVzZVN0YXRlIiwicGF0aG5hbWUiLCJ1c2VNZW1vIiwicmVzb2x2ZWRIcmVmIiwicmVzb2x2ZWRBcyIsInVzZUVmZmVjdCIsInRhZ05hbWUiLCJpc1ByZWZldGNoZWQiLCJjaGlsZCIsIkNoaWxkcmVuIiwib25seSIsImNoaWxkUHJvcHMiLCJkZWZhdWx0UHJldmVudGVkIiwib25Nb3VzZUVudGVyIiwicHJpb3JpdHkiLCJkZWZhdWx0TG9jYWxlIiwiY2xvbmVFbGVtZW50IiwicmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2giLCJlbmRzV2l0aCIsInNsaWNlIiwibm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2giLCJwcm9jZXNzIiwic2luZ2xldG9uUm91dGVyIiwicmVhZHlDYWxsYmFja3MiLCJyZWFkeSIsInVybFByb3BlcnR5RmllbGRzIiwicm91dGVyRXZlbnRzIiwiY29yZU1ldGhvZEZpZWxkcyIsImRlZmluZVByb3BlcnR5IiwiZXZlbnRzIiwiZmllbGQiLCJnZXRSb3V0ZXIiLCJvbiIsImV2ZW50RmllbGQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsIl9zaW5nbGV0b25Sb3V0ZXIiLCJzdGFjayIsInVzZUNvbnRleHQiLCJSb3V0ZXJDb250ZXh0IiwiY3JlYXRlUm91dGVyIiwibWFrZVB1YmxpY1JvdXRlckluc3RhbmNlIiwiX3JvdXRlciIsImluc3RhbmNlIiwicHJvcGVydHkiLCJhc3NpZ24iLCJBcnJheSIsImlzQXJyYXkiLCJDb21wb3NlZENvbXBvbmVudCIsIldpdGhSb3V0ZXJXcmFwcGVyIiwiZ2V0SW5pdGlhbFByb3BzIiwib3JpZ0dldEluaXRpYWxQcm9wcyIsImRpc3BsYXlOYW1lIiwibm9ybWFsaXplTG9jYWxlUGF0aCIsImRldGVjdGVkTG9jYWxlIiwicGF0aG5hbWVQYXJ0cyIsInNwbGl0Iiwic29tZSIsInRvTG93ZXJDYXNlIiwic3BsaWNlIiwibWl0dCIsImhhbmRsZXIiLCJvZmYiLCJlbWl0IiwiZXZ0cyIsImJhc2VQYXRoIiwiYnVpbGRDYW5jZWxsYXRpb25FcnJvciIsImNhbmNlbGxlZCIsImFkZFBhdGhQcmVmaXgiLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwiYWRkTG9jYWxlIiwiZGVsTG9jYWxlIiwic3Vic3RyIiwiaGFzQmFzZVBhdGgiLCJhZGRCYXNlUGF0aCIsImRlbEJhc2VQYXRoIiwiaXNMb2NhbFVSTCIsInVybCIsImxvY2F0aW9uT3JpZ2luIiwicmVzb2x2ZWQiLCJVUkwiLCJvcmlnaW4iLCJpbnRlcnBvbGF0ZUFzIiwicm91dGUiLCJhc1BhdGhuYW1lIiwicXVlcnkiLCJpbnRlcnBvbGF0ZWRSb3V0ZSIsImR5bmFtaWNSZWdleCIsImR5bmFtaWNHcm91cHMiLCJkeW5hbWljTWF0Y2hlcyIsInBhcmFtcyIsImV2ZXJ5IiwicmVwZWF0Iiwib3B0aW9uYWwiLCJyZXBsYWNlZCIsImVzY2FwZVBhdGhEZWxpbWl0ZXJzIiwicmVzdWx0Iiwib21pdFBhcm1zRnJvbVF1ZXJ5IiwiZmlsdGVyZWRRdWVyeSIsImluY2x1ZGVzIiwicmVzb2x2ZUhyZWYiLCJjdXJyZW50UGF0aCIsInJlc29sdmVBcyIsImJhc2UiLCJ1cmxBc1N0cmluZyIsImZpbmFsVXJsIiwiaW50ZXJwb2xhdGVkQXMiLCJzZWFyY2hQYXJhbXMiLCJoYXNoIiwiUEFHRV9MT0FEX0VSUk9SIiwiU3ltYm9sIiwibWFya0xvYWRpbmdFcnJvciIsInByZXBhcmVVcmxBcyIsIm1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uIiwiU1NHX0RBVEFfTk9UX0ZPVU5EX0VSUk9SIiwiZmV0Y2hSZXRyeSIsImF0dGVtcHRzIiwiY3JlZGVudGlhbHMiLCJyZXMiLCJvayIsImpzb24iLCJmZXRjaE5leHREYXRhIiwiZGF0YUhyZWYiLCJpc1NlcnZlclJlbmRlciIsImluaXRpYWxQcm9wcyIsInBhZ2VMb2FkZXIiLCJBcHAiLCJ3cmFwQXBwIiwiaW5pdGlhbFN0eWxlU2hlZXRzIiwic3Vic2NyaXB0aW9uIiwiaXNGYWxsYmFjayIsImFzUGF0aCIsImNvbXBvbmVudHMiLCJzZGMiLCJzdWIiLCJjbGMiLCJfYnBzIiwiX3dyYXBBcHAiLCJpc1NzciIsIl9pbkZsaWdodFJvdXRlIiwiX3NoYWxsb3ciLCJvblBvcFN0YXRlIiwiY2hhbmdlU3RhdGUiLCJfX04iLCJjaGFuZ2UiLCJzdHlsZVNoZWV0cyIsIl9fTl9TU0ciLCJfX05fU1NQIiwiX19ORVhUX0RBVEFfXyIsImF1dG9FeHBvcnQiLCJyZWxvYWQiLCJsb2NhdGlvbiIsImJhY2siLCJtZXRob2QiLCJyZXF1aXJlIiwibG9jYWxlUGF0aFJlc3VsdCIsIl9oIiwiU1QiLCJwZXJmb3JtYW5jZSIsIm1hcmsiLCJhYm9ydENvbXBvbmVudExvYWQiLCJjbGVhbmVkQXMiLCJvbmx5QUhhc2hDaGFuZ2UiLCJzY3JvbGxUb0hhc2giLCJub3RpZnkiLCJwYWdlcyIsImdldFBhZ2VMaXN0IiwiX19yZXdyaXRlcyIsInJld3JpdGVzIiwicHJvbWlzZWRCdWlsZE1hbmlmZXN0IiwicGFyc2VkIiwiX3Jlc29sdmVIcmVmIiwidXJsSXNOZXciLCJwb3RlbnRpYWxIcmVmIiwicGFyc2VkQXMiLCJyb3V0ZVJlZ2V4Iiwicm91dGVNYXRjaCIsInNob3VsZEludGVycG9sYXRlIiwibWlzc2luZ1BhcmFtcyIsImZpbHRlciIsInJvdXRlSW5mbyIsImdldFJvdXRlSW5mbyIsInBhZ2VQcm9wcyIsIl9fTl9SRURJUkVDVCIsImRlc3RpbmF0aW9uIiwicGFyc2VkSHJlZiIsIlByb21pc2UiLCJhcHBDb21wIiwibmV4dCIsImlzUHJlcmVuZGVyZWQiLCJoYW5kbGVSb3V0ZUluZm9FcnJvciIsImxvYWRFcnJvckZhaWwiLCJzc2c0MDQiLCJtb2QiLCJwYWdlIiwiZmV0Y2hDb21wb25lbnQiLCJfZ2V0U3RhdGljRGF0YSIsImdldERhdGFIcmVmIiwiX2VyciIsImdpcEVyciIsInJvdXRlSW5mb0VyciIsImNhY2hlZFJvdXRlSW5mbyIsImlzVmFsaWRFbGVtZW50VHlwZSIsIl9nZXREYXRhIiwiX2dldFNlcnZlckRhdGEiLCJkYXRhIiwiYmVmb3JlUG9wU3RhdGUiLCJvbGRVcmxOb0hhc2giLCJvbGRIYXNoIiwibmV3VXJsTm9IYXNoIiwibmV3SGFzaCIsImlkRWwiLCJnZXRFbGVtZW50QnlJZCIsInNjcm9sbEludG9WaWV3IiwibmFtZUVsIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhcHBseUJhc2VQYXRoIiwiY2xlYW5QYXRobmFtZSIsInJlIiwidGVzdCIsInByZWZldGNoRGF0YSIsImNvbXBvbmVudFJlc3VsdCIsImxvYWRQYWdlIiwiZm4iLCJjYWNoZUtleSIsImN0eCIsIkFwcFRyZWUiLCJzZWdtZW50IiwiY2hhciIsImVuY29kZVVSSUNvbXBvbmVudCIsInNsYXNoZWRQcm90b2NvbHMiLCJmb3JtYXRVcmwiLCJ1cmxPYmoiLCJhdXRoIiwiaG9zdG5hbWUiLCJwcm90b2NvbCIsImhvc3QiLCJwb3J0IiwiU3RyaW5nIiwicXVlcnlzdHJpbmciLCJ1cmxRdWVyeVRvU2VhcmNoUGFyYW1zIiwic2xhc2hlcyIsIlRFU1RfUk9VVEUiLCJpc0R5bmFtaWNSb3V0ZSIsIkRVTU1ZX0JBU0UiLCJwYXJzZVJlbGF0aXZlVXJsIiwicmVzb2x2ZWRCYXNlIiwibWF0Y2hlck9wdGlvbnMiLCJzZW5zaXRpdmUiLCJkZWxpbWl0ZXIiLCJjdXN0b21Sb3V0ZU1hdGNoZXJPcHRpb25zIiwic3RyaWN0IiwiY3VzdG9tUm91dGUiLCJtYXRjaGVyUmVnZXgiLCJwYXRoVG9SZWdleHAiLCJtYXRjaGVyIiwicmVnZXhwVG9GdW5jdGlvbiIsInByZXBhcmVEZXN0aW5hdGlvbiIsImFwcGVuZFBhcmFtc1RvUXVlcnkiLCJwYXJzZWREZXN0aW5hdGlvbiIsImRlc3RRdWVyeSIsImRlc3RQYXRoIiwiZGVzdFBhdGhQYXJhbUtleXMiLCJkZXN0UGF0aFBhcmFtcyIsImRlc3RpbmF0aW9uQ29tcGlsZXIiLCJjb21waWxlIiwibmV3VXJsIiwic3RyT3JBcnJheSIsInF1ZXJ5Q29tcGlsZXIiLCJwYXJhbUtleXMiLCJzaG91bGRBZGRCYXNlUGF0aCIsIm1hdGNoIiwic2VhcmNoUGFyYW1zVG9VcmxRdWVyeSIsInN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0iLCJpc05hTiIsInVybFF1ZXJ5IiwiVVJMU2VhcmNoUGFyYW1zIiwiaXRlbSIsImFwcGVuZCIsInNlYXJjaFBhcmFtc0xpc3QiLCJmcm9tIiwiY3VzdG9tUm91dGVNYXRjaGVyIiwicmVzb2x2ZVJld3JpdGVzIiwicmV3cml0ZSIsInNvdXJjZSIsImRlc3RSZXMiLCJnZXRSb3V0ZU1hdGNoZXIiLCJleGVjIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY29kZSIsInNsdWdOYW1lIiwicG9zIiwiZXNjYXBlUmVnZXgiLCJzdHIiLCJwYXJzZVBhcmFtZXRlciIsImdldFJvdXRlUmVnZXgiLCJub3JtYWxpemVkUm91dGUiLCJzZWdtZW50cyIsImdyb3VwSW5kZXgiLCJwYXJhbWV0ZXJpemVkUm91dGUiLCJyb3V0ZUtleUNoYXJDb2RlIiwicm91dGVLZXlDaGFyTGVuZ3RoIiwiZ2V0U2FmZVJvdXRlS2V5Iiwicm91dGVLZXkiLCJpIiwiZnJvbUNoYXJDb2RlIiwicm91dGVLZXlzIiwibmFtZWRQYXJhbWV0ZXJpemVkUm91dGUiLCJjbGVhbmVkS2V5IiwiaW52YWxpZEtleSIsInBhcnNlSW50IiwiUmVnRXhwIiwibmFtZWRSZWdleCIsImV4ZWNPbmNlIiwidXNlZCIsImdldExvY2F0aW9uT3JpZ2luIiwiZ2V0VVJMIiwiZ2V0RGlzcGxheU5hbWUiLCJpc1Jlc1NlbnQiLCJmaW5pc2hlZCIsImhlYWRlcnNTZW50IiwibG9hZEdldEluaXRpYWxQcm9wcyIsInByb3RvdHlwZSIsInVybE9iamVjdEtleXMiLCJmb3JtYXRXaXRoVmFsaWRhdGlvbiIsIlNQIiwibWVhc3VyZSIsImVtcHR5TG9jYXRpb24iLCJjb29yZGluYXRlcyIsImVtcHR5U3RvcmUiLCJzdG9yZUlkIiwiZW1wdHlNaXNzaW9uIiwiZW1wdHlDYXRhbG9nIiwiZW1wdHlHcm91cCIsImVtcHR5TGluZSIsImlkX2dyb3VwIiwiZW1wdHlQcm9kdWN0IiwicXVhbnRpdHkiLCJpc19lbmFibGUiLCJwaWN0dXJlX3BhdGgiLCJlbXB0eVVzZXIiLCJlbXB0eVBpY3R1cmUiLCJwcm9kdWN0X3BpY3R1cmUiLCJzaGVsZl9waWN0dXJlIiwicHJvbW9fcGljdHVyZSIsImVtcHR5SGlzdG9yeURhdGEiLCJlbXB0eUhpc3RvcnkiLCJyZWNlbnRfcHJpY2UiLCJtYXhfcHJpY2UiLCJtaW5fcHJpY2UiLCJtaW5fcHJpY2Vfd2l0aF9wcm9tb3Rpb24iLCJlbXB0eVNjYW4iLCJzcGVjaWFsX3ByaWNlIiwiY29tbWVudHMiLCJyZWNlcHRpb25fZGF0ZSIsInBpY3R1cmVzIiwidGFiT3JkZXIiLCJ2aWV3UGljdHVyZSIsInByb2R1Y3ROYW1lIiwicHJvZHVjdEJhcmNvZGUiLCJwcm9kdWN0QnJhbmQiLCJwcm9kdWN0UXVhbnRpdHkiLCJwcm9kdWN0VW5pdCIsInByb2R1Y3RHcm91cCIsInByb2R1Y3RMaW5lIiwicHJvZHVjdFR5cGUiLCJ0YWJPcmRlckJsb2NrZWRQcm9kdWN0IiwidGFiT3JkZXJTcGVjaWFsIiwidGFiT3JkZXJCbG9ja2VkUHJvZHVjdFNwZWNpYWwiLCJIb21lUGFnZSIsImxvYWRlZFNjYW4iLCJuZXh0U2NhbklkIiwicHJvZHVjdEZpbHRlciIsIm1pc3Npb25GaWx0ZXIiLCJncm91cExpc3QiLCJtaXNzaW9uTGlzdCIsImJyYW5kTGlzdCIsInVuaXRMaXN0Iiwic3RvcmVMaXN0IiwibGluZUxpc3QiLCJsaW5lTGlzdEZpbHRlciIsImxvYWRlZFByb2R1Y3QiLCJsb2FkZWRTdG9yZSIsImxvYWRlZEJyYW5kIiwibG9hZGVkR3JvdXAiLCJsb2FkZWRVbml0IiwibG9hZGVkTGluZSIsImxvYWRlZFJlY2VudFByaWNlIiwibG9hZGVkTWF4UHJpY2UiLCJsb2FkZWRNaW5QcmljZSIsImxvYWRlZE1pblByaWNlUHJvbW90aW9uIiwiaXNWYWxpZCIsInNob3dSZWplY3RNb2RhbCIsInNlbGVjdGVkUmFkaW8iLCJzaG93TG9hZGVyIiwiZGlzYWJsZWRGaWx0ZXJCdG4iLCJiYXJjb2RlRXJyb3JNc2ciLCJwcmljZUVycm9yTXNnIiwicHJvZHVjdE5hbWVFcnJvck1zZyIsInByb2R1Y3RUeXBlRXJyb3JNc2ciLCJwcm9kdWN0QnJhbmRFcnJvck1zZyIsInByb2R1Y3RMaW5lRXJyb3JNc2ciLCJwcm9kdWN0VW5pdEVycm9yTXNnIiwicHJvZHVjdEdyb3VwRXJyb3JNc2ciLCJzaG93TWVzc2FnZU5vRWxlbWVudHMiLCJzZWxlY3RlZFBpY3R1cmUiLCJleGlzdFByb2R1Y3QiLCJpbWFnZVZpcyIsInNlbGVjdGVkU2NhbklkIiwiY3VycmVudFNjYW5WZXJpZmllZElkIiwiY3VycmVudFNjYW5XYXNWZXJpZmllZCIsImlzQmVpbmdWYWxpZGF0ZWQiLCJpc0JlaW5nVmFsaWRhdGVkQnlDdXJyZW50VXNlciIsInVzZXJJZCIsInZhbGlkYXRvcklkIiwic2NhbnNUb3RhbCIsInNjYW5zVG90YWxXaXRoUHJvZHVjdCIsInNjYW5zVG90YWxXaXRob3V0UHJvZHVjdCIsInVwZGF0ZUJlaW5nVmFsaWRhdGVkU3RhdHVzIiwic2NhbklkIiwiZW5kcG9pbnQiLCJyZXF1ZXN0IiwiaWRfc2NhbiIsImdldEhlYWRlciIsInJlc3BvbnNlIiwiYXBpIiwicG9zdCIsImdldElkIiwiaXNDb250cm9sS2V5IiwiaXNTaGlmdEtleSIsImlzUGx1c0tleSIsImlzTGVzc0tleSIsIm9wZW5SZWplY3QiLCJ2YWxpZGF0ZVNjYW5CdXR0b25IYW5kbGVyIiwiaXNGaXJzdFJ1biIsInRleHRTZWFyY2giLCJ0b3RhbF9wZW5kaW5nIiwid2l0aF9wcm9kdWN0Iiwid2l0aG91dF9wcm9kdWN0Iiwic2NhbnNDb3VudHMiLCJzY2FuU2VsZWN0ZWRIYW5kbGVyIiwiX3NjYW5zIiwiY2xlYW5TY2FuIiwibmV4dEluZGV4IiwiZmluZEluZGV4IiwicGhvdG9VcmwiLCJwcm9kdWN0RXhpc3RzIiwiQm9vbGVhbiIsInNlbGVjdGVkU3RvcmUiLCJmaW5kIiwibG9hZGVkR3JvdXBOYW1lIiwiZmlyc3RUYWJpbmRleCIsInF1ZXJ5U2VsZWN0b3IiLCJmaWx0ZXJCdXR0b25IYW5kbGVyIiwiZ2V0U2Nhbkxpc3QiLCJicmFuZElkIiwidW5pdElkIiwic2VsZWN0ZWRTdG9yZU5hbWUiLCJzdG9yZUlucHV0IiwicXVlcnlTZWxlY3RvckFsbCIsInNlbGVjdGVkT3B0aW9uIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJyZW1vdmUiLCJ2YWxpZGF0ZVNjYW4iLCJ2YWxpZGF0ZVNjYW5BbmRQcm9kdWN0Iiwic2NhbkRhdGEiLCJjaGVja0FuZERlbGV0ZVVudXNlZEZpZWxkcyIsInN0b3JlRGF0YSIsImNoZWNrQW5kRGVsZXRlVW51c2VkRmlsZWRzRm9yU3RvcmUiLCJ2YWxpZGF0ZVJlcXVpcmVkRmllbGRzRm9yU2NhbiIsImZvcm1fZGF0YSIsIkZvcm1EYXRhIiwicHJvZHVjdERhdGEiLCJjaGVja0FuZERlbGV0ZVVudXNlZEZpZWxkc0ZvclByb2R1Y3QiLCJ2YWxpZGF0ZVJlcXVpcmVkRmllbGRzIiwib2JqZWN0IiwiaXNfdmFsaWQiLCJ0cmltIiwiaGFzVmFsaWRQcmljZSIsImNlaWwiLCJwYXJzZUZsb2F0IiwiaWRfY3JpdGVyaW9uIiwicmVqZWN0ZWRCdXR0b25IYW5kbGVyIiwiZHVyYXRpb24iLCJjbG9zZVJlamVjdCIsImZpbGVzIiwiY3JlYXRlT2JqZWN0VVJMIiwibG9nIiwiY2xlYXJUaW1lb3V0IiwidGltZW91dCIsInNldFRpbWVvdXQiLCJmaW5kU2NhbiIsImlucHV0VmFsdWUiLCJpbnB1dExlbmd0aCIsInJlZ2V4cCIsIml0ZW1FeGlzdCIsInN1Z2dlc3Rpb24iLCJncm91cElkIiwibGluZUlkIiwibGluZU5hbWUiLCJ1cGRhdGVGaWx0ZXJMaW5lTGlzdCIsIk51bWJlciIsImlzTmV4dFVybEhvbWUiLCJpc0N1c3RvbSIsIklzQ3VzdG9tVGhlbWUiLCJoYXNEYXJrVGhlbWUiLCJnZXREYXJrVGhlbWUiLCJnZXRUaGVtZSIsImN1cnJlbnRUaGVtZSIsImJ1aWxkVGhlbWUiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJ2YWxpZGF0ZVNlc3Npb24iLCJnZXRHcm91cHNDYXRhbG9nIiwiZ2V0TWlzc2lvbnNWYWxpZGF0aW9uIiwiZ2V0QnJhbmRzQ2F0YWxvZyIsImdldFVuaXRzQ2F0YWxvZyIsImdldFN0b3Jlc0NhdGFsb2ciLCJnZXRMaW5lc0NhdGFsb2ciLCJ1bnNoaWZ0IiwiaGFuZGxlVGFiIiwiaGFuZGxlSW5wdXRDbGljayIsImhhbmRsZVdpbmRvd0Nsb3NlIiwiaGFuZGxlQ29tbWFuZHMiLCJpc1RhYktleSIsInN0b3BQcm9wYWdhdGlvbiIsImluZGV4ZWRFbGVtZW50cyIsInNvcnQiLCJhIiwiYiIsImN1cnJlbnRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50IiwiZWxlbWVudCIsImZvcm1hdERhdGUiLCJyZWNlbnRQcmljZURhdGUiLCJtYXhQcmljZURhdGUiLCJtaW5QcmljZURhdGUiLCJtaW5QcmljZVByb21vRGF0ZSIsInNwZWNpYWxBbmRFeGlzdCIsInRhYnNTcGVjaWFsIiwibG9hZGVkQnJhbmROYW1lIiwibG9hZGVkUHJvZHVjdFR5cGUiLCJsb2FkZWRVbml0TmFtZSIsImxvYWRlZExpbmVOYW1lIiwiSGVhZCIsIm1vZGFsSW1hZ2VDbG9zZSIsImNsb3NlQnV0dG9uIiwibW9kYWxJbWFnZSIsImNvbnRhaW5lclJhZGlvIiwiZGlzcGxheVJhZGlvIiwiZm9ybUNvbnRhaW5lciIsImxhYmVsUmFkaW8iLCJwYWRkaW5nIiwib25DaGFuZ2VSYWRpbyIsImNvbnRhaW5lciIsIml0ZW1MaXN0IiwiY2hhbmdlTWlzc2lvbkZpbHRlckhhbmRsZXIiLCJjaGFuZ2VQcm9kdWN0SGFuZGxlciIsImNhcHR1cmVzTGlzdCIsImN1cnJlbnRQcm9kdWN0IiwicHJvZHVjdFNjYW4iLCJzY2FubmVyRGF0YUNvbnRhaW5lciIsImVsZW1lbnRCb2xkIiwiZGF0YUNvbnRhaW5lciIsImltYWdlTGVmdCIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRTaXplIiwiY3Vyc29yIiwic2VsZWN0SW1hZ2UiLCJpbWFnZVJpZ2h0IiwicHJpY2VUZXh0IiwiYmFyY29kZUhhbmRsZXIiLCJwcmljZUhhbmRsZXIiLCJzcGVjaWFsUHJpY2VDaGVja0hhbmRsZXIiLCJzZXBhcmF0b3IiLCJjaGFuZ2VTdG9yZUhhbmRsZXIiLCJtYXJnaW5Cb3R0b20iLCJhZGRyZXNzSGFuZGxlciIsImNvbW1lbnRIYW5kbGVyIiwicHJvZHVjdERhdGFDb250YWluZXJDb21wbGV0ZWQiLCJwcm9kdWN0RGF0YUNvbnRhaW5lciIsInByb2R1Y3ROYW1lSGFuZGxlciIsIm1hcmdpblRvcCIsImltYWdlIiwibWFyZ2luIiwicHJvZHVjdFJlZiIsImNoYW5nZVByb2R1Y3RQaWN0dXJlIiwicXVhbnRpdHlIYW5kbGVyIiwib25TZWxlY3RHcm91cCIsInR5cGVGaWx0ZXIiLCJjaGFuZ2VUeXBlSGFuZGxlciIsImNoYW5nZUJyYW5kSGFuZGxlciIsImNoYW5nZVVuaXRIYW5kbGVyIiwib25TZWxlY3RMSW5lIiwiaGlzdG9yeUNvbnRhaW5lciIsInNxdWFyZUNvbnRhaW5lciIsIm1lc3NhZ2VOb0VsZW1lbnRzQ29udGFpbmVyIiwiVG9hc3RDb250YWluZXIiLCJhbGlnbiIsImF4aW9zIiwiYmFzZVVSTCIsIndpdGhDcmVkZW50aWFscyIsImJhc2VVUkxHZW9yZWYiLCJnZW9yZWZBcGlLZXkiLCJnZXRSb2xlc0NhdGFsb2ciLCJyb2wiLCJnZXRSZWdpb25zQ2F0YWxvZyIsImdldFJlZ2lvbnNMYWJlbENhdGFsb2ciLCJnZXRMYWJlbHNDYXRhbG9nIiwiZ2V0TWlzc2lvbnNDYXRhbG9nIiwibWlzc2lvbktleSIsImdldE1pc3Npb25zQ2F0YWxvZ0J5TWlzc2lvbiIsInVuaXRLZXkiLCJicmFuZEtleSIsInN0b3JlcyIsInN0b3JlS2V5IiwiZ2V0R2VvbG9jYXRpb25DYXRhbG9nIiwiX3Jlc3BvbnNlJGRhdGEiLCJBdXRob3JpemF0aW9uIiwidHJhbnNmb3JtR2VvbG9jYXRpb24iLCJnZW9sb2NhdGlvbiIsImRhdGVTdHIiLCJwYXJzZWRTaG9ydCIsInBhcnNlIiwiRGF0ZSIsImlzRGF0ZSIsImZvcm1hdCIsInBhcnNlZExvbmciLCJjcmVhdGVTZXNzaW9uIiwidG9rZW4iLCJwcm9maWxlUGljdHJlIiwiZGFya190aGVtZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZW1vdmVJdGVtIiwiZ2V0VG9rZW4iLCJnZXRJdGVtIiwiaXNCcm93c2VyIiwiaGFzTG9jYWxlIiwiZ2V0Um9sZXMiLCJyb2xlcyIsIm5ld1JvdXRlIiwidmFsaWRhdGlvbiIsInZhbGlkYXRlSXNBZG1pbiIsIm9ialRoZW1lIiwiTGlnaHRlbkRhcmtlbkNvbG9yIiwiY29sIiwiYW10IiwidXNlUG91bmQiLCJudW0iLCJyIiwibGlnaHRlbiIsIndhbGxwYXBlciIsImRhcmtlbiIsImZvbnREYXJrZW4iLCJ0ZXh0IiwiZm9udExpZ2h0ZXIiLCJmb250IiwicHJpbWFyeV9idXR0b24iLCJzZWNvbmRhcnlfYnV0dG9uIiwicHJpbWFyeV90ZXh0Iiwic2Vjb25kYXJ5X3RleHQi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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCSyxXQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQkEsV0FBWTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQ0EsV0FBWTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7RUFDRDtFQUNBLE9BQU8sRUFBRTtBQUViLENBQUMsQzs7Ozs7Ozs7Ozs7QUNyTEQsOEQ7Ozs7Ozs7Ozs7O0FDQUEsMkQ7Ozs7Ozs7Ozs7O0FDQUEsbUQ7Ozs7Ozs7Ozs7O0FDQUEsa0M7Ozs7Ozs7Ozs7O0FDQUEscUM7Ozs7Ozs7Ozs7O0FDQUEsNEM7Ozs7Ozs7Ozs7O0FDQUEsdUM7Ozs7Ozs7Ozs7O0FDQUEsc0M7Ozs7Ozs7Ozs7O0FDQUEsd0M7Ozs7Ozs7Ozs7O0FDQUEsa0M7Ozs7Ozs7Ozs7O0FDQUEsOEM7Ozs7Ozs7Ozs7O0FDQUEscUM7Ozs7Ozs7Ozs7O0FDQUEsK0MiLCJmaWxlIjoicGFnZXMvaG9tZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0gcmVxdWlyZSgnLi4vc3NyLW1vZHVsZS1jYWNoZS5qcycpO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHR2YXIgdGhyZXcgPSB0cnVlO1xuIFx0XHR0cnkge1xuIFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuIFx0XHRcdHRocmV3ID0gZmFsc2U7XG4gXHRcdH0gZmluYWxseSB7XG4gXHRcdFx0aWYodGhyZXcpIGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0fVxuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vcGFnZXMvaG9tZS9pbmRleC50c3hcIik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci1jb250ZXh0LmpzXCIpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQXV0b3N1Z2dlc3QgZnJvbSAncmVhY3QtYXV0b3N1Z2dlc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvY29tcGxldGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+IHtcbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICBzdWdnZXN0aW9uczogW10sXG4gICAgICAgIGRlZmF1bHRWYWx1ZVdhc0RlZmluZWQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICByZXNldExpbmU6IGZhbHNlLFxuICAgICAgICBkZWZhdWx0VmFsdWU6ICcnLFxuICAgIH1cblxuICAgIG9uQ2hhbmdlID0gKGV2ZW50LCB7IG5ld1ZhbHVlIH0pID0+IHtcbiAgICAgICAgY29uc3QgbmV4dFN0YXRlID0ge1xuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlKTtcbiAgICB9O1xuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnJlc2V0TGluZSAmJiB0aGlzLnN0YXRlLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU3VnZ2VzdGlvbnNGZXRjaFJlcXVlc3RlZCA9IChjb250ZXh0KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZ2V0U3VnZ2VzdGlvbnMgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY29udGV4dC5yZWFzb24gPT0gJ2lucHV0LWNoYW5nZWQnID8gY29udGV4dC52YWx1ZSA6ICcnO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc3VnZ2VzdGlvbnM6IGdldFN1Z2dlc3Rpb25zKHZhbHVlKVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgb25TdWdnZXN0aW9uc0NsZWFyUmVxdWVzdGVkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25zOiBbXVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgc2hvdWxkUmVuZGVyU3VnZ2VzdGlvbnMgPSAodmFsdWUsIHJlYXNvbikgPT4ge1xuICAgICAgICByZXR1cm4gIHRydWUgO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgc3VnZ2VzdGlvbnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IHsgcmVzZXRMaW5lLCBkZWZhdWx0VmFsdWUsIHRhYmluZGV4LCBwbGFjZWhvbGRlciwgb25TdWdnZXN0aW9uU2VsZWN0ZWQsIGdldFN1Z2dlc3Rpb25WYWx1ZSwgcmVuZGVyU3VnZ2VzdGlvbiwgZGlzYWJsZWQsIHVzZVdoaXRlVGV4dCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgdGV4dFdoaXRlID0gdXNlV2hpdGVUZXh0ID8gJ3RleHQtd2hpdGUnIDogJyc7XG5cbiAgICAgICAgY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAhdmFsdWUgJiYgZGVmYXVsdFZhbHVlID8gZGVmYXVsdFZhbHVlIDogcGxhY2Vob2xkZXIsXG4gICAgICAgICAgICB0YWJJbmRleDogdGFiaW5kZXgsXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGBpbmRleGVkLWVsZW1lbnQgcmVhY3QtYXV0b3N1Z2dlc3RfX2lucHV0ICR7dGV4dFdoaXRlfWBcblxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2F1dG9jb21wbGV0ZS13cmFwcGVyJz5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3RleHRXaGl0ZX0+e3BsYWNlaG9sZGVyfTogPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxBdXRvc3VnZ2VzdFxuICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aW9ucz17c3VnZ2VzdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgIG9uU3VnZ2VzdGlvbnNGZXRjaFJlcXVlc3RlZD17dGhpcy5vblN1Z2dlc3Rpb25zRmV0Y2hSZXF1ZXN0ZWR9XG4gICAgICAgICAgICAgICAgICAgIG9uU3VnZ2VzdGlvbnNDbGVhclJlcXVlc3RlZD17dGhpcy5vblN1Z2dlc3Rpb25zQ2xlYXJSZXF1ZXN0ZWR9XG4gICAgICAgICAgICAgICAgICAgIG9uU3VnZ2VzdGlvblNlbGVjdGVkPXtvblN1Z2dlc3Rpb25TZWxlY3RlZH1cbiAgICAgICAgICAgICAgICAgICAgZ2V0U3VnZ2VzdGlvblZhbHVlPXtnZXRTdWdnZXN0aW9uVmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclN1Z2dlc3Rpb249e3JlbmRlclN1Z2dlc3Rpb259XG4gICAgICAgICAgICAgICAgICAgIGlucHV0UHJvcHM9e2lucHV0UHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodEZpcnN0U3VnZ2VzdGlvbj17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVuZGVyU3VnZ2VzdGlvbnM9IHt0aGlzLnNob3VsZFJlbmRlclN1Z2dlc3Rpb25zfVxuICAgICAgICAgICAgICAgICAgICBmb2N1c0lucHV0T25TdWdnZXN0aW9uQ2xpY2s9e2ZhbHNlfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQXV0b2NvbXBsZXRlIGZyb20gJy4vQXV0b2NvbXBsZXRlJ1xuXG5leHBvcnQgeyBBdXRvY29tcGxldGUgfVxuXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RDaGlsZCB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vYmFja2Ryb3AubW9kdWxlLnNjc3MnXG5cbnR5cGUgUHJvcHMgPSB7XG4gICAgZGlzcGxheTogc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBSZWFjdENoaWxkLFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYWNrZHJvcCh7IGRpc3BsYXksIGNoaWxkcmVuIH06IFByb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17e2Rpc3BsYXl9fSBjbGFzc05hbWU9e3N0eWxlcy5CYWNrZHJvcH0+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cbiIsIi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRcIkJhY2tkcm9wXCI6IFwiYmFja2Ryb3BfQmFja2Ryb3BfXy1DV25aXCJcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgRnVuY3Rpb25Db21wb25lbnQsIFN5bnRoZXRpY0V2ZW50IH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9idXR0b24ubW9kdWxlLnNjc3MnXG5cbnR5cGUgUHJvcHMgPSB7XG4gICAgbGFiZWw6IHN0cmluZyxcbiAgICB0eXBlPzogJ2J1dHRvbicgfCAnc3VibWl0JyB8ICdyZXNldCcsXG4gICAgb25DbGljaz86IChldmVudDogU3ludGhldGljRXZlbnQpID0+IHZvaWQsXG4gICAgZGlzYWJsZWQ/OiBib29sZWFuLFxuICAgIHZhcmlhbnQ/OiBQcmltYXJ5QnV0dG9uVmFyaWFudCxcbiAgICB0YWJpbmRleD86IG51bWJlcixcbiAgICBjbGFzc05hbWU/OiBzdHJpbmcsXG59XG5cbmVudW0gUHJpbWFyeUJ1dHRvblZhcmlhbnQge1xuICAgIFN1Y2Nlc3MsXG4gICAgRXJyb3IsXG59XG5cbmNvbnN0IFByaW1hcnlCdXR0b246IEZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICh7IGNsYXNzTmFtZSwgdGFiaW5kZXgsIGxhYmVsLCB0eXBlLCBvbkNsaWNrLCBkaXNhYmxlZCwgdmFyaWFudCB9KSA9PiB7XG4gICAgY29uc3QgYnV0dG9uQ2xhc3MgPSB2YXJpYW50ID09PSBQcmltYXJ5QnV0dG9uVmFyaWFudC5FcnJvciA/XG4gICAgICAgIHN0eWxlcy5wcmltYXJ5QnV0dG9uRXJyb3IgOlxuICAgICAgICBzdHlsZXMucHJpbWFyeUJ1dHRvblxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtidXR0b25DbGFzc30gJHtjbGFzc05hbWV9YH1cbiAgICAgICAgICAgIHR5cGU9e3R5cGV9XG4gICAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgdGFiSW5kZXg9e3RhYmluZGV4fVxuICAgICAgICA+XG4gICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIClcbn1cblxuUHJpbWFyeUJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgdHlwZTogJ2J1dHRvbicsXG4gICAgb25DbGljazogKCkgPT4ge30sXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHZhcmlhbnQ6IFByaW1hcnlCdXR0b25WYXJpYW50LlN1Y2Nlc3MsXG59XG5cbmV4cG9ydCB7XG4gICAgUHJpbWFyeUJ1dHRvbixcbiAgICBQcmltYXJ5QnV0dG9uVmFyaWFudCxcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBGdW5jdGlvbkNvbXBvbmVudCwgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2J1dHRvbi5tb2R1bGUuc2NzcydcblxudHlwZSBQcm9wcyA9IHtcbiAgICBsYWJlbDogc3RyaW5nLFxuICAgIGRpc2FibGVkPzogYm9vbGVhbixcbiAgICB0eXBlPzogJ2J1dHRvbicgfCAnc3VibWl0JyB8ICdyZXNldCcsXG4gICAgb25DbGljaz86IChldmVudDogU3ludGhldGljRXZlbnQpID0+IHZvaWQsXG4gICAgdmFyaWFudD86IFNlY29uZGFyeUJ1dHRvblZhcmlhbnQsXG4gICAgbm9Cb3JkZXI/OiBib29sZWFuLFxuICAgIHRhYmluZGV4PzogbnVtYmVyLFxuICAgIGNsYXNzTmFtZT86IHN0cmluZyxcbn1cblxuZW51bSBTZWNvbmRhcnlCdXR0b25WYXJpYW50IHtcbiAgICBTdWNjZXNzLFxuICAgIEVycm9yLFxufVxuXG5jb25zdCBTZWNvbmRhcnlCdXR0b246IEZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICh7IGNsYXNzTmFtZSwgdGFiaW5kZXgsIGxhYmVsLCB0eXBlLCBvbkNsaWNrLCB2YXJpYW50LCBub0JvcmRlciwgZGlzYWJsZWQgfSkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbkNsYXNzID0gdmFyaWFudCA9PT0gU2Vjb25kYXJ5QnV0dG9uVmFyaWFudC5TdWNjZXNzID9cbiAgICAgICAgc3R5bGVzLnNlY29uZGFyeUJ1dHRvbiA6XG4gICAgICAgIHN0eWxlcy5zZWNvbmRhcnlCdXR0b25FcnJvclxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtidXR0b25DbGFzc30gJHtjbGFzc05hbWV9ICR7ZGlzYWJsZWQgJiYgc3R5bGVzLmRpc2FibGVkfWB9XG4gICAgICAgICAgICBzdHlsZT17bm9Cb3JkZXIgPyB7IGJvcmRlcjogJ25vbmUnIH0gOiB7fSB9XG4gICAgICAgICAgICB0eXBlPXt0eXBlfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgIHRhYkluZGV4PXt0YWJpbmRleH1cbiAgICAgICAgPlxuICAgICAgICAgICAge2xhYmVsfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICApXG59XG5cblNlY29uZGFyeUJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgdHlwZTogJ2J1dHRvbicsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIG9uQ2xpY2s6ICgpID0+IHt9LFxuICAgIHZhcmlhbnQ6IFNlY29uZGFyeUJ1dHRvblZhcmlhbnQuU3VjY2VzcyxcbiAgICBub0JvcmRlcjogZmFsc2UsXG59XG5cbmV4cG9ydCB7XG4gICAgU2Vjb25kYXJ5QnV0dG9uLFxuICAgIFNlY29uZGFyeUJ1dHRvblZhcmlhbnQsXG59XG4iLCIvLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJwcmltYXJ5QnV0dG9uXCI6IFwiYnV0dG9uX3ByaW1hcnlCdXR0b25fXzI3bWJZXCIsXG5cdFwicHJpbWFyeUJ1dHRvbkVycm9yXCI6IFwiYnV0dG9uX3ByaW1hcnlCdXR0b25FcnJvcl9fM3FteU1cIixcblx0XCJkaXNhYmxlZFwiOiBcImJ1dHRvbl9kaXNhYmxlZF9fVzVfdk5cIixcblx0XCJzZWNvbmRhcnlCdXR0b25cIjogXCJidXR0b25fc2Vjb25kYXJ5QnV0dG9uX18xTjF2TVwiLFxuXHRcInNlY29uZGFyeUJ1dHRvbkVycm9yXCI6IFwiYnV0dG9uX3NlY29uZGFyeUJ1dHRvbkVycm9yX18ySmRYc1wiXG59O1xuIiwiaW1wb3J0IHsgUHJpbWFyeUJ1dHRvbiB9IGZyb20gJy4vUHJpbWFyeUJ1dHRvbidcbmltcG9ydCB7IFNlY29uZGFyeUJ1dHRvbiB9IGZyb20gJy4vU2Vjb25kYXJ5QnV0dG9uJ1xuXG5leHBvcnQge1xuICAgIFByaW1hcnlCdXR0b24sXG4gICAgU2Vjb25kYXJ5QnV0dG9uLFxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IFN5bnRoZXRpY0V2ZW50LCBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vY2hlY2tib3gubW9kdWxlLnNjc3MnXG5cbnR5cGUgUHJvcHMgPSB7XG4gICAgb25DaGFuZ2U6IChlPzogU3ludGhldGljRXZlbnQpID0+IGFueSxcbiAgICBsYWJlbDogc3RyaW5nLFxuICAgIGNoZWNrZWQ/OiBib29sZWFuLFxuICAgIGNsYXNzTmFtZT86IHN0cmluZyxcbiAgICBjaGVja2JveENsYXNzTmFtZT86IHN0cmluZyxcbiAgICBkaXNhYmxlZD86IGJvb2xlYW4sXG4gICAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzLFxuICAgIHRhYmluZGV4PzogbnVtYmVyLFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDaGVja2JveChwcm9wczogUHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIG9uQ2hhbmdlID0gKCkgPT4ge30sXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBjaGVja2VkID0gZmFsc2UsXG4gICAgICAgIGNsYXNzTmFtZSA9ICcnLFxuICAgICAgICBjaGVja2JveENsYXNzTmFtZSA9ICcnLFxuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgICBzdHlsZSA9IHt9LFxuICAgICAgICB0YWJpbmRleCxcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuICAgIGNvbnN0IGN1c3RvbUlkID0gYGNoZWNrYm94LSR7cmFuZG9tfWA7XG5cbiAgICBjb25zdCBjbGFzc05hbWVzID0gW1xuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGRpc2FibGVkID8gc3R5bGVzLmRpc2FibGVkIDogbnVsbCxcbiAgICBdLmpvaW4oJyAnKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxwXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake2NsYXNzTmFtZXN9IHRleHQtbGVmdGB9XG4gICAgICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGlkPXtjdXN0b21JZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Ake3N0eWxlcy5jaGVja2JveH0gJHtjaGVja2JveENsYXNzTmFtZX1gfVxuICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgIHRhYkluZGV4PXt0YWJpbmRleH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj17Y3VzdG9tSWR9PlxuICAgICAgICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvcD5cbiAgICApO1xufVxuIiwiLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFwiY2hlY2tib3hcIjogXCJjaGVja2JveF9jaGVja2JveF9fM2t1WnNcIixcblx0XCJkaXNhYmxlZFwiOiBcImNoZWNrYm94X2Rpc2FibGVkX18yRHVZS1wiXG59O1xuIiwiaW1wb3J0IENoZWNrYm94IGZyb20gJy4vQ2hlY2tib3gnXG5cbmV4cG9ydCB7XG4gICAgQ2hlY2tib3gsXG59IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJ1xuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSAnQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lJ1xuaW1wb3J0IHsgZmFDb2csIGZhQ2FyZXREb3duLCBmYVVzZXIgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9oZWFkZXIubW9kdWxlLnNjc3MnXG5pbXBvcnQgUm91dGVyIGZyb20gJ25leHQvcm91dGVyJ1xuaW1wb3J0IHtnZXRJMThuTGFiZWx9IGZyb20gJy4uLy4uL2kxOG4nXG5pbXBvcnQgeyBkZWxldGVTZXNzaW9uLCBnZXRMb2dvLCBnZXROYW1lLCBnZXRQcm9maWxlUGljdHVyZSwgdmFsaWRhdGVJc0FuYWx5c3QsIGdldExvY2FsZSB9IGZyb20gJy4uLy4uL3V0aWxzL3Nlc3Npb24tbWFuYWdlbWVudCdcblxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxhbnksIGFueT4ge1xuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBwcm9maWxlUGljdHVyZTogbnVsbCxcbiAgICAgICAgc2hvd01lbnU6IGZhbHNlLFxuICAgICAgICBob3dTaG93TWVudTogJ2tleScsXG4gICAgICAgIGlzQW5hbHlzdDogJycsXG4gICAgICAgIGxvZ286ICcnXG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IHJvbEFuYWx5c3QgPSB2YWxpZGF0ZUlzQW5hbHlzdCgpO1xuICAgICAgICBjb25zdCBsb2dvID0gZ2V0TG9nbygpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG5hbWU6IGdldE5hbWUoKSxcbiAgICAgICAgICAgIHByb2ZpbGVQaWN0dXJlOiBnZXRQcm9maWxlUGljdHVyZSgpLFxuICAgICAgICAgICAgaXNBbmFseXN0OiByb2xBbmFseXN0LFxuICAgICAgICAgICAgbG9nbyxcbiAgICAgICAgfSlcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZSA9PiB0aGlzLmhhbmRsZUtleWRvd24oZSkpXG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB0aGlzLmhhbmRsZUtleWRvd24oZSkpXG4gICAgfVxuXG4gICAgaGFuZGxlS2V5ZG93biA9IChlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gZS53aGljaCB8fCBlLmtleUNvZGVcbiAgICAgICAgY29uc3QgY3RybCA9IGUuY3RybEtleSA/IGUuY3RybEtleSA6ICgoa2V5ID09PSAxNykgPyB0cnVlIDogZmFsc2UpXG4gICAgICAgIGlmIChrZXkgPT0gNTUgJiYgY3RybCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNob3dNZW51KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHNob3dNZW51OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBob3dTaG93TWVudTogJ2tleScsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5ob3dTaG93TWVudSA9PT0gJ2tleScgJiYgdGhpcy5zdGF0ZS5zaG93TWVudSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBzaG93TWVudTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VTZXNzaW9uID0gKCkgPT4ge1xuICAgICAgICBkZWxldGVTZXNzaW9uKClcbiAgICAgICAgUm91dGVyLnB1c2goJy9sb2dpbicpXG4gICAgfVxuXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgcHJvZmlsZVBpY3R1cmUsIHNob3dNZW51LCBpc0FuYWx5c3QsIGxvZ28gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IGxvY2FsZSA9IGdldExvY2FsZSgpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmhlYWRlcn0+XG4gICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9ob21lXCI+PGE+PGltZyBzcmM9e2xvZ299IHN0eWxlPXtsb2dvICE9IFwiXCIgPyB7IHdpZHRoOiAnNTVweCcsIGhlaWdodDogJzUwcHgnIH0gOiB7fX0gYWx0PVwiTG9nbyAzQlwiIC8+PC9hPjwvTGluaz5cbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZXMub3B0aW9uc0xpc3R9PlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPXtpc0FuYWx5c3QgPyBzdHlsZXMub3B0aW9uRGlzYWJsZWQgOiBzdHlsZXMub3B0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaG9tZVwiIGxvY2FsZT17bG9jYWxlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ25hdmJhci5vcHRpb24udmFsaWRhdGlvbnMnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT17aXNBbmFseXN0ID8gc3R5bGVzLm9wdGlvbkRpc2FibGVkIDogc3R5bGVzLm9wdGlvbn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL2hvbWUvbWlzc2lvbnNcIiBsb2NhbGU9e2xvY2FsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldEkxOG5MYWJlbChsb2NhbGUsICduYXZiYXIub3B0aW9uLm1pc3Npb25zJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9e3N0eWxlcy5vcHRpb259PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9ob21lL3NjYW5zXCIgbG9jYWxlPXtsb2NhbGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRJMThuTGFiZWwobG9jYWxlLCAnbmF2YmFyLm9wdGlvbi5jYXB0dXJlcycpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPXtzdHlsZXMub3B0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaG9tZS9wcm9kdWN0c1wiIGxvY2FsZT17bG9jYWxlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ25hdmJhci5vcHRpb24ucHJvZHVjdHMnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT17c3R5bGVzLm9wdGlvbn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL2hvbWUvcmFua2luZ3NcIiBsb2NhbGU9e2xvY2FsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldEkxOG5MYWJlbChsb2NhbGUsICduYXZiYXIub3B0aW9uLnJhbmtpbmdzJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9e3N0eWxlcy5vcHRpb259PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nIyc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVwb3J0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9e3N0eWxlcy5kcm9wZG93bn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBjbGFzc05hbWU9e3N0eWxlcy50cmlhbmdsZX0gaWNvbj17ZmFDYXJldERvd259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL2hvbWUvcmVwb3J0cy9zdGF0aXN0aWNcIiBsb2NhbGU9e2xvY2FsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ25hdmJhci5vcHRpb24ucmVwb3J0cy5zdGF0aXN0aWMnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL2hvbWUvcmVwb3J0cy9wcm9kdWN0XCIgbG9jYWxlPXtsb2NhbGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldEkxOG5MYWJlbChsb2NhbGUsICduYXZiYXIub3B0aW9uLnJlcG9ydHMucHJvZHVjdCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaG9tZS9yZXBvcnRzL3NjYW5zXCIgbG9jYWxlPXtsb2NhbGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldEkxOG5MYWJlbChsb2NhbGUsICduYXZiYXIub3B0aW9uLnJlcG9ydHMuc2NhbnMnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL2hvbWUvcmVwb3J0cy9nZW9sb2NhbGl6YXRpb25cIiBsb2NhbGU9e2xvY2FsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ25hdmJhci5vcHRpb24ucmVwb3J0cy5nZW9sb2NhbGl6YXRpb24nKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmxlZnRDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAhaXNBbmFseXN0ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbmZpZ3VyYXRpb259PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ29nfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZXMuZHJvcGRvd259PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBjbGFzc05hbWU9e3N0eWxlcy50cmlhbmdsZX0gaWNvbj17ZmFDYXJldERvd259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9ob21lL25ld0NhdGFsb2dzXCIgbG9jYWxlPXtsb2NhbGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ25hdmJhci5vcHRpb24uY2F0YWxvZ3MnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5wcm9maWxlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVBpY3R1cmUgPT09IG51bGwgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5kZWZhdWx0SW1nfT48Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhVXNlcn0gLz48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucHJvZmlsZVBpY3R1cmV9PjxpbWcgc3JjPXtgJHtwcm9maWxlUGljdHVyZX1gfSAvPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgfSAqL31cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5kZWZhdWx0SW1nfT48Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhVXNlcn0gLz48L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e25hbWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT17c3R5bGVzLmRyb3Bkb3dufT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGNsYXNzTmFtZT17c3R5bGVzLnRyaWFuZ2xlfSBpY29uPXtmYUNhcmV0RG93bn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaG9tZS9wcm9maWxlXCIgbG9jYWxlPXtsb2NhbGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldEkxOG5MYWJlbChsb2NhbGUsICduYXZiYXIub3B0aW9uLmVkaXRQcm9maWxlJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBvbkNsaWNrPXsoKSA9PiB0aGlzLmNsb3NlU2Vzc2lvbigpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldEkxOG5MYWJlbChsb2NhbGUsICduYXZiYXIub3B0aW9uLnNpZ25PdXQnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cblxufVxuXG5jb25zdCB3aXRoUm91dGVyID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKClcbiAgICByZXR1cm4gPEhlYWRlciB7Li4ucHJvcHN9IHJvdXRlcj17cm91dGVyfSAvPlxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyO1xuIiwiLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFwiaGVhZGVyXCI6IFwiaGVhZGVyX2hlYWRlcl9fM2hSRC1cIixcblx0XCJvcHRpb25zTGlzdFwiOiBcImhlYWRlcl9vcHRpb25zTGlzdF9fMzVoSHFcIixcblx0XCJvcHRpb25cIjogXCJoZWFkZXJfb3B0aW9uX18xeDd5eVwiLFxuXHRcImRyb3Bkb3duXCI6IFwiaGVhZGVyX2Ryb3Bkb3duX18ybmtvS1wiLFxuXHRcIm9wdGlvbkRpc2FibGVkXCI6IFwiaGVhZGVyX29wdGlvbkRpc2FibGVkX18xWm8zUlwiLFxuXHRcImxlZnRDb250YWluZXJcIjogXCJoZWFkZXJfbGVmdENvbnRhaW5lcl9fMnJjZnBcIixcblx0XCJjb25maWd1cmF0aW9uXCI6IFwiaGVhZGVyX2NvbmZpZ3VyYXRpb25fX09yTWZrXCIsXG5cdFwicHJvZmlsZVwiOiBcImhlYWRlcl9wcm9maWxlX18zdDBfSVwiLFxuXHRcImRlZmF1bHRJbWdcIjogXCJoZWFkZXJfZGVmYXVsdEltZ19fMWFhZkRcIixcblx0XCJwcm9maWxlUGljdHVyZVwiOiBcImhlYWRlcl9wcm9maWxlUGljdHVyZV9fMkV4cHJcIixcblx0XCJ0cmlhbmdsZVwiOiBcImhlYWRlcl90cmlhbmdsZV9fT2ZWWjFcIlxufTtcbiIsImltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXInXG5cbmV4cG9ydCB7XG4gICAgSGVhZGVyLFxufSIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWUnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9pbnB1dC5tb2R1bGUuc2NzcydcbmltcG9ydCB7IGZhVXBsb2FkIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zJ1xuXG50eXBlIFByb3BzID0ge1xuICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgYWNjZXB0ZWRGb3JtYXRzPzogc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBGdW5jdGlvblxufVxuXG5jbGFzcyBGaWxlIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcz4ge1xuICAgIGlucHV0UmVmOiBhbnlcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBsYWJlbCwgYWNjZXB0ZWRGb3JtYXRzLCBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wc1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5maWxlQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICA8aW5wdXQgcmVmPXtyZWYgPT4gdGhpcy5pbnB1dFJlZiA9IHJlZn0gb25DaGFuZ2U9e2UgPT4gb25DaGFuZ2UoZSl9IGNsYXNzTmFtZT17c3R5bGVzLmZpbGV9IGFjY2VwdD17YWNjZXB0ZWRGb3JtYXRzfSB0eXBlPVwiZmlsZVwiIC8+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmlucHV0UmVmLmNsaWNrKCl9IGNsYXNzTmFtZT17c3R5bGVzLmJ1dHRvbn0gPntsYWJlbH0gPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYVVwbG9hZH0gLz48L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWxlIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9pbnB1dC5tb2R1bGUuc2NzcydcbmltcG9ydCBibGFjayBmcm9tICcuL2lucHV0QmxhY2subW9kdWxlLnNjc3MnXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWUnXG5pbXBvcnQgeyBJY29uUHJvcCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSdcblxudHlwZSBQcm9wcyA9IHtcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgbWF4TGVuZ3RoPzogbnVtYmVyLFxuICAgIG1pbkxlbmd0aD86IG51bWJlcixcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZyxcbiAgICBpY29uPzogSWNvblByb3AsXG4gICAgYmdDb2xvcj86IHN0cmluZyxcbiAgICBjb2xvcj86IHN0cmluZyxcbiAgICBmb250U2l6ZT86IHN0cmluZyxcbiAgICBwbGFjZWhvbGRlckNvbG9yPzogc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBGdW5jdGlvbixcbiAgICBvbktleVByZXNzPzogRnVuY3Rpb24sXG4gICAgZXJyb3JNZXNzYWdlPzogc3RyaW5nLFxuICAgIGRlZmF1bHRWYWx1ZT86IHN0cmluZyB8IG51bWJlciAsXG4gICAgcGxhY2Vob2xkZXJPdmVyTGFiZWw/OiBib29sZWFuLFxuICAgIGRpc2FibGVkPzogYm9vbGVhbixcbiAgICBpbnB1dFBsYWNlaG9sZGVyPzogc3RyaW5nLFxuICAgIGNsYXNzTmFtZT86IHN0cmluZyxcbiAgICB0YWJpbmRleD86IG51bWJlcixcbiAgICBpc0JsYWNrPzogYm9vbGVhbixcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5wdXQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gICAgcHVibGljIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIG1heExlbmd0aDogMTAwLFxuICAgICAgICBtaW5MZW5ndGg6IDAsXG4gICAgICAgIHBsYWNlaG9sZGVyT3ZlckxhYmVsOiBmYWxzZSxcbiAgICAgICAgb25LZXlQcmVzczogKCkgPT4ge30sXG4gICAgICAgIGlzQmxhY2s6IGZhbHNlLFxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIG1heExlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgaWNvbixcbiAgICAgICAgICAgIGJnQ29sb3IsXG4gICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICAgICAgb25LZXlQcmVzcyxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyT3ZlckxhYmVsLFxuICAgICAgICAgICAgbWluTGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXJDb2xvcixcbiAgICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICAgICAgaW5wdXRQbGFjZWhvbGRlcixcbiAgICAgICAgICAgIGZvbnRTaXplLFxuICAgICAgICAgICAgdGFiaW5kZXgsXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgICBpc0JsYWNrLFxuICAgICAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgICAgIGNvbnN0IHN0eWxlSW5wdXQgPSAoYmdDb2xvciAmJiBjb2xvciAmJiBmb250U2l6ZSApID9cbiAgICAgICAgICAgIHsgYmFja2dyb3VuZENvbG9yOiBiZ0NvbG9yLCBjb2xvcjogY29sb3IgfSA6IGNvbG9yID9cbiAgICAgICAgICAgIHsgY29sb3IgOiBjb2xvciB9IDogYmdDb2xvciA/XG4gICAgICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogYmdDb2xvciB9IDoge30gP1xuICAgICAgICAgICAgeyBmb250U2l6ZTogIGZvbnRTaXplIH0gOiB7fVxuXG5cbiAgICAgICAgbGV0IHBsYWNlaG9sZGVySW5wdXQgPSBwbGFjZWhvbGRlck92ZXJMYWJlbCA/IHBsYWNlaG9sZGVyIDogJydcbiAgICAgICAgcGxhY2Vob2xkZXJJbnB1dCA9IGlucHV0UGxhY2Vob2xkZXIgPyBpbnB1dFBsYWNlaG9sZGVyIDogcGxhY2Vob2xkZXJJbnB1dDtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5pbnB1dENvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgeyFwbGFjZWhvbGRlck92ZXJMYWJlbCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBzdHlsZT17IHBsYWNlaG9sZGVyQ29sb3IgPyB7IGNvbG9yOiBwbGFjZWhvbGRlckNvbG9yIH0gOiB7fX0+e3BsYWNlaG9sZGVyfTo8L2xhYmVsPlxuICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmlucHV0TGluZUNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgIHtpY29uICYmIDxGb250QXdlc29tZUljb24gaWNvbj17aWNvbn0vPiB9XG5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg9e21pbkxlbmd0aH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtkZWZhdWx0VmFsdWUgfHwgJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVJbnB1dH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcklucHV0fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkNoYW5nZShlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uS2V5UHJlc3M9eyhlKSA9PiBvbktleVByZXNzKGUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtzdHlsZXMuaW5wdXR9ICR7Y2xhc3NOYW1lfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXt0eXBlfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoPXttYXhMZW5ndGh9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17dGFiaW5kZXh9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICB7ZXJyb3JNZXNzYWdlICYmIGVycm9yTWVzc2FnZS5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtzdHlsZXMuZXJyb3JNZXNzYWdlfT57ZXJyb3JNZXNzYWdlfTwvcD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG4iLCJpbXBvcnQgSW5wdXQgZnJvbSAnLi9JbnB1dCdcbmltcG9ydCBGaWxlIGZyb20gJy4vRmlsZSdcblxuZXhwb3J0IHtcbiAgICBJbnB1dCxcbiAgICBGaWxlLFxufSIsIi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRcImlucHV0Q29udGFpbmVyXCI6IFwiaW5wdXRfaW5wdXRDb250YWluZXJfXzN0LVp2XCIsXG5cdFwiaW5wdXRMaW5lQ29udGFpbmVyXCI6IFwiaW5wdXRfaW5wdXRMaW5lQ29udGFpbmVyX18ydlIyY1wiLFxuXHRcImlucHV0XCI6IFwiaW5wdXRfaW5wdXRfXzNXTm1QXCIsXG5cdFwiYmxhY2tJbnB1dFwiOiBcImlucHV0X2JsYWNrSW5wdXRfXzF3ZkJYXCIsXG5cdFwiZXJyb3JNZXNzYWdlXCI6IFwiaW5wdXRfZXJyb3JNZXNzYWdlX18xNnl4SFwiLFxuXHRcImZpbGVDb250YWluZXJcIjogXCJpbnB1dF9maWxlQ29udGFpbmVyX18ybktIV1wiLFxuXHRcImZpbGVcIjogXCJpbnB1dF9maWxlX18yMDNhbFwiLFxuXHRcImJ1dHRvblwiOiBcImlucHV0X2J1dHRvbl9fMW0zX3RcIixcblx0XCJ0YWdDb250YWluZXJcIjogXCJpbnB1dF90YWdDb250YWluZXJfXzFGbDZyXCIsXG5cdFwidGFnc1wiOiBcImlucHV0X3RhZ3NfX1NqSHFLXCIsXG5cdFwidGFnXCI6IFwiaW5wdXRfdGFnX18xZXJIN1wiXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vbG9hZGVyLm1vZHVsZS5zY3NzJ1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gJy4uL2JhY2tkcm9wL0JhY2tkcm9wJ1xuXG50eXBlIFByb3BzID0ge1xuICAgIHNob3c6IGJvb2xlYW4sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvYWRlcih7IHNob3cgfTogUHJvcHMpIHtcbiAgICBjb25zdCBkaXNwbGF5ID0gc2hvdyA/ICdibG9jaycgOiAnbm9uZSdcbiAgICBjb25zdCBzdHlsZSA9IHsgZGlzcGxheSB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZX0+XG4gICAgICAgICAgICA8QmFja2Ryb3AgZGlzcGxheT1cInNob3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmxvYWRlckNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuTG9hZGVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0JhY2tkcm9wPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG4iLCIvLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJsb2FkZXJDb250YWluZXJcIjogXCJsb2FkZXJfbG9hZGVyQ29udGFpbmVyX18ybTdsWVwiLFxuXHRcIkxvYWRlclwiOiBcImxvYWRlcl9Mb2FkZXJfXzNJcUV5XCIsXG5cdFwiYm91bmNlXCI6IFwibG9hZGVyX2JvdW5jZV9fM2U1elpcIlxufTtcbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgR29vZ2xlTWFwLCBNYXJrZXIsIExvYWRTY3JpcHQgfSBmcm9tICdAcmVhY3QtZ29vZ2xlLW1hcHMvYXBpJ1xuXG50eXBlIFByb3BzID0ge1xuICAgIGxhdDogYW55LFxuICAgIGxuZzogYW55LFxufVxuXG5jbGFzcyBNYXAgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+e1xuICAgIFxuICAgIHJlbmRlcigpe1xuXG4gICAgICAgIGNvbnN0IHsgbGF0LCBsbmcgfSA9IHRoaXMucHJvcHNcbiAgICBcblxuICAgICAgICBjb25zdCBjZW50ZXI9e1xuICAgICAgICAgICAgbGF0OiBsYXQsXG4gICAgICAgICAgICBsbmc6IGxuZ1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSB7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICAgICAgPExvYWRTY3JpcHRcbiAgICAgICAgICAgIGdvb2dsZU1hcHNBcGlLZXk9XCJBSXphU3lCNTNXeEZrdlJDd09SeHkyN0RXekVJOHo2TUVzcnF1eVVcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8R29vZ2xlTWFwXG4gICAgICAgICAgICBtYXBDb250YWluZXJTdHlsZT17Y29udGFpbmVyU3R5bGV9XG4gICAgICAgICAgICBjZW50ZXI9e2NlbnRlcn1cbiAgICAgICAgICAgIHpvb209ezE3fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgeyAvKiBDaGlsZCBjb21wb25lbnRzLCBzdWNoIGFzIG1hcmtlcnMsIGluZm8gd2luZG93cywgZXRjLiAqL1xuICAgICAgICAgICAgICAgIDxNYXJrZXIgcG9zaXRpb249e3tsYXQ6IGxhdCwgbG5nOiBsbmd9fT48L01hcmtlcj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDw+PC8+XG4gICAgICAgICAgICA8L0dvb2dsZU1hcD5cbiAgICAgICAgPC9Mb2FkU2NyaXB0PlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXAiLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vbW9kYWwubW9kdWxlLnNjc3MnXG5cbnR5cGUgUHJvcHMgPSB7XG4gICAgc2hvd01vZGFsOiBib29sZWFuLFxuICAgIGNsb3NlTW9kYWw/OiBGdW5jdGlvbixcbiAgICBjb250YWluZXJXaWR0aD86IHN0cmluZyxcbiAgICBub1BhZGRpbmc/OiBib29sZWFuLFxuICAgIGlzSW1hZ2VNb2RhbD86IGJvb2xlYW4sXG4gICAgb25LZXlEb3duPzogRnVuY3Rpb24sXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwgZXh0ZW5kcyBQdXJlQ29tcG9uZW50PFByb3BzPiB7XG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgaXNJbWFnZU1vZGFsOiBmYWxzZSxcbiAgICB9XG4gICAgaGFuZGxlRXNjYXBlS2V5ID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzSW1hZ2VNb2RhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChldmVudC5rZXlDb2RlID09PSAyNyB8fCBldmVudC5rZXlDb2RlID09PSAxNyB8fCBldmVudC5rZXlDb2RlID09PSA4OCB8fCBldmVudC5rZXlDb2RlID09PSAxOCkgJiYgdGhpcy5wcm9wcy5jbG9zZU1vZGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMjcgJiYgdGhpcy5wcm9wcy5jbG9zZU1vZGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlQ2xvc2VNb2RhbCA9IChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VNb2RhbCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5jbG9zZU1vZGFsKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlS2V5TW9kYWwgPSAoZTogYW55KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzSW1hZ2VNb2RhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKCBlLmtleUNvZGUgID09PSAxNyB8fCBlLmtleUNvZGUgPT09IDE3KSAge1xuICAgICAgICAgICAgICAgIC8vIEVzY2FwZSBrZXkgcHJlc3NlZFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTcpIHtcbiAgICAgICAgICAgICAgICAvLyBFc2NhcGUga2V5IHByZXNzZWRcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd01vZGFsKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlRXNjYXBlS2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVFc2NhcGVLZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHNob3dNb2RhbCwgY29udGFpbmVyV2lkdGgsIG5vUGFkZGluZywgb25LZXlEb3duLCBpc0ltYWdlTW9kYWwgfSA9IHRoaXMucHJvcHNcbiAgICAgICAgbGV0IGNvbnRhaW5lclN0eWxlOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge31cblxuICAgICAgICBpZiAoIXNob3dNb2RhbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGFpbmVyV2lkdGgpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlWyd3aWR0aCddID0gY29udGFpbmVyV2lkdGhcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub1BhZGRpbmcpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlWydwYWRkaW5nJ10gPSAnMTBweCdcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1vZGFsQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmJhY2tncm91bmR9IG9uS2V5RG93bj17KGUpID0+IHRoaXMuaGFuZGxlS2V5TW9kYWwoZSl9IG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xvc2VNb2RhbH0gLz5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtjb250YWluZXJTdHlsZX0gY2xhc3NOYW1lPXtzdHlsZXMubW9kYWx9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufVxuIiwiLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFwibW9kYWxDb250YWluZXJcIjogXCJtb2RhbF9tb2RhbENvbnRhaW5lcl9fYWRqSFZcIixcblx0XCJiYWNrZ3JvdW5kXCI6IFwibW9kYWxfYmFja2dyb3VuZF9fMmN4bWxcIixcblx0XCJtb2RhbFwiOiBcIm1vZGFsX21vZGFsX18yYzRjR1wiLFxuXHRcImRpYWxvZ01vZGFsQ29udGFpbmVyXCI6IFwibW9kYWxfZGlhbG9nTW9kYWxDb250YWluZXJfXzFfd29XXCIsXG5cdFwiZGlhbG9nTW9kYWxCZ1wiOiBcIm1vZGFsX2RpYWxvZ01vZGFsQmdfXzJjMHY5XCIsXG5cdFwiZGlhbG9nTW9kYWxcIjogXCJtb2RhbF9kaWFsb2dNb2RhbF9fMU1Cek1cIixcblx0XCJidG5Db250YWluZXJcIjogXCJtb2RhbF9idG5Db250YWluZXJfXzJfRXp0XCIsXG5cdFwiYnRuQ2xvc2VcIjogXCJtb2RhbF9idG5DbG9zZV9feXcxN0dcIixcblx0XCJidG5BY2NlcHRcIjogXCJtb2RhbF9idG5BY2NlcHRfXzNxTWk1XCJcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBzIGZyb20gJy4vcGFnZVRpdGxlLm1vZHVsZS5zY3NzJ1xuXG50eXBlIFByb3BzID0ge1xuICAgIHRpdGxlOiBzdHJpbmdcbn1cblxuY29uc3QgUGFnZVRpdGxlID0gKHt0aXRsZX06IFByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICA8aDEgY2xhc3NOYW1lPXtzLnRpdGxlfT57dGl0bGV9PC9oMT5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2VUaXRsZSIsIi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRcInRpdGxlXCI6IFwicGFnZVRpdGxlX3RpdGxlX18zdzNpd1wiXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc2VsZWN0Lm1vZHVsZS5zY3NzJ1xuXG50eXBlIFByb3BzID0ge1xuICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgb3B0aW9uczogeyB2YWx1ZTogYW55LCBsYWJlbDogc3RyaW5nIH1bXSxcbiAgICBkZWZhdWx0T3B0aW9uPzogYW55LFxuICAgIGJnQ29sb3I/OiBzdHJpbmcsXG4gICAgY29sb3I/OiBzdHJpbmcsXG4gICAgb25DaGFuZ2U6IEZ1bmN0aW9uLFxuICAgIG5vTGFiZWw/OiBib29sZWFuLFxuICAgIGRlZmF1bHRFbXB0eT86IGJvb2xlYW4sXG4gICAgcGxhY2Vob2xkZXJDb2xvcj86IHN0cmluZ1xuICAgIGVycm9yTWVzc2FnZT86IHN0cmluZyxcbiAgICBpc0Rpc2FibGVkPzogYm9vbGVhbixcbiAgICB0YWJpbmRleD86IG51bWJlcixcbiAgICBjbGFzc05hbWU/OiBzdHJpbmcsXG59XG5cblNlbGVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGVmYXVsdEVtcHR5OiB0cnVlLFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTZWxlY3QocHJvcHM6IFByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgICBsYWJlbCxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgZGVmYXVsdE9wdGlvbixcbiAgICAgICAgYmdDb2xvcixcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICAgIG5vTGFiZWwsXG4gICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgcGxhY2Vob2xkZXJDb2xvcixcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGlzRGlzYWJsZWQsXG4gICAgICAgIHRhYmluZGV4LFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGRlZmF1bHRFbXB0eSxcbiAgICB9ID0gcHJvcHNcblxuICAgIGNvbnN0IHN0eWxlSW5wdXQgPSBiZ0NvbG9yICYmIGNvbG9yID9cbiAgICAgICAgeyBiYWNrZ3JvdW5kQ29sb3I6IGJnQ29sb3IsIGNvbG9yOiBjb2xvciB9IDpcbiAgICAgICAgY29sb3IgP1xuICAgICAgICAgICAgeyBjb2xvcjogY29sb3IgfSA6XG4gICAgICAgICAgICBiZ0NvbG9yID9cbiAgICAgICAgICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogYmdDb2xvciB9IDpcbiAgICAgICAgICAgICAgICB7fVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIHshbm9MYWJlbCAmJiAoXG4gICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17cGxhY2Vob2xkZXJDb2xvciA/IHsgY29sb3I6IHBsYWNlaG9sZGVyQ29sb3IgfSA6IHt9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2xhYmVsfVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gb25DaGFuZ2UoZSl9XG4gICAgICAgICAgICAgICAgdmFsdWU9e2RlZmF1bHRPcHRpb259XG4gICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlSW5wdXR9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtzdHlsZXMuc2VsZWN0fSAke2NsYXNzTmFtZX1gfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgICAgICAgIHRhYkluZGV4PXt0YWJpbmRleH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPXt0cnVlfSB2YWx1ZT17ZGVmYXVsdEVtcHR5ID8gJzAnIDogJyd9PlxuICAgICAgICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICAgICAgPC9vcHRpb24+XG5cbiAgICAgICAgICAgICAgICB7b3B0aW9ucy5tYXAob3B0ID0+IChcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtvcHQudmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17b3B0LnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7b3B0LmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuXG4gICAgICAgICAgICB7ZXJyb3JNZXNzYWdlICYmIGVycm9yTWVzc2FnZS5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9e3N0eWxlcy5lcnJvck1lc3NhZ2V9PntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuIiwiaW1wb3J0IFNlbGVjdCBmcm9tICcuL1NlbGVjdCdcblxuZXhwb3J0IHtcbiAgICBTZWxlY3QsXG59IiwiLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFwic2VsZWN0XCI6IFwic2VsZWN0X3NlbGVjdF9fM1hjcUFcIixcblx0XCJlcnJvck1lc3NhZ2VcIjogXCJzZWxlY3RfZXJyb3JNZXNzYWdlX18zcmM0V1wiLFxuXHRcImxhYmVsXCI6IFwic2VsZWN0X2xhYmVsX18yeHNZSFwiXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3F1YXJlLm1vZHVsZS5zY3NzJ1xuXG5jb25zdCBTcXVhcmUgPSAocHJvcHM6IHsgdGl0bGU6IHN0cmluZywgdmFsdWU6IG51bWJlciB8IG51bGwsIGRhdGU6IHN0cmluZyB8IG51bGwsIGJnQ29sb3I/OiBzdHJpbmcsIGNvbG9yPzogc3RyaW5nIH0pID0+IHtcbiAgICBjb25zdCB7IHRpdGxlLCB2YWx1ZSwgZGF0ZSwgYmdDb2xvciwgY29sb3IgfSA9IHByb3BzXG4gICAgY29uc3QgY29sb3JTdHlsZSA9IHsgY29sb3I6IGNvbG9yID8gY29sb3I6ICcjNTY1NjU2J31cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7YmFja2dyb3VuZENvbG9yOiBiZ0NvbG9yID8gYmdDb2xvciA6ICcjRTZFQUVFJyB9fSBjbGFzc05hbWU9e3N0eWxlcy5zcXVhcmV9PlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtzdHlsZXMudGl0bGV9IHN0eWxlPXtjb2xvclN0eWxlfT57dGl0bGV9PC9wPlxuICAgICAgICAgICAge3ZhbHVlICYmIDxwIGNsYXNzTmFtZT17c3R5bGVzLnZhbHVlfSBzdHlsZT17Y29sb3JTdHlsZX0+JCB7dmFsdWV9PC9wPn1cbiAgICAgICAgICAgIHtkYXRlICYmIDxwIGNsYXNzTmFtZT17c3R5bGVzLmRhdGV9IHN0eWxlPXtjb2xvclN0eWxlfT57ZGF0ZX08L3A+fVxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNxdWFyZSIsIi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRcInNxdWFyZVwiOiBcInNxdWFyZV9zcXVhcmVfXzF1S2xDXCIsXG5cdFwidGl0bGVcIjogXCJzcXVhcmVfdGl0bGVfXzFUUXp1XCIsXG5cdFwidmFsdWVcIjogXCJzcXVhcmVfdmFsdWVfXzFYdjlZXCIsXG5cdFwiZGF0ZVwiOiBcInNxdWFyZV9kYXRlX19WMm4xdlwiXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIGZpbHRlcnM6IHtcbiAgICAgICAgc2VhcmNoRmllbGQ6ICdTZWFyY2ggYnkgbmFtZSBvciBwcm9kdWN0IGNvZGUnLFxuICAgIH0sXG4gICAgYWN0aW9uczoge1xuICAgICAgICBzZWFyY2g6ICdTZWFyY2gnLFxuICAgICAgICBjbGVhbkZpbHRlcjogJ0NsZWFuICBGaWx0ZXJzJyxcbiAgICAgICAgZG93bmxvYWQ6ICdEb3dubG9hZCcsXG4gICAgICAgIGNvbXBhcmF0aXZlQ2hhcnQ6ICdHcmFwaCBDb21wYXJhdGl2ZXMnLFxuICAgICAgICBnZW9yZWZlcmVuY2U6ICdHZW9sb2NhdGlvbicsXG4gICAgICAgIGdldEN1cnJlbnRSZXBvcnQ6ICdHRVQgQ1VSUkVOVCBMSVNUJyxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnQnJhbmRzJyxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBuYW1lOiAnTmFtZScsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB0b2FzdDoge1xuICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0VkaXQgYnJhbmQnLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgdGl0bGU6ICdFcnJvciBpbiAgdGhlIFJlcXVlc3QuJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBpbiB0aGUgUmVxdWVzdC4nLFxuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVCcmFuZDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhlIEJyYW5kIGhhcyBiZWVuIGNyZWF0ZWQgc3VjY2VzZnVsbHkuICcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZUJyYW5kOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgYnJhbmQgaGFzIGJlZW4gcmVtb3ZlZCBzdWNjZXNmdWxseS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdEJyYW5kOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgYnJhbmQgaGFzIGJlZW4gZWRpdGVkIGNvcnJlY3RseS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkb3dubG9hZERhdGE6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSByZXBvcnQgaGFzIGJlZW4gZG93bmxvYWRlZCBzdWNjZXNzZnVsbHkgIC4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgICAgY3JlYXRlTW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ3JlYXRlIEJyYW5kJyxcbiAgICAgICAgICAgIHNlYXJjaDogJ1NlYXJjaCBCcmFuZCcsXG4gICAgICAgICAgICBzZWFyY2hCeU5hbWU6ICdTZWFyY2ggYnkgYnJhbmQgJyxcblxuICAgICAgICB9LFxuICAgICAgICBlZGl0TW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdCBicmFuZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgICAgIGFkZDogJ0FkZCBCcmFuZCcsXG4gICAgICAgICAgICBkb3dubG9hZDogJ0Rvd25sb2FkIFJlcG9ydCcsXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNhdmU6ICdTYXZlJyxcbiAgICAgICAgICAgIGNyZWF0ZTogJ0NyZWF0ZScsXG4gICAgICAgIH0sXG4gICAgfSxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ0NhcHR1cmUgZGV0YWlscycsXG4gICAgaW5wdXQ6IHtcbiAgICAgICAgY2FwdHVyZUlkOiB7XG4gICAgICAgICAgICBsYWJlbDogJ0NhcHR1cmUnLFxuICAgICAgICB9LFxuICAgICAgICBwcmljZToge1xuICAgICAgICAgICAgbGFiZWw6ICdQcmljZScsXG4gICAgICAgIH0sXG4gICAgICAgIHByaWNlV2l0aFByb21vdGlvbjoge1xuICAgICAgICAgICAgbGFiZWw6ICdQcm9tbyBQcmljZScsXG4gICAgICAgIH0sXG4gICAgICAgIGJhcmNvZGU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQmFyIENvZGUnLFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBsYWJlbDogJ05hbWUnLFxuICAgICAgICB9LFxuICAgICAgICBicmFuZDoge1xuICAgICAgICAgICAgbGFiZWw6ICdCcmFuZCcsXG4gICAgICAgIH0sXG4gICAgICAgIHVuaXQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnVW5pdCcsXG4gICAgICAgIH0sXG4gICAgICAgIHN0b3JlOiB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0b3JlJyxcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgbGFiZWw6ICdUeXBlJyxcbiAgICAgICAgfSxcbiAgICAgICAgZ3JvdXA6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnR3JvdXAnLFxuICAgICAgICB9LFxuICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICBsYWJlbDogJ0xpbmUnLFxuICAgICAgICB9LFxuICAgICAgICBhbW91bnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnR3JhbW1hZ2UgLyBRdWFudGl0eScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhcHR1cmVEYXRlOiB7XG4gICAgICAgICAgICBsYWJlbDogJ0RhdGUgb2YgQ2FwdHVyZScsXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1czoge1xuICAgICAgICAgICAgbGFiZWw6ICdTdGF0dXMnLFxuICAgICAgICB9LFxuICAgICAgICBzY2FubmVkQnk6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnU2Nhbm5lZCBieScsXG4gICAgICAgIH0sXG4gICAgICAgIHJldmlld2VkOiB7XG4gICAgICAgICAgICBsYWJlbDogJ1JldmlldycsXG4gICAgICAgIH0sXG4gICAgICAgIGJyYW5jaE9mZmljZToge1xuICAgICAgICAgICAgbGFiZWw6ICdCcmFuY2gnLFxuICAgICAgICB9LFxuICAgICAgICBtYWluSW1hZ2U6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnTWFpbiBQaG90bycsXG4gICAgICAgIH0sXG4gICAgICAgIHByaWNlSW1hZ2U6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnUHJpY2UgUGhvdG8nLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGV0YWlsc0NvbnRhaW5lcjoge1xuICAgICAgICB0aXRsZTogJ1Byb21vIFBob3RvJyxcbiAgICB9LFxuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2hhbmdlSW1hZ2U6ICdDaGFuZ2UgSW1hZ2UnLFxuICAgICAgICBlZGl0SW5mb3JtYXRpb246ICdFZGl0IEluZm9ybWF0aW9uJyxcbiAgICAgICAgc2F2ZUluZm9ybWF0aW9uOiAnU2F2ZSBJbmZvcm1hdGlvbicsXG4gICAgICAgIGNhbmNlbEluZm9ybWF0aW9uOiAnQ2FuY2VsJyxcbiAgICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ0NBUFRVUkVTJyxcbiAgICBmaWx0ZXJzOiB7XG4gICAgICAgIHNlYXJjaEZpZWxkOiAnU2VhcmNoIGJ5ICBuYW1lIG9yIHByb2R1Y3QgY29kZScsXG4gICAgICAgIHN0YXJ0RGF0ZTogJ0Zyb20nLFxuICAgICAgICBlbmREYXRlOiAnVG8nLFxuICAgICAgICB3aXRoSW1hZ2U6ICdXaXRoIFBob3RvJyxcbiAgICAgICAgd2l0aG91dEltYWdlOiAnV2l0aG91dCBQaG90bycsXG4gICAgICAgIHN0YXR1c1JlamVjdGVkOiAnUmVqZWN0ZWQnLFxuICAgICAgICBub3JtYWxQcmljZTogJ05vcm1hbCBQcmljZScsXG4gICAgICAgIHN0YXR1c1BlbmRpbmc6ICdQZW5kaW5nJyxcbiAgICAgICAgc3RhdHVzVmFsaWRhdGVkOiAnVmFsaWRhdGVkJyxcbiAgICAgICAgcHJpY2VXaXRoUHJvbW90aW9uOiAnUHJvbW8gUHJpY2UnLFxuICAgICAgICBwYXJhbTogJ1BhcmFtZXRlcicsXG4gICAgICAgIHZhbHVlOiAnVmFsdWUnLFxuICAgICAgICBnZW9sb2NhbGl0YXRpb246ICdHZW9sb2NhdGlvbicsXG4gICAgfSxcbiAgICBhY3Rpb25zOiB7XG4gICAgICAgIHNlYXJjaDogJ1NlYXJjaCcsXG4gICAgICAgIGNsZWFuRmlsdGVyOiAnQ2xlYW4gRmlsdGVycycsXG4gICAgICAgIGV4cG9ydEdlb0RhdGE6ICdFeHBvcnQgR2VvbG9jYXRpb24gRGF0YScsXG4gICAgfSxcbiAgICBvcHRpb25zQ2F0YWxvZzoge1xuICAgICAgICBicmFuZHNDYXRhbG9nOiAnQnJhbmQnLFxuICAgICAgICBncm91cHNDYXRhbG9nOiAnR3JvdXAnLFxuICAgICAgICBsaW5lc0NhdGFsb2c6ICdMaW5lJyxcbiAgICAgICAgc3RvcmVzQ2F0YWxvZzogJ0JyYW5jaCcsXG4gICAgICAgIHVuaXRzQ2F0YWxvZzogJ1VuaXQnLFxuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZDoge1xuICAgICAgICAgICAgc2VsZWN0ZWQ6ICdTZWxlY3QnLFxuICAgICAgICAgICAgaWQ6ICdDYXB0dXJlJyxcbiAgICAgICAgICAgIHBob3RvX21haW46ICdNYWluIFBob3RvJyxcbiAgICAgICAgICAgIHBob3RvX3ByaWNlOiAnUHJpY2UgUGhvdG8nLFxuICAgICAgICAgICAgYmFyY29kZTogJ0JhcmNvZGUnLFxuICAgICAgICAgICAgcHJvZHVjdDogJ1Byb2R1Y3QnLFxuICAgICAgICAgICAgYnJhbmQ6ICdCcmFuZCcsXG4gICAgICAgICAgICB0eXBlOiAnVHlwZScsXG4gICAgICAgICAgICBjaGFpbjogJ0NvbW1lcmNpYWwgQ2hhaW4nLFxuICAgICAgICAgICAgYnJhbmNoOiAnQnJhbmNoJyxcbiAgICAgICAgICAgIHNjYW5uZWRfYnk6ICdDYXB0dXJpc3QnLFxuICAgICAgICAgICAgcmV2aWV3ZWQ6ICdWYWxpZGF0b3InLFxuICAgICAgICAgICAgc3RhdHVzOiAnU3RhdHVzJyxcbiAgICAgICAgICAgIGdyYW1tYWdlX3F1YW50aXR5OiAnUXVhbnRpdHknLFxuICAgICAgICAgICAgdW5pdDogJ1VuaXQnLFxuICAgICAgICAgICAgdW5pdF9wcmljZTogJ1VuaXQgUHJpY2UnLFxuICAgICAgICAgICAgZ3JvdXA6ICdHcm91cCcsXG4gICAgICAgICAgICBsaW5lOiAnTGluZScsXG4gICAgICAgICAgICBwcm9kdWN0X2NyZWF0ZWRfZGF0ZTogJ0RhdGUgb2YgUHJvZHVjdCBSZWdpc3RyYXRpb24nLFxuICAgICAgICAgICAgbG93ZXJfcHJpY2U6ICdMb3dlc3QgUHJpY2UnLFxuICAgICAgICAgICAgaGlnaGVzdF9wcmljZTogJ0hpZ2hlc3QgUHJpY2UnLFxuICAgICAgICAgICAgY2FwdHVyZV9kYXRlOiAnQ2FwdHVyZSBEYXRlJyxcbiAgICAgICAgICAgIGNhcHR1cmVfcHJpY2U6ICdDYXB0dXJlIFByaWNlJyxcbiAgICAgICAgICAgIGFjdGlvbnM6ICdBY3Rpb25zJyxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgc3RhdHVzOiB7XG4gICAgICAgIHZhbGlkYXRlZDogJ1ZhbGlkYXRlZCcsXG4gICAgICAgIHBlbmRpbmc6ICdQZW5kaW5nJyxcbiAgICB9LFxuXG4gICAgdW5pdHM6IHtcbiAgICAgICAgY206ICdDZW50aW1ldGVyJyxcbiAgICAgICAgbTogJ01ldGVyJyxcbiAgICAgICAgbWw6ICdNaWxpbGl0ZXJzJyxcbiAgICAgICAgbHQ6ICdMaXRlcicsXG4gICAgICAgIG1nOiAnTWlsaWdyYW0nLFxuICAgICAgICBnOiAnR3JhbScsXG4gICAgICAgIGtnOiAnS2lsb2dyYW0nLFxuICAgICAgICBwaWV6YTogJ1BpZWNlJyxcbiAgICB9LFxuXG4gICAgbW9kYWw6IHtcbiAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICBidXR0b25BY2NlcHRMYWJlbDogJ0VsaW1pbmF0ZScsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhpcyBvcGVyYXRpb24gaXMgcGVybWFuZW50LCBEbyB5b3UgIHdhbnQgdG8gIGVsaW1pbmF0ZSB0aGlzIGVsZW1lbnQ/JyxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ0NhdGFsb2dzJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIGJyYW5kczogJ0JyYW5kcycsXG4gICAgICAgIHVuaXRpZXM6ICdVbml0cycsXG4gICAgICAgIGdyb3VwczogJ0dyb3VwcycsXG4gICAgICAgIGxpbmVzOiAnTGluZXMnLFxuICAgICAgICBjaGFpbjogJ0NoYWlucycsXG4gICAgICAgIHJlZ2lvbjogJ1JlZ2lvbnMnLFxuICAgICAgICB1c2VyczogJ1VzZXJzJyxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnQ2hhaW5zJyxcbiAgICBzZWFyY2g6ICdTZWFyY2ggIENoYWluJyxcbiAgICBzZWFyY2hCeU5hbWU6ICdTZWFyY2ggYnkgbmFtZSAnLFxuICAgIGFjdGlvbnM6IHtcbiAgICAgICAgYWRkOiAnQWRkIENoYWluJyxcbiAgICAgICAgZG93bmxvYWQ6ICdEb3dubG9hZCBSZXBvcnQnLFxuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgaWQ6ICdJZCcsXG4gICAgICAgICAgICBuYW1lOiAnTmFtZScsXG4gICAgICAgICAgICBhbGlhczogJ0FsaWFzJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRvYXN0OiB7XG4gICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRXJyb3Igd2l0aCB0aGUgcmVxdWVzdC4nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIHdpdGggdGhlIHJlcXVlc3QuJyxcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDaGFpbiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDaGFpbiBoYXMgYmVlbiBkZWxldGVkIHN1Y2Nlc3NmdWxseS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhlIGNoYWluIGhhcyBiZWVuIGVkaXRlZCBzdWNjZXNkdWxseS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkb3dubG9hZERhdGE6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1JlcG9ydCBoYXMgYmVlbiBkb3dubG9hZGVkIHN1Y2Nlc3NmdWxseS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgICAgY3JlYXRlTW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ3JlYXRlIENoYWluJyxcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdE1vZGFsOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0VkaXQgQ2hhaW4nLFxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzYXZlOiAnU2F2ZScsXG4gICAgICAgICAgICBjcmVhdGU6ICdDcmVhdGUnLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGFiczoge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBwcmljZUxpc3Q6ICdDaGFydHMgLSBMaXN0IFByaWNlJyxcbiAgICAgICAgICAgIHVuaXRhcnlQcmljZTogJ0NoYXJ0cyAtIFVuaXQgUHJpY2UnLFxuICAgICAgICAgICAgaGlzdG9yeTogJ1ByaWNlIEhpc3RvcnknLFxuICAgICAgICB9LFxuICAgICAgICBoaXN0b3J5OiB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgZGF0ZTogJ0RhdGUnLFxuICAgICAgICAgICAgICAgIHByaWNlOiAnUHJpY2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN0YXJ0RGF0ZTogJ1N0YXJ0IERhdGUnLFxuICAgIGVuZERhdGU6ICdFbmQgRGF0ZScsXG4gICAgc2VhcmNoOiAnU2VhcmNoIGNhcHR1cmUgYnkgSUQnLFxuICAgIG1vZGFsOiB7XG4gICAgICAgIGRlbGV0ZToge1xuICAgICAgICAgICAgYnV0dG9uQWNjZXB0TGFiZWw6ICdFbGltaW5hdGUnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RoaXMgb3BlcmF0aW9uIGlzIHBlcm1hbmVudCBEbyB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBlbGVtZW50PycsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgc3RhcnREYXRlOiAnU3RhcnQgRGF0ZScsXG4gICAgZW5kRGF0ZTogJ0VuZCBEYXRlJyxcbiAgICBtb2RhbDoge1xuICAgICAgICBkZWxldGU6IHtcbiAgICAgICAgICAgIGJ1dHRvbkFjY2VwdExhYmVsOiAnRWxpbWluYXRlJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGlzIG9wZXJhdGlvbiBpcyBwZXJtYW5lbnQsIGRvIHlvdSB3YW50IHRvIGVsaW1pbmF0ZSB0aGlzIGVsZW1lbnQ/JyxcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ0dyb3VwcycsXG4gICAgc2VhcmNoOiAnU2VhcmNoIGEgZ3JvdXAnLFxuICAgIHNlYXJjaEJ5TmFtZTogJ1NlYXJjaCBieSBOYW1lICcsXG4gICAgYWN0aW9uczoge1xuICAgICAgICBhZGQ6ICdBZGQgZ3JvdXAnLFxuICAgICAgICBkb3dubG9hZDogJ0Rvd25sb2FkIFJlcG9ydCcsXG4gICAgfSxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBuYW1lOiAnTmFtZScsXG4gICAgICAgICAgICBhYmJyZXZpYXRpb246ICdBYmJyZXZpYXRpb24nLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgdG9hc3Q6IHtcbiAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgdGl0bGU6ICdFcnJvciB3aXRoIHRoZSByZXF1ZXN0LicsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3Igd2l0aCB0aGUgcmVxdWVzdC4nLFxuICAgICAgICB9LFxuICAgICAgICBjcmVhdGU6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0dyb3VwIGhhcyBiZWVuIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5LiAnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWxldGU6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0dyb3VwIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5LiAnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlZGl0OiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdHcm91cCBoYXMgYmVlbiBlZGl0ZWQgc3VjY2Vzc2Z1bGx5LicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRvd25sb2FkRGF0YToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUmVwb3J0IGRvd25sb2FkZWQgc3VjY2VzZnVsbHkuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1vZGFsOiB7XG4gICAgICAgIGNyZWF0ZU1vZGFsOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0NyZWF0ZSAgZ3JvdXAnLFxuICAgICAgICB9LFxuICAgICAgICBlZGl0TW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdCBHcm91cCcsXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNhdmU6ICdTYXZlJyxcbiAgICAgICAgICAgIGNyZWF0ZTogJ0NyZWF0ZScsXG4gICAgICAgIH0sXG4gICAgfSxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ1ZhbGlkYXRpb24nLFxuICAgIHdlbGNvbWU6ICdTZWxlY3QgYSBjYXB0dXJlIHRvIHN0YXJ0LicsXG4gICAgc2lkZWJhcjoge1xuICAgICAgICB0aXRsZTogJ0NhcHR1cmVzJyxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIG1pc3Npb246IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ01pc3Npb24nLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9kdWN0OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdQcm9kdWN0JyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzY2FuRmlsdGVyOiB7XG4gICAgICAgICAgICBhbGw6ICdBbGwnLFxuICAgICAgICAgICAgd2l0aFByb2R1Y3Q6ICdXaXRoIHByb2R1Y3QnLFxuICAgICAgICAgICAgd2l0aG91dFByb2R1Y3Q6ICdXaXRob3V0IHByb2R1Y3QnLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBzY2FuOiB7XG4gICAgICAgIHRvcEJhcjoge1xuICAgICAgICAgICAgYmVpbmdWYWxpZGF0ZWQ6ICdUaGlzIHJlZ2lzdGVyIGlzIGJlaW5nIHZhbGlkYXRlZCwgc2VsZWN0IGFub3RoZXIgb25lJyxcbiAgICAgICAgICAgIHdpdGhvdXROdW1iZXI6ICdXaXRob3V0IE51bWJlcicsXG4gICAgICAgICAgICB3aXRob3V0TWlzc2lvbjogJ1dpdGhvdXQgTWlzc2lvbicsXG4gICAgICAgIH0sXG4gICAgICAgIHByb2R1Y3RJbWFnZToge1xuICAgICAgICAgICAgbGFiZWw6ICdQcm9kdWN0JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJpY2VJbWFnZToge1xuICAgICAgICAgICAgbGFiZWw6ICdQcmljZScsXG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICBiYXJjb2RlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdCYXJjb2RlJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1RoZSBGaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJpY2U6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1ByaWNlJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1RoZSBmaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvbW90aW9uUHJpY2U6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1Byb21vIFByaWNlJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1RoZSBGaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcmU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0JyYW5jaCcsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZHJlc3M6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0FkZHJlc3MnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnVGhlIGZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZGl0aW9uYWxDb21tZW50czoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQWRkaXRpb25hbCBjb21tZW50cycsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uOiB7XG4gICAgICAgICAgICBzaG93UGljdHVyZTogJ1Nob3cgUGhvdG8nLFxuICAgICAgICAgICAgcmVqZWN0OiAnUmVqZWN0JyxcbiAgICAgICAgICAgIHZhbGlkYXRlOiAnVmFsaWRhdGUgY2FwdHVyZScsXG4gICAgICAgICAgICB2YWxpZGF0ZUFuZEFkZDogJ1ZhbGlkYXRlIGFuZCBBZGQnLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBwcm9kdWN0OiB7XG4gICAgICAgIHRpdGxlOiAnQ3JlYXRlIG5ldyBwcm9kdWN0JyxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1Byb2R1Y3QgTmFtZScsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJhcmNvZGU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0JhcmNvZGUnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnVGhlIGZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBicmFuZDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQnJhbmQnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnVGhlIGZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbW91bnQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1F1YW50aXR5JyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1RoZSBmaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5pdDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnVW5pdCcsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdyb3VwOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdHcm91cCcsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0xpbmUnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnVGhlIGZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdUeXBlJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1RoZSBmaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBvcHRpb246IHtcbiAgICAgICAgICAgIGNoYW5nZUltYWdlOiAnQ2hhbmdlIGltYWdlJyxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgbW9kYWw6IHtcbiAgICAgICAgcmVqZWN0OiB7XG4gICAgICAgICAgICBzdWJqZWN0OiAnU2VsZWN0IGEgcmVhc29uIG9mIHJlamVjdGlvbicsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdG9hc3Q6IHtcbiAgICAgICAgc2VuZENyaXRlcmlvbjoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uICcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0NhcHR1cmUgd2FzIHJlamVjdGVkIHN1Y2Nlc2Z1bGx5LicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0Vycm9yIE5vdGlmaWNhdGlvbi4gJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3Igd2l0aCAgdGhlICByZXF1ZXN0LicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJhZGlvTWFwRmlyc3Q6IHtcbiAgICAgICAgYmx1cnJ5OiAnQmx1cnJ5ICBDYXB0aW9uJyxcbiAgICAgICAgZmFyQXdheTogJ0Rpc3RhbnQgQ2FwdHVyZScsXG4gICAgICAgIGRhcms6ICdEYXJrIENhcHR1cmUnLFxuICAgICAgICBpbmNvbXBsZXRlOiAnUHJvZHVjdCBkZXNjcmlwdGlvbiBpbmNvbXBsZXRlJyxcbiAgICAgICAgZG9lc250TWF0Y2g6ICdNaXNtYXRjaGVkIFByb2R1Y3RzJyxcbiAgICB9LFxuXG4gICAgcmFkaW9TZWNvbmQ6IHtcbiAgICAgICAgb3V0c2lkZVNob3A6ICdDYXB0dXJlIG91dCBvZiBzdG9yZScsXG4gICAgICAgIHNob3BUaWNrZXQ6ICdUaWNrZXQgQ2FwdHVyZScsXG4gICAgICAgIGFub3RoZXJDZWxsOiAnQ2FwdHVyZSB0YWtlbiB3aXRoIGFub3RoZXIgY2VsbHBob25lJyxcbiAgICAgICAgdGVzdFNjYW46ICdUZXN0cycsXG4gICAgfSxcblxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgcmVjZW50OiAnTW9zdCBSZWNlbnQnLFxuICAgICAgICBtb3N0RXhwZW5zaXZlOiAnTW9zdCBFeHBlbnNpdmUnLFxuICAgICAgICBjaGVhcGVzdDogJ0NoZWFwZXN0JyxcbiAgICAgICAgY2hlYXBlc3RXaXRoUHJvbW90aW9uOiAnQ2hlYXBlc3Qgd2l0aCAgUHJvbW8nLFxuICAgIH0sXG59XG4iLCIvLyBFTlxuaW1wb3J0IG5hdmJhciBmcm9tICcuL25hdmJhcidcbmltcG9ydCBob21lIGZyb20gJy4vaG9tZSdcbmltcG9ydCBtaXNzaW9ucyBmcm9tICcuL21pc3Npb25zJztcbmltcG9ydCBjYXB0dXJlcyBmcm9tICcuL2NhcHR1cmVzJztcbmltcG9ydCBjYXB0dXJlIGZyb20gJy4vY2FwdHVyZSc7XG5pbXBvcnQgY2F0YWxvZ3MgZnJvbSAnLi9jYXRhbG9ncyc7XG5pbXBvcnQgcHJvZmlsZSBmcm9tICcuL3Byb2ZpbGUnO1xuaW1wb3J0IHByb2R1Y3RzIGZyb20gJy4vcHJvZHVjdHMnO1xuaW1wb3J0IHByb2R1Y3QgZnJvbSAnLi9wcm9kdWN0JztcbmltcG9ydCByYW5raW5ncyBmcm9tICcuL3JhbmtpbmdzJztcbmltcG9ydCBncmFwaFRhYiBmcm9tICcuL2dyYXBoLXRhYic7XG5pbXBvcnQgYWR2YW5jZWRTZWFyY2ggZnJvbSAnLi9hZHZhbmNlZC1zZWFyY2gnO1xuaW1wb3J0IHRhYmxlVGFiIGZyb20gJy4vdGFibGUtdGFiJztcbmltcG9ydCBwcm9kdWN0VGFiIGZyb20gJy4vcHJvZHVjdC10YWInO1xuaW1wb3J0IHNjYW5uZXJzVGFiIGZyb20gJy4vc2Nhbm5lcnMtdGFiJztcbmltcG9ydCB2YWxpZGF0b3JzVGFiIGZyb20gJy4vdmFsaWRhdG9ycy10YWInO1xuaW1wb3J0IGJyYW5kc0NhdGFsb2cgZnJvbSAnLi9icmFuZHMtY2F0YWxvZyc7XG5pbXBvcnQgdW5pdHNDYXRhbG9nIGZyb20gJy4vdW5pdHMtY2F0YWxvZyc7XG5pbXBvcnQgZ3JvdXBzQ2F0YWxvZyBmcm9tICcuL2dyb3Vwcy1jYXRhbG9nJztcbmltcG9ydCBsaW5lc0NhdGFsb2cgZnJvbSAnLi9saW5lcy1jYXRhbG9nJztcbmltcG9ydCBjaGFpbnNDYXRhbG9nIGZyb20gJy4vY2hhaW5zLWNhdGFsb2cnO1xuaW1wb3J0IHJlZ2lvbnNDYXRhbG9nIGZyb20gJy4vcmVnaW9ucy1jYXRhbG9nJztcbmltcG9ydCB1c2Vyc0NhdGFsb2cgZnJvbSAnLi91c2Vycy1jYXRhbG9nJztcbmltcG9ydCB0YWJsZSBmcm9tICcuL3RhYmxlJztcbmltcG9ydCBncmFwaFRhYkNvbXBhcmUgZnJvbSAnLi9ncmFwaC10YWItY29tcGFyZSdcbmltcG9ydCBzdGF0aXN0aWNSZXBvcnQgZnJvbSAnLi9zdGF0aXN0aWMtcmVwb3J0J1xuaW1wb3J0IHByb2R1Y3RSZXBvcnQgZnJvbSAnLi9wcm9kdWN0LXJlcG9ydCdcbmltcG9ydCBzY2Fuc1JlcG9ydCBmcm9tICcuL3NjYW5zLXJlcG9ydCdcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hdmJhcixcbiAgICBob21lLFxuICAgIHRhYmxlLFxuICAgIG1pc3Npb25zLFxuICAgIGNhcHR1cmVzLFxuICAgIGNhcHR1cmUsXG4gICAgY2F0YWxvZ3MsXG4gICAgcHJvZmlsZSxcbiAgICBwcm9kdWN0cyxcbiAgICBwcm9kdWN0LFxuICAgIHJhbmtpbmdzLFxuICAgIGdyYXBoVGFiLFxuICAgIGFkdmFuY2VkU2VhcmNoLFxuICAgIHRhYmxlVGFiLFxuICAgIHByb2R1Y3RUYWIsXG4gICAgc2Nhbm5lcnNUYWIsXG4gICAgdmFsaWRhdG9yc1RhYixcbiAgICBicmFuZHNDYXRhbG9nLFxuICAgIHVuaXRzQ2F0YWxvZyxcbiAgICBncm91cHNDYXRhbG9nLFxuICAgIGxpbmVzQ2F0YWxvZyxcbiAgICBjaGFpbnNDYXRhbG9nLFxuICAgIHJlZ2lvbnNDYXRhbG9nLFxuICAgIHVzZXJzQ2F0YWxvZyxcbiAgICBncmFwaFRhYkNvbXBhcmUsXG4gICAgcHJvZHVjdFJlcG9ydCxcbiAgICBzY2Fuc1JlcG9ydCxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ0xpbmVzJyxcbiAgICBzZWFyY2g6ICdTZWFyY2ggYSBsaW5lJyxcbiAgICBzZWFyY2hCeU5hbWU6ICdTZWFyY2ggYnkgbmFtZSAnLFxuICAgIGFjdGlvbnM6IHtcbiAgICAgICAgYWRkOiAnQWRkIGxpbmUnLFxuICAgICAgICBkb3dubG9hZDogJ0Rvd25sb2FkIFJlcG9ydCcsXG4gICAgfSxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBuYW1lX2xpbmU6ICdMaW5lJyxcbiAgICAgICAgICAgIG5hbWVfZ3JvdXA6ICdHcm91cCcsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB0b2FzdDoge1xuICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0Vycm9yIHdpdGggdGhlIFJlcXVlc3QuJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciB3aXRoIHRoZSBSZXF1ZXN0LicsXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTGluZSBjcmVhdGVkIHN1Y2Nlc2Z1bGx5LiAnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWxldGU6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0xpbmUgaGFzIGJlZW4gZGVsZXRlZCBzdWNjZXNmdWxseS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTGluZSBoYXMgYmVlbiBlZGl0ZWQgc3VjY2VzZnVsbHkuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZG93bmxvYWREYXRhOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdSZXBvcnQgZG93bmxvYWRlZCBzdWNjZXNmdWxseS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgICAgY3JlYXRlTW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ3JlYXRlIGxpbmUnLFxuICAgICAgICB9LFxuICAgICAgICBlZGl0TW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdCBsaW5lJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2F2ZTogJ1NhdmUnLFxuICAgICAgICAgICAgY3JlYXRlOiAnQ3JlYXRlJyxcbiAgICAgICAgfSxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnTUlTU0lPTlMnLFxuICAgIHRhYmxlOiB7XG4gICAgICAgIGhlYWQ6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnVGl0bGUnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdEZXNjcmlwdGlvbicsXG4gICAgICAgICAgICBjYXB0dXJlX3BvaW50czogJ0NhcHR1cmUgUG9pbnRzJyxcbiAgICAgICAgICAgIG1pc3Npb25fcG9pbnRzOiAnTWlzc2lvbiBQb2ludHMnLFxuICAgICAgICAgICAgc3RhcnRfZGF0ZTogJ1N0YXJ0IERhdGUnLFxuICAgICAgICAgICAgZW5kX2RhdGU6ICdFbmQgRGF0ZScsXG4gICAgICAgICAgICByZWdpb25zOiAnUmVnaW9uJyxcbiAgICAgICAgICAgIGFjdGlvbnM6ICdBY3Rpb25zJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWRkOiAnTmV3IE1pc3Npb24nLFxuICAgIH0sXG5cbiAgICB0b2FzdDoge1xuICAgICAgICBjcmVhdGVNaXNzaW9uOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4gJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhlIG1pc3Npb24gaGFzIGJlZW4gY3JlYXRlZCBjb3JyZWN0bHkuICcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0Vycm9yIE5vdGlmaWNhdGlvbi4gJyxcbiAgICAgICAgICAgICAgICBkdXBsaWNhdGVkTWVzc2FnZTogJ0R1cGxpY2F0ZWQgIFRpdGxlLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NvbWV0aGluZyB3ZW50IHdyb25nLiAnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgbW9kYWw6IHtcbiAgICAgICAgZGlhbG9nOiB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhpcyBvcGVyYXRpb24gY2Fubm90IGJlIHBlcmZvcm1lZCBiZWNhdXNlIHRoZSBtaXNzaW9uIGhhcyBhc3NvY2lhdGVkIGNhcHR1cmVzJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBhY2VwdDogJ0FjZXB0JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGFkZDoge1xuICAgICAgICAgICAgdGl0bGU6ICdOZXcgTWlzc2lvbicsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2FuY2VsOiAnQ2FuY2VsJyxcbiAgICAgICAgICAgICAgICBjcmVhdGU6ICdDcmVhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgdGl0bGU6ICdFZGl0IE1pc3Npb24nLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNhbmNlbDogJ0NhbmNlbCcsXG4gICAgICAgICAgICAgICAgZWRpdDogJ2VkaXQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZSAocmVxdWlyZWQpJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ1RoZSBmaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnRGVzY3JpcHRpb24gKHJlcXVpcmVkIC8gbWF4IDI1NSBjaGFyYWN0ZXJzKScsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg6ICdUaGUgZGVzY3JpcHRpb24gbW9zdCBoYXZlIGF0IGxlYXN0IDUgY2hhcmFjdGVycy4nLFxuICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg6ICdUaGUgZGVzY3JpcHRpb24gbW9zdCBoYXZlIG1heCAyNTUgY2hhcmFjdGVycy4nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhcnREYXRlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTdGFydCBEYXRlJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ1N0YXJ0IGRhdGUgaXMgbm90IHZhbGlkJyxcbiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlclRoYW46ICdTdGFydCBkYXRlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHllc3RlcmRheS4nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kRGF0ZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnRW5kIERhdGUnLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAnRW5kIGRhdGUgaXMgbm90IHZhbGlkJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lvbjoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnU2VsZWN0IGEgcmVnaW9uJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ1lvdSBtdXN0IHNlbGVjdCBhdCBsZWFzdCBvbmUgcmVnaW9uJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pc3Npb25Qb2ludHM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1BvaW50cyBieSBNaXNzaW9uJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZDogJ1RoZSBzY29yZSBtdXN0IGJlIGEgdmFsaWQgbnVtYmVyJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhcHR1cmVQb2ludHM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1BvaW50cyBieSBjYXB0dXJlJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZDogJ1RoZSBzY29yZSBtdXN0IGJlIGEgdmFsaWQgbnVtYmVyJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBvcHRpb246IHtcbiAgICAgICAgdmFsaWRhdGlvbnM6ICdWYWxpZGF0aW9uJyxcbiAgICAgICAgbWlzc2lvbnM6ICdNaXNzaW9ucycsXG4gICAgICAgIGNhcHR1cmVzOiAnQ2FwdHVyZXMnLFxuICAgICAgICBwcm9kdWN0czogJ1Byb2R1Y3RzJyxcbiAgICAgICAgcmFua2luZ3M6ICdSYW5raW5ncycsXG4gICAgICAgIGNhdGFsb2dzOiAnQ2F0YWxvZ3MnLFxuICAgICAgICBlZGl0UHJvZmlsZTogJ0VkaXQgcHJvZmlsZScsXG4gICAgICAgIHNpZ25PdXQ6ICdTaWduIE91dCcsXG4gICAgICAgIHJlcG9ydHM6IHtcbiAgICAgICAgICAgIGdlb2xvY2FsaXphdGlvbjogJ1JlcG9ydGUgZGUgZ2VvbG9jYWxpemFjaW9uJyxcbiAgICAgICAgICAgIHN0YXRpc3RpYzogJ1JlcG9ydGUgZGUgZXN0YWTDrXN0aWNvcycsXG4gICAgICAgICAgICBwcm9kdWN0OiAnUmVwb3J0ZSBkZSBwcm9kdWN0bycsXG4gICAgICAgICAgICBzY2FuczogJ1JlcG9ydGUgZGUgY2FwdHVyYXMnLFxuICAgICAgICB9LFxuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ1Byb2R1Y3QgUmVwb3J0JyxcbiAgICBuZXdTZXJhY2g6ICdOZXcgc2VhcmNoJyxcbiAgICBwbGFjZWhvbGRlclNlYXJjaDogJ05hbWUgLyBDb2RlJyxcbiAgICBzZWxlY3RlZDogJ1NlbGVjdGVkJyxcbiAgICBzZWFyY2g6ICdTZWFyY2gnLFxuICAgIG15TGlzdDogJ1ZpZXcgbXkgbGlzdCcsXG4gICAgZ2VuZXJhbFNlYXJjaDogJ0dlbmVyYWwgU2VhcmNoJyxcbiAgICBzYXZlTGlzdDogJ1NhdmUgdG8gbXkgbGlzdCcsXG4gICAgZ3JhcGhpYzogJ0dyYXBoJyxcbiAgICBjbGVhckdyYXBoaWM6ICdDbGVhbiBteSBsaXN0JyxcbiAgICBlbXB0eVN0YXRlOiAnRG8gYSBzZWFyY2ggdG8gc2VlIHJlc3VsdHMnLFxuICAgIGVtcHRHcmFwaHlTdGF0ZTogJ0dyYXBoIHRvIHNlZSB0aGUgcmVzdWx0cycsXG4gICAgc2F2ZVByb2R1Y3RzOiAnUHJvZHVjdHMgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBsaXN0JyxcbiAgICBzYXZlUHJvZHVjdHNFcnJvcjogJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIHNhdmluZyB0aGUgbGlzdCcsXG4gICAgcGFyYW1ldGVyOiAnUGFyYW1ldGVyJyxcbiAgICB2YWx1ZXM6ICdWYWx1ZScsXG4gICAgc3RhcnREYXRlOiAnU3RhcnQgZGF0ZScsXG4gICAgZW5kRGF0ZTogJ0VuZCBkYXRlJyxcbiAgICBkZWxldGVGaWx0ZXJzOiBcIkNsZWFuIGZpbHRlcnNcIixcbiAgICBkb3dubG9hZDogXCJEb3dubG9hZFwiLFxuICAgIG5hbWVPckNvZGU6IFwiTmFtZSAvIGNvZGVcIixcbiAgICBzdWNjZXNzRG93bmxvYWQ6IFwiUmVwb3J0IGRvd25sb2FkZWQgc3VjY2Vzc2Z1bGx5XCIsXG4gICAgZGVsZXRlRnJvbUxpc3Q6IFwiRGVsZXRlIGZyb20gbXkgbGlzdFwiLFxuICAgIHN1Y2Nlc3NEZWxldGU6IFwiUHJvZHVjdHMgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgbGlzdFwiLFxuICAgIGVycm9yRGVsZXRlOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHJlbW92aW5nIHByb2R1Y3RzIGZyb20gdGhlIGxpc3RcIixcbiAgICBlcnJvckRvd25sb2FkOiBcIkVycm9yIG9jY3VycmVkIHdoaWxlIGRvd25sb2FkaW5nIHRoZSByZXBvcnRcIixcbiAgICBub1NlbGVjdGVkOiBcIk5vIHByb2R1Y3RzIHNlbGVjdGVkLi4uXCIsXG4gICAgY2FyZDoge1xuICAgICAgICBpZDogXCJJRDpcIixcbiAgICAgICAgYmFyY29kZTogXCJCQVJDT0RFOlwiLFxuICAgICAgICBicmFuZDogXCJCUkFORDpcIixcbiAgICAgICAgbGluZTogXCJMSU5FOlwiLFxuICAgICAgICBncm91cDogXCJHUk9VUDpcIixcbiAgICAgICAgdW5pdDogXCJVTklUOlwiLFxuICAgICAgICB0eXBlOiBcIlRZUEU6XCIsXG4gICAgICAgIG5hbWU6IFwiTkFNRTpcIixcbiAgICAgICAgbG93ZXJfcHJpY2U6IFwiTE9XRVNUIFBSSUNFOlwiLFxuICAgICAgICBoaWdoZXN0X3ByaWNlOiBcIkhJR0hFU1QgUFJJQ0U6XCIsXG4gICAgICAgIGdyYW1tYWdlOiBcIkdSQU1NQUdFIC8gVU5JVDpcIixcbiAgICAgICAgcmVjZW50bHk6IFwiUmVjZW50bHlcIixcbiAgICAgICAgaGlnaGVyOiBcIkhpZ2hlc3RcIixcbiAgICAgICAgbG93ZXI6IFwiTG93ZXJcIixcbiAgICAgICAgbG93ZXJQcm9tb3Rpb246IFwiTG93ZXN0IHdpdGggcHJvbW90aW9uXCIsXG4gICAgfVxufVxuXG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgZGV0YWlsOntcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIHByb2R1Y3RJZDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnUHJvZHVjdCBJRCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmFyY29kZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQmFyY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgbWluTGVuZ3RoOiAnVGhlIGZpZWxkIG11c3QgaGF2ZSBhdCAgbGVhc3QgdHdvIGNoYXJhY3RlcnMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJhbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0JyYW5kJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdUeXBlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBncm91cDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnR3JvdXAnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0xpbmUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFtb3VudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnR3JhbW1hZ2UgLyBRdWFudGl0eScsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQ6ICdUaGUgZ3JhbW1hZ2Ugb3IgcXVhbnRpdHkgbXVzdCBiZSBhIHZhbGlkIG51bWJlcjogVHdvIGRlY2ltYWxzIG1heC4nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5pdDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnVW5pdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFpbkltYWdlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdNYWluIFBob3RvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmljZUltYWdlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdQcmljZSBQaG90bycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWluUHJpY2U6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0xvd2VzdCBQcmljZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF4UHJpY2U6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0hpZ2hlc3QgUHJpY2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZGV0YWlsc0NvbnRhaW5lcjoge1xuICAgICAgICAgICAgdGl0bGU6ICdQcm9kdWN0IFByaWNlJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgY2FuY2VsOiAnQ2FuY2VsJyxcbiAgICAgICAgICAgIGNoYW5nZUltYWdlOiAnQ2hhbmdlIFBob3RvJyxcbiAgICAgICAgICAgIGVkaXRJbmZvcm1hdGlvbjogJ0VkaXQgSW5mb3JtYXRpb24nLFxuICAgICAgICAgICAgc2F2ZUluZm9ybWF0aW9uOiAnU2F2ZSBJbmZvcm1hdGlvbicsXG4gICAgICAgIH0sXG4gICAgfSxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIGxpc3RQcmljZTogJ0dyYXBoIC0gTGlzdCBQcmljZScsXG4gICAgICAgIHVuaXRhcnlQcmljZTogJ0dyYXBoIC0gVW5pdCBQcmljZScsXG4gICAgICAgIHByaWNlSGlzdG9yeTogJ1ByaWNlIEhpc3RvcnknLFxuICAgICAgICBkZXRhaWw6ICdEZXRhaWwnLFxuICAgIH0sXG59O1xuXG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdQUk9EVUNUUycsXG4gICAgZmlsdGVyczoge1xuICAgICAgICBzZWFyY2hGaWVsZDogJ1NlYXJjaCBieSAgbmFtZSBvciBwcm9kdWN0IGNvZGUnLFxuICAgICAgICBzdGFydERhdGU6ICdGcm9tJyxcbiAgICAgICAgZW5kRGF0ZTogJ1RvJyxcbiAgICAgICAgdXBkYXRlZEF0OiAnTW9kaWZpY2F0aW9uIERhdGUnLFxuICAgICAgICBjcmVhdGVkQXQ6ICdDcmVhdGUgRGF0ZScsXG4gICAgICAgIHBhcmFtOiAnUGFyYW1ldGVyJyxcbiAgICAgICAgdmFsdWU6ICdWYWx1ZScsXG4gICAgfSxcbiAgICBhY3Rpb25zOiB7XG4gICAgICAgIHNlYXJjaDogJ1NlYXJjaCcsXG4gICAgICAgIGNsZWFuRmlsdGVyOiAnQ2xlYW4gRmlsdGVycycsXG4gICAgICAgIGRvd25sb2FkOiAnRG93bmxvYWQnLFxuICAgICAgICBjb21wYXJhdGl2ZUNoYXJ0OiAnR3JhcGggY29tcGFyYXRpdmVzJyxcbiAgICB9LFxuICAgIG9wdGlvbnNDYXRhbG9nOiB7XG4gICAgICAgIGJyYW5kc0NhdGFsb2c6ICdCcmFuZCcsXG4gICAgICAgIGdyb3Vwc0NhdGFsb2c6ICdHcm91cCcsXG4gICAgICAgIGxpbmVzQ2F0YWxvZzogJ0xpbmUnLFxuICAgICAgICBzdG9yZXNDYXRhbG9nOiAnQ2hhaW4nLFxuICAgICAgICB1bml0c0NhdGFsb2c6ICdVbml0JyxcbiAgICB9LFxuICAgIG1vZGFsOiB7XG4gICAgICAgIGRlbGV0ZToge1xuICAgICAgICAgICAgYnV0dG9uQWNjZXB0TGFiZWw6ICdFbGltaW5hdGUnLFxuICAgICAgICAgICAgbWVzc2FnZTogJycsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRhYmxlOiB7XG4gICAgICAgIGhlYWQ6IHtcbiAgICAgICAgICAgIHNlbGVjdGVkOiAnU2VsZWN0JyxcbiAgICAgICAgICAgIHBob3RvOiAnUHJvZHVjdCBQaG90bycsXG4gICAgICAgICAgICBwcm9kdWN0OiAnTmFtZScsXG4gICAgICAgICAgICBiYXJjb2RlOiAnQ29kZScsXG4gICAgICAgICAgICBicmFuZDogJ0JyYW5kJyxcbiAgICAgICAgICAgIHR5cGU6ICdUeXBlJyxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6ICdDYXB0dXJlIERhdGUnLFxuICAgICAgICAgICAgdXBkYXRlZF9hdDogJ01vZGlmaWNhdGlvbiBEYXRlJyxcbiAgICAgICAgICAgIGdyYW1tYWdlX3F1YW50aXR5OiAnUXVhbnRpdHknLFxuICAgICAgICAgICAgdW5pdDogJ1VuaXQnLFxuICAgICAgICAgICAgZ3JvdXA6ICdHcm91cCcsXG4gICAgICAgICAgICBsaW5lOiAnTGluZScsXG4gICAgICAgICAgICBoaWdoZXN0X3ByaWNlOiAnSGlnaGVzdCBQcmljZScsXG4gICAgICAgICAgICBsb3dlcl9wcmljZTogJ0xvd2VzdCBQcmljZScsXG4gICAgICAgICAgICBwcm9tb3Rpb25fbG93ZXJfcHJpY2U6ICdMb3dlc3QgIFByaWNlIHdpdGggcHJvbW8nLFxuICAgICAgICAgICAgbGFzdF9wcmljZTogJ0xhc3QgcHJpY2UgY2FwdHVyZWQnLFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIGlucHV0OiB7XG4gICAgICAgIHJvbGU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnUm9sIConLFxuICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICB9LFxuICAgICAgICBmaXJzdF9uYW1lOiB7XG4gICAgICAgICAgICBsYWJlbDogJ05hbWUgKicsXG4gICAgICAgICAgICBlcnJvcjogJ1RoZSBmaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGxhc3RfbmFtZToge1xuICAgICAgICAgICAgbGFiZWw6ICdMYXN0IG5hbWUgKicsXG4gICAgICAgICAgICBlcnJvcjogJ1RoZSBmaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdGhlcl9sYXN0X25hbWU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnTW90aGVycyBsYXN0IG5hbWUnLFxuICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICB9LFxuICAgICAgICB0aGVtZToge1xuICAgICAgICAgICAgbGFiZWw6ICd1c2UgZGFyayBtb2RlJyxcbiAgICAgICAgICAgIGVycm9yOiAnVGhlIGZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYWxlOiB7XG4gICAgICAgICAgICBsYWJlbDogJ1NlbGVjdCBMYW5ndWFnZScsXG4gICAgICAgICAgICBlcnJvcjogJ1RoZSBmaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGVtcGxveWVlX251bWJlcjoge1xuICAgICAgICAgICAgbGFiZWw6ICdFbXBsb3llZSBudW1iZXInLFxuICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICB9LFxuICAgICAgICBjZWxscGhvbmU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ2VsbHBob25lIE51bWJlcicsXG4gICAgICAgICAgICBlcnJvcjogJ1RoZSBmaWVsZCBpcyByZXF1aXJlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lvbjoge1xuICAgICAgICAgICAgbGFiZWw6ICdSZWdpb24nLFxuICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICB9LFxuICAgICAgICB1c2VybmFtZToge1xuICAgICAgICAgICAgbGFiZWw6ICdVc2VyIConLFxuICAgICAgICAgICAgZXJyb3I6ICdUaGUgZmllbGQgaXMgcmVxdWlyZWQnLFxuICAgICAgICB9LFxuICAgICAgICBwYXNzd29yZDoge1xuICAgICAgICAgICAgbGFiZWw6ICdQYXNzd29yZCAqJyxcbiAgICAgICAgICAgIGVycm9yOiAnVGhlIGZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2xvc2U6ICdDbG9zZScsXG4gICAgICAgIHNhdmU6ICdTYXZlJyxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnUmFua2luZ3MnLFxuICAgIHRhYnM6IHtcbiAgICAgICAgY2FwdHVyaXN0czoge1xuICAgICAgICAgICAgdGl0bGU6ICdDYXB0dXJpc3RzJyxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogJ1N0YXJ0IERhdGUnLFxuICAgICAgICAgICAgZW5kRGF0ZTogJ0VuZCBEYXRlJyxcbiAgICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICAgICAgc2VhcmNoOiB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VhcmNoIGJ5IG5hbWUgb3IgZW1wbG95ZWUgbnVtYmVyJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjbGVhckRhdGU6ICdDbGVhbiBEYXRlcycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICAgICAgICBoZWFkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdQb3NpdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIGVtcGxveWVlTnVtYmVyOiAnRW1wbG95ZWUgbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ05hbWUnLFxuICAgICAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiAnUGVyY2VudGFqZScsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlZENhcHR1cmVzOiAnVmFsaWRhdGVkIENhcHR1cmVzJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiAnUG9pbnRzJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0b3JzOiB7XG4gICAgICAgICAgICB0aXRsZTogJ1ZhbGlkYXRvcnMnLFxuICAgICAgICAgICAgc3RhcnREYXRlOiAnU3RhcnQgRGF0ZScsXG4gICAgICAgICAgICBlbmREYXRlOiAnRW5kIERhdGUnLFxuICAgICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgICAgICBzZWFyY2g6IHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWFyY2ggYnkgbmFtZSBvciBlbXBsb3llZSBudW1iZXInLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNsZWFyRGF0ZTogJ0NsZWFuIERhdGVzJyxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZURhdGE6ICdHZW5lcmF0ZSBEYXRhJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b3RhbDoge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVzOiAnQ2FwdHVyZXMgIERhdGUnLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlZDogJ1ZhbGlkYXRlZCBUb3RhbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGlzdG9yeToge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVzOiAnQ2FwdHVyZXMgSGlzdG9yeScsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVkOiAnVmFsaWRhdGVkIEhpc3RvcnknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhYmxlOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGVtcGxveWVlTnVtYmVyOiAnRW1wbG95ZWUgTnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgbm9tYnJlOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2U6ICdQZXJjZW50YWdlJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkQ2FwdHVyZXM6ICdWYWxpZGF0ZWQgQ2FwdHVyZXMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnUmVnaW9ucycsXG4gICAgc2VhcmNoOiAnU2VhcmNoIGJ5IFJlZ2lvbicsXG4gICAgc2VhcmNoQnlOYW1lOiAnU2VhcmNoIGJ5IE5hbWUgJyxcbiAgICBhY3Rpb25zOiB7XG4gICAgICAgIGFkZDogJ0FkZCBSZWdpb24nLFxuICAgICAgICBkb3dubG9hZDogJ0Rvd25sb2FkIFJlcG9ydCcsXG4gICAgfSxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBuYW1lOiAnTmFtZScsXG4gICAgICAgICAgICBhbGlhczogJ0FsaWFzJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRvYXN0OiB7XG4gICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRXJyb3Igd2l0aCB0aGUgUmVxdWVzdC4nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIHdpdGggdGhlIFJlcXVlc3QuJyxcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdSZWdpb24gY3JlYXRlZCBzdWNjZXNmdWxseS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzIE5vdGlmaWNhdGlvbi4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdSZWdpb24gaGFzIGJlZW4gZGVsZXRlZCBzdWNjZXNmdWxseS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUmVnaW9uIGhhcyBiZWVuIGVkaXRlZCBzdWNjZXNmdWxseS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkb3dubG9hZERhdGE6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1JlcG9ydCAgZG93bmxvYWRlZCBzdWNjZXNzZnVsbHkuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1vZGFsOiB7XG4gICAgICAgIGNyZWF0ZU1vZGFsOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0NyZWF0ZSBSZWdpb24nLFxuICAgICAgICB9LFxuICAgICAgICBlZGl0TW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdCBSZWdpb24nLFxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzYXZlOiAnU2F2ZScsXG4gICAgICAgICAgICBjcmVhdGU6ICdDcmVhdGUnLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgc3RhcnREYXRlOiAnU3RhcnQgRGF0ZScsXG4gICAgZW5kRGF0ZTogJ0VuZCBEYXRlJyxcbiAgICBpbnB1dDoge1xuICAgICAgICBzZWFyY2g6IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VhcmNoIGJ5ICBuYW1lIG9yIGVtcGxveWVlIG51bWJlcicsXG4gICAgICAgIH0sXG4gICAgICAgIG1pc3Npb246IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnTWlzc2lvbicsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIGNsZWFyRGF0ZTogJ0NsZWFuIERhdGVzJyxcbiAgICB9LFxuICAgIHRhYmxlOiB7XG4gICAgICAgIGhlYWRlcjoge1xuICAgICAgICAgICAgcmFua2luZzogJ1Bvc2l0aW9uJyxcbiAgICAgICAgICAgIGVtcGxveWVlX251bWJlcjogJ0VtcGxveWVlIE51bWJlcicsXG4gICAgICAgICAgICBuYW1lOiAnTmFtZScsXG4gICAgICAgICAgICBlZmZpY2llbmN5OiAnUGVyY2VudGFnZScsXG4gICAgICAgICAgICB2YWxpZGF0ZWRfY2FwdHVyZXM6ICdWYWxpZGF0ZWQgQ2FwdHVyZXMnLFxuICAgICAgICAgICAgcG9pbnRzOiAnUG9pbnRzJyxcbiAgICAgICAgfVxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdSZXBvcnRlIGRlIGNhcHR1cmFzJyxcbn1cblxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRhYmxlOiB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIGJyYW5jaE9mZmljZTogJ0JyYW5jaCcsXG4gICAgICAgICAgICBtaW5QcmljZTogJ0xvd2VzdCBQcmljZScsXG4gICAgICAgICAgICBtYXhQcmljZTogJ0hpZ2hlc3QgUHJpY2UnLFxuICAgICAgICAgICAgY3VycmVudFByaWNlOiAnQ3VycmVudCBQcmljZScsXG4gICAgICAgICAgICBhdmVyYWdlUHJpY2U6ICdBdmVyYWdlIFByaWNlJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2VlSGlzdG9yeTogJ1NlZSBIaXN0b3J5JyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1vZGFsOiB7XG4gICAgICAgIHRhYmxlOiB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgc2NhbjogJ0NhcHR1cmUnLFxuICAgICAgICAgICAgICAgIGNhcHR1cmVkQXQ6ICdDYXB0dXJlIERhdGUnLFxuICAgICAgICAgICAgICAgIHByaWNlOiAnUHJpY2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgY2xvc2U6ICdjbG9zZScsXG4gICAgICAgIH0sXG4gICAgfSxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBhY3Rpb25zOiAnQWN0aW9ucycsXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdVbml0cycsXG4gICAgc2VhcmNoOiAnU2VhcmNoIGJ5IFVuaXQnLFxuICAgIHNlYXJjaEJ5TmFtZTogJ1NlYXJjaCBieSBOYW1lICcsXG4gICAgYWN0aW9uczoge1xuICAgICAgICBhZGQ6ICdBZGQgVW5pdCcsXG4gICAgICAgIGRvd25sb2FkOiAnRG93bmxvYWQgUmVwb3J0JyxcbiAgICB9LFxuICAgIHRhYmxlOiB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIG5hbWU6ICdOYW1lJyxcbiAgICAgICAgICAgIGFiYnJldmlhdGlvbjogJ0FiYnJldmlhdGlvbicsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB0b2FzdDoge1xuICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0Vycm9yIHdpdGggdGhlIFJlcXVlc3QuJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciB3aXRoIHRoZSBSZXF1ZXN0LicsXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5pdCBjcmVhdGVkIHN1dWNjZXNzZnVsbHkuICcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5pdCBkZWxldGVkIHN1Y2Nlc3NmdWxseS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5pdCBoYXMgYmVlbiBlZGl0ZWQgc3VjY2Vzc2Z1bGx5LicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRvd25sb2FkRGF0YToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUmVwb3J0IGRvd25sb2FkZWQgc3VjY2Vzc2Z1bGx5LicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtb2RhbDoge1xuICAgICAgICBjcmVhdGVNb2RhbDoge1xuICAgICAgICAgICAgdGl0bGU6ICdDcmVhdGUgVW5pdCcsXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRNb2RhbDoge1xuICAgICAgICAgICAgdGl0bGU6ICdFZGl0IFVuaXQnLFxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzYXZlOiAnU2F2ZScsXG4gICAgICAgICAgICBjcmVhdGU6ICdDcmVhdGUnLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdVc2VycycsXG4gICAgc2VhcmNoOiAnU2VhcmNoIFVzZXInLFxuICAgIHNlYXJjaEJ5TmFtZTogJ1NlYXJjaCBieSBuYW1lLCB1c2VyLCBlbWFpbCwgdGFncyBvciBlbXBsb3llZSBudW1iZXIuJyxcbiAgICB0YWdzOiAnVGFncycsXG4gICAgYWN0aW9uczoge1xuICAgICAgICBhZGQ6ICdDcmVhdGUgbmV3IHVzZXInLFxuICAgICAgICBhZGRUYWdzOiAnQWRkIFRhZ3MnLFxuICAgICAgICBjbG9zZTogJ0Nsb3NlJyxcbiAgICAgICAgZG93bmxvYWQ6ICdEb3dubG9hZCBSZXBvcnQnLFxuICAgIH0sXG4gICAgZmlsdGVyczoge1xuICAgICAgICByb2xlOiAnRmlsdGVyIGJ5IHJvbGUnLFxuICAgICAgICByZWdpb246ICdGaWx0ZXIgYnkgcmVnaW9uJyxcbiAgICAgICAgYWxsUmVnaW9uczogJ0FsbCBSZWdpb25zJyxcbiAgICB9LFxuICAgIHRhYmxlOiB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIGZpcnN0X25hbWU6ICdOYW1lJyxcbiAgICAgICAgICAgIGxhc3RfbmFtZTogJ0xhc3QgTmFtZScsXG4gICAgICAgICAgICBtb3RoZXJfbGFzdF9uYW1lOiAnTW90aGVycyBMYXN0IE5hbWUnLFxuICAgICAgICAgICAgdXNlcm5hbWU6ICdVc2VyJyxcbiAgICAgICAgICAgIGVtYWlsOiAnRU1haWwnLFxuICAgICAgICAgICAgZW1wbG95ZWVfbnVtYmVyOiAnRW1wbG95ZWUgTnVtYmVyJyxcbiAgICAgICAgICAgIHJvbFNlbGVjdGVkOiAnUm9sZScsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB0b2FzdDoge1xuICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0Vycm9yIHdpdGggdGhlIFJlcXVlc3QuJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciB3aXRoIHRoZSBSZXF1ZXN0LicsXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVXNlciBoYXMgYmVlbiBjcmVhdGVkIHN1Y2Nlc2Z1bGx5LiAnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWxldGU6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MgTm90aWZpY2F0aW9uLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1VzZXIgaGFzIGJlZW4gZGVsZXRlZCBzdWNjZXNmdWxseS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVXNlciBoYXMgYmVlbiBlZGl0ZWQgc3VjY2Vzc2Z1bGx5LicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRvd25sb2FkRGF0YToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnU3VjY2VzcyBOb3RpZmljYXRpb24uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUmVwb3J0IGRvd25sb2FkZWQgc3VjY2Vzc2Z1bGx5LicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtb2RhbDoge1xuICAgICAgICBjcmVhdGVNb2RhbDoge1xuICAgICAgICAgICAgdGl0bGU6ICdDcmVhdGUgdXNlcicsXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRNb2RhbDoge1xuICAgICAgICAgICAgdGl0bGU6ICdFZGl0YSBVc2VyJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2F2ZTogJ1NhdmUnLFxuICAgICAgICAgICAgY3JlYXRlOiAnQ3JlYXRlJyxcbiAgICAgICAgfSxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHN0YXJ0RGF0ZTogJ1N0YXJ0IERhdGUnLFxuICAgIGVuZERhdGU6ICdFbmQgRGF0ZScsXG4gICAgaW5wdXQ6IHtcbiAgICAgICAgc2VhcmNoOiB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlYXJjaCBieSBuYW1lIG9yIGVtcGxveWVlIG51bWJlcicsXG4gICAgICAgIH0sXG4gICAgICAgIG1pc3Npb246IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnTWlzc2lvbicsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIGNsZWFyRGF0ZTogJ0NsZWFuIERhdGVzJyxcbiAgICAgICAgZ2VuZXJhdGVEYXRhOiAnR2VuZXJhdGUgRGF0YScsXG4gICAgfSxcbiAgICB0b3RhbDoge1xuICAgICAgICBjYXB0dXJlczogJ0NhcHR1cmVzIFRvdGFsJyxcbiAgICAgICAgdmFsaWRhdGVkOiAnVmFsaWRhdGVkIFRvdGFsJyxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgY2FwdHVyZXM6ICdDYXB0dXJlcyBIaXN0b3J5JyxcbiAgICAgICAgdmFsaWRhdGVkOiAnVmFsaWRhdGVkIEhpc3RvcnknLFxuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZGVyOiB7XG4gICAgICAgICAgICBlbXBsb3llZV9udW1iZXI6ICdFbXBsb3llZSBOdW1iZXInLFxuICAgICAgICAgICAgZnVsbE5hbWU6ICdOYW1lJyxcbiAgICAgICAgICAgIGVmZmljaWVuY3k6ICdQZXJjZW50YWdlJyxcbiAgICAgICAgICAgIHVzZXJWYWxpZGF0ZXM6ICdWYWxpZGF0ZWQgQ2FwdHVyZXMnLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgZmlsdGVyczoge1xuICAgICAgICBzZWFyY2hGaWVsZDogJ0J1c2NhciBwb3Igbm9tYnJlIG8gY8OzZGlnbyBkZWwgcHJvZHVjdG8nLFxuICAgIH0sXG4gICAgYWN0aW9uczoge1xuICAgICAgICBzZWFyY2g6ICdCdXNjYXInLFxuICAgICAgICBnZW5lcmF0ZVJlcG9ydDogJ0dFTkVSQVIgUkVQT1JURScsXG4gICAgICAgIGNsZWFuRmlsdGVyOiAnTGltcGlhciBmaWx0cm9zJyxcbiAgICAgICAgZG93bmxvYWQ6ICdEZXNjYXJnYXInLFxuICAgICAgICBjb21wYXJhdGl2ZUNoYXJ0OiAnR3JhZmljYXIgY29tcGFyYXRpdm9zJyxcbiAgICAgICAgZ2VvcmVmZXJlbmNlOiAnR2VvcmVmZXJlbmNpYScsXG4gICAgICAgIGdldEN1cnJlbnRSZXBvcnQ6ICdWRVIgTElTVEEgQUNUVUFMJyxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnTWFyY2FzJyxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBuYW1lOiAnTm9tYnJlJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRvYXN0OiB7XG4gICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRXJyb3IgY29uIGxhIHBldGljacOzbi4nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIGNvbiBsYSBwZXRpY2nDs24uJyxcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBjcmVhZG8gbGEgbWFyY2EgY29ycmVjdGFtZW50ZS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBlbGltaW5hZG8gbGEgbWFyY2EgY29ycmVjdGFtZW50ZS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZWRpdGFkbyBsYSBtYXJjYSBjb3JyZWN0YW1lbnRlLicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRvd25sb2FkRGF0YToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZGVzY2FyZ2FkbyBlbCByZXBvcnRlIGV4aXRvc2FtZW50ZS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgICAgY3JlYXRlTW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ3JlYXIgbWFyY2EnLFxuICAgICAgICAgICAgc2VhcmNoOiAnQnVzY2FyIHVuYSBtYXJjYScsXG4gICAgICAgICAgICBzZWFyY2hCeU5hbWU6ICdCdXNjYXIgcG9yIG5vbWJyZSAnLFxuICAgICAgICB9LFxuICAgICAgICBlZGl0TW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdGFyIG1hcmNhJyxcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aW9uczoge1xuICAgICAgICAgICAgYWRkOiAnQcOxYWRpciBtYXJjYScsXG4gICAgICAgICAgICBkb3dubG9hZDogJ0Rlc2NhcmdhciBSZXBvcnRlJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2F2ZTogJ0d1YXJkYXInLFxuICAgICAgICAgICAgY3JlYXRlOiAnQ3JlYXInLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdEZXRhbGxlcyBkZSBjYXB0dXJhJyxcbiAgICBpbnB1dDoge1xuICAgICAgICBjYXB0dXJlSWQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ2FwdHVyYScsXG4gICAgICAgIH0sXG4gICAgICAgIHByaWNlOiB7XG4gICAgICAgICAgICBsYWJlbDogJ1ByZWNpbycsXG4gICAgICAgIH0sXG4gICAgICAgIHByaWNlV2l0aFByb21vdGlvbjoge1xuICAgICAgICAgICAgbGFiZWw6ICdQcmVjaW8gZGUgcHJvbW9jacOzbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJhcmNvZGU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ8OzZGlnbyBkZSBiYXJyYXMnLFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBsYWJlbDogJ05vbWJyZScsXG4gICAgICAgIH0sXG4gICAgICAgIGJyYW5kOiB7XG4gICAgICAgICAgICBsYWJlbDogJ01hcmNhJyxcbiAgICAgICAgfSxcbiAgICAgICAgdW5pdDoge1xuICAgICAgICAgICAgbGFiZWw6ICdVbmlkYWQnLFxuICAgICAgICB9LFxuICAgICAgICBzdG9yZToge1xuICAgICAgICAgICAgbGFiZWw6ICdDYWRlbmEnLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICBsYWJlbDogJ1RpcG8nLFxuICAgICAgICB9LFxuICAgICAgICBncm91cDoge1xuICAgICAgICAgICAgbGFiZWw6ICdHcnVwbycsXG4gICAgICAgIH0sXG4gICAgICAgIGxpbmU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnTMOtbmVhJyxcbiAgICAgICAgfSxcbiAgICAgICAgYW1vdW50OiB7XG4gICAgICAgICAgICBsYWJlbDogJ0dyYW1hamUgLyBDYW50aWRhZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGNhcHR1cmVEYXRlOiB7XG4gICAgICAgICAgICBsYWJlbDogJ0ZlY2hhIGRlIENhcHR1cmEnLFxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnRXN0YXR1cycsXG4gICAgICAgIH0sXG4gICAgICAgIHNjYW5uZWRCeToge1xuICAgICAgICAgICAgbGFiZWw6ICdFc2NhbmVhZG8nLFxuICAgICAgICB9LFxuICAgICAgICByZXZpZXdlZDoge1xuICAgICAgICAgICAgbGFiZWw6ICdSZXZpc2FkbycsXG4gICAgICAgIH0sXG4gICAgICAgIGJyYW5jaE9mZmljZToge1xuICAgICAgICAgICAgbGFiZWw6ICdzdWN1cnNhbCcsXG4gICAgICAgIH0sXG4gICAgICAgIG1haW5JbWFnZToge1xuICAgICAgICAgICAgbGFiZWw6ICdGb3RvIHByaW5jaXBhbCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByaWNlSW1hZ2U6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnRm90byBkZSBwcmVjaW8nLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGV0YWlsc0NvbnRhaW5lcjoge1xuICAgICAgICB0aXRsZTogJ0ZvdG8gZGUgcHJvbW9jacOzbicsXG4gICAgfSxcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIGNoYW5nZUltYWdlOiAnQ2FtYmlhciBpbWFnZW4nLFxuICAgICAgICBlZGl0SW5mb3JtYXRpb246ICdFZGl0YXIgaW5mb3JtYWNpw7NuJyxcbiAgICAgICAgc2F2ZUluZm9ybWF0aW9uOiAnR3VhcmRhciBpbmZvcm1hY2nDs24nLFxuICAgICAgICBjYW5jZWxJbmZvcm1hdGlvbjogJ0NhbmNlbGFyJyxcbiAgICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ0NBUFRVUkFTJyxcbiAgICBmaWx0ZXJzOiB7XG4gICAgICAgIHNlYXJjaEZpZWxkOiAnQnVzY2FyIHBvciBub21icmUgbyBjw7NkaWdvIGRlbCBwcm9kdWN0bycsXG4gICAgICAgIHN0YXJ0RGF0ZTogJ0Rlc2RlJyxcbiAgICAgICAgZW5kRGF0ZTogJ0hhc3RhJyxcbiAgICAgICAgd2l0aEltYWdlOiAnQ29uIGZvdG8nLFxuICAgICAgICB3aXRob3V0SW1hZ2U6ICdTaW4gZm90bycsXG4gICAgICAgIHN0YXR1c1JlamVjdGVkOiAnUmVjaGF6YWRvJyxcbiAgICAgICAgbm9ybWFsUHJpY2U6ICdQcmVjaW8gbm9ybWFsJyxcbiAgICAgICAgc3RhdHVzUGVuZGluZzogJ1BlbmRpZW50ZScsXG4gICAgICAgIHN0YXR1c1ZhbGlkYXRlZDogJ1ZhbGlkYWRvJyxcbiAgICAgICAgcHJpY2VXaXRoUHJvbW90aW9uOiAnUHJlY2lvIGRlIHByb21vY2nDs24nLFxuICAgICAgICBwYXJhbTogJ1BhcsOhbWV0cm8nLFxuICAgICAgICB2YWx1ZTogJ1ZhbG9yJyxcbiAgICAgICAgZ2VvbG9jYWxpdGF0aW9uOiAnR2VvbG9jYWxpemFjaW9uZXMnLFxuICAgIH0sXG4gICAgYWN0aW9uczoge1xuICAgICAgICBzZWFyY2g6ICdCdXNjYXInLFxuICAgICAgICBjbGVhbkZpbHRlcjogJ0xpbXBpYXIgZmlsdHJvcycsXG4gICAgICAgIGV4cG9ydEdlb0RhdGE6ICdFeHBvcnRhciBEYXRvcyBHZW9yZWZlcmVuY2lhJyxcbiAgICB9LFxuICAgIG9wdGlvbnNDYXRhbG9nOiB7XG4gICAgICAgIGJyYW5kc0NhdGFsb2c6ICdNYXJjYScsXG4gICAgICAgIGdyb3Vwc0NhdGFsb2c6ICdHcnVwbycsXG4gICAgICAgIGxpbmVzQ2F0YWxvZzogJ0zDrW5lYScsXG4gICAgICAgIHN0b3Jlc0NhdGFsb2c6ICdDYWRlbmEnLFxuICAgICAgICB1bml0c0NhdGFsb2c6ICdVbmlkYWQnLFxuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZDoge1xuICAgICAgICAgICAgc2VsZWN0ZWQ6ICdTZWxlY2Npb25hcicsXG4gICAgICAgICAgICBpZDogJ0NhcHR1cmEnLFxuICAgICAgICAgICAgcGhvdG9fbWFpbjogJ0ZvdG8gcHJpbmNpcGFsJyxcbiAgICAgICAgICAgIHBob3RvX3ByaWNlOiAnRm90byBwcmVjaW8nLFxuICAgICAgICAgICAgYmFyY29kZTogJ0PDs2RpZ28gZGUgYmFycmFzJyxcbiAgICAgICAgICAgIHByb2R1Y3Q6ICdQcm9kdWN0bycsXG4gICAgICAgICAgICBicmFuZDogJ01hcmNhJyxcbiAgICAgICAgICAgIHR5cGU6ICdUaXBvJyxcbiAgICAgICAgICAgIGNoYWluOiAnQ2FkZW5hIGNvbWVyY2lhbCcsXG4gICAgICAgICAgICBicmFuY2g6ICdTdWN1cnNhbCcsXG4gICAgICAgICAgICBzY2FubmVkX2J5OiAnQ2FwdHVyaXN0YScsXG4gICAgICAgICAgICByZXZpZXdlZDogJ1ZhbGlkYWRvcicsXG4gICAgICAgICAgICBzdGF0dXM6ICdFc3RhZG8nLFxuICAgICAgICAgICAgZ3JhbW1hZ2VfcXVhbnRpdHk6ICdDYW50aWRhZCcsXG4gICAgICAgICAgICB1bml0OiAnVW5pZGFkJyxcbiAgICAgICAgICAgIHVuaXRfcHJpY2U6ICdQcmVjaW8gdW5pdGFyaW8nLFxuICAgICAgICAgICAgZ3JvdXA6ICdHcnVwbycsXG4gICAgICAgICAgICBsaW5lOiAnTMOtbmVhJyxcbiAgICAgICAgICAgIHByb2R1Y3RfY3JlYXRlZF9kYXRlOiAnRmVjaGEgZGUgYWx0YSBkZSBwcm9kdWN0bycsXG4gICAgICAgICAgICBsb3dlcl9wcmljZTogJ1ByZWNpbyBtw61uaW1vJyxcbiAgICAgICAgICAgIGhpZ2hlc3RfcHJpY2U6ICdQcmVjaW8gbcOheGltbycsXG4gICAgICAgICAgICBjYXB0dXJlX2RhdGU6ICdGZWNoYSBkZSBjYXB0dXJhJyxcbiAgICAgICAgICAgIGNhcHR1cmVfcHJpY2U6ICdQcmVjaW8gZGUgY2FwdHVyYScsXG4gICAgICAgICAgICBhY3Rpb25zOiAnQWNjaW9uZXMnLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBzdGF0dXM6IHtcbiAgICAgICAgdmFsaWRhdGVkOiAnVmFsaWRhZG8nLFxuICAgICAgICBwZW5kaW5nOiAnUGVuZGllbnRlJyxcbiAgICB9LFxuXG4gICAgdW5pdHM6IHtcbiAgICAgICAgY206ICdDZW50aW1ldHJvJyxcbiAgICAgICAgbTogJ01ldHJvJyxcbiAgICAgICAgbWw6ICdNaWxpbGl0cm8nLFxuICAgICAgICBsdDogJ0xpdHJvJyxcbiAgICAgICAgbWc6ICdNaWxpZ3JhbW8nLFxuICAgICAgICBnOiAnR3JhbW8nLFxuICAgICAgICBrZzogJ0tpbG9ncmFtbycsXG4gICAgICAgIHBpZXphOiAnUGllemEnLFxuICAgIH0sXG5cbiAgICBtb2RhbDoge1xuICAgICAgICBkZWxldGU6IHtcbiAgICAgICAgICAgIGJ1dHRvbkFjY2VwdExhYmVsOiAnRWxpbWluYXInLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0VzdGEgb3BlcmFjacOzbiBlcyBwZXJtYW5lbnRlIMK/ZGVzZWEgZWxpbWluYXIgZXN0ZSBlbGVtZW50bz8nLFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnQ2F0w6Fsb2dvcycsXG4gICAgb3B0aW9uczoge1xuICAgICAgICBicmFuZHM6ICdNYXJjYXMnLFxuICAgICAgICB1bml0aWVzOiAnVW5pZGFkZXMnLFxuICAgICAgICBncm91cHM6ICdHcnVwb3MnLFxuICAgICAgICBsaW5lczogJ0zDrW5lYXMnLFxuICAgICAgICBjaGFpbjogJ0NhZGVuYXMnLFxuICAgICAgICByZWdpb246ICdSZWdpb25lcycsXG4gICAgICAgIHVzZXJzOiAnVXN1YXJpb3MnLFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdDYWRlbmFzJyxcbiAgICBzZWFyY2g6ICdCdXNjYXIgdW5hIGNhZGVuYScsXG4gICAgc2VhcmNoQnlOYW1lOiAnQnVzY2FyIHBvciBub21icmUgJyxcbiAgICBhY3Rpb25zOiB7XG4gICAgICAgIGFkZDogJ0HDsWFkaXIgY2FkZW5hJyxcbiAgICAgICAgZG93bmxvYWQ6ICdEZXNjYXJnYXIgUmVwb3J0ZScsXG4gICAgfSxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBpZDogJ0lkJyxcbiAgICAgICAgICAgIG5hbWU6ICdOb21icmUnLFxuICAgICAgICAgICAgYWxpYXM6ICdBbGlhcycsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB0b2FzdDoge1xuICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0Vycm9yIGNvbiBsYSBwZXRpY2nDs24uJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBjb24gbGEgcGV0aWNpw7NuLicsXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgY3JlYWRvIGxhIGNhZGVuYSBjb3JyZWN0YW1lbnRlLiAnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWxldGU6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NlIGhhIGVsaW1pbmFkbyBsYSBjYWRlbmEgY29ycmVjdGFtZW50ZS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZWRpdGFkbyBsYSBjYWRlbmEgY29ycmVjdGFtZW50ZS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkb3dubG9hZERhdGE6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NlIGhhIGRlc2NhcmdhZG8gZWwgcmVwb3J0ZSBleGl0b3NhbWVudGUuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1vZGFsOiB7XG4gICAgICAgIGNyZWF0ZU1vZGFsOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0NyZWFyIGNhZGVuYScsXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRNb2RhbDoge1xuICAgICAgICAgICAgdGl0bGU6ICdFZGl0YXIgY2FkZW5hJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2F2ZTogJ0d1YXJkYXInLFxuICAgICAgICAgICAgY3JlYXRlOiAnQ3JlYXInLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGFiczoge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBwcmljZUxpc3Q6ICdHcsOhZmljYXMgLSBQcmVjaW8gZGUgbGlzdGEnLFxuICAgICAgICAgICAgdW5pdGFyeVByaWNlOiAnR3LDoWZpY2FzIC0gUHJlY2lvIHVuaXRhcmlvJyxcbiAgICAgICAgICAgIGhpc3Rvcnk6ICdIaXN0b3JpYWwgZGUgcHJlY2lvcycsXG4gICAgICAgIH0sXG4gICAgICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBkYXRlOiAnRmVjaGEnLFxuICAgICAgICAgICAgICAgIHByaWNlOiAnUHJlY2lvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBzdGFydERhdGU6ICdGZWNoYSBpbmljaWFsJyxcbiAgICBlbmREYXRlOiAnRmVjaGEgZmluYWwnLFxuICAgIHNlYXJjaDogJ0J1c2NhciBjYXB0dXJhIHBvciBpZCcsXG4gICAgbW9kYWw6IHtcbiAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICBidXR0b25BY2NlcHRMYWJlbDogJ0VsaW1pbmFyJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFc3RhIG9wZXJhY2nDs24gZXMgcGVybWFuZW50ZSDCv2Rlc2VhIGVsaW1pbmFyIGVzdGUgZWxlbWVudG8/JyxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBzdGFydERhdGU6ICdGZWNoYSBpbmljaWFsJyxcbiAgICBlbmREYXRlOiAnRmVjaGEgZmluYWwnLFxuICAgIG1vZGFsOiB7XG4gICAgICAgIGRlbGV0ZToge1xuICAgICAgICAgICAgYnV0dG9uQWNjZXB0TGFiZWw6ICdFbGltaW5hcicsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXN0YSBvcGVyYWNpw7NuIGVzIHBlcm1hbmVudGUgwr9kZXNlYSBlbGltaW5hciBlc3RlIGVsZW1lbnRvPycsXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdHcnVwb3MnLFxuICAgIHNlYXJjaDogJ0J1c2NhciB1biBncnVwbycsXG4gICAgc2VhcmNoQnlOYW1lOiAnQnVzY2FyIHBvciBub21icmUgJyxcbiAgICBhY3Rpb25zOiB7XG4gICAgICAgIGFkZDogJ0HDsWFkaXIgZ3J1cG8nLFxuICAgICAgICBkb3dubG9hZDogJ0Rlc2NhcmdhciBSZXBvcnRlJyxcbiAgICB9LFxuICAgIHRhYmxlOiB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIG5hbWU6ICdOb21icmUnLFxuICAgICAgICAgICAgYWJicmV2aWF0aW9uOiAnQWJyZXZpYWNpw7NuJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRvYXN0OiB7XG4gICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRXJyb3IgY29uIGxhIHBldGljacOzbi4nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIGNvbiBsYSBwZXRpY2nDs24uJyxcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBjcmVhZG8gZWwgZ3J1cG8gY29ycmVjdGFtZW50ZS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBlbGltaW5hZG8gZWwgZ3J1cG8gY29ycmVjdGFtZW50ZS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZWRpdGFkbyBlbCBncnVwbyBjb3JyZWN0YW1lbnRlLicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRvd25sb2FkRGF0YToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZGVzY2FyZ2FkbyBlbCByZXBvcnRlIGV4aXRvc2FtZW50ZS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgICAgY3JlYXRlTW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ3JlYXIgZ3J1cG8nLFxuICAgICAgICB9LFxuICAgICAgICBlZGl0TW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdGFyIGdydXBvJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2F2ZTogJ0d1YXJkYXInLFxuICAgICAgICAgICAgY3JlYXRlOiAnQ3JlYXInLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdWYWxpZGFjacOzbicsXG4gICAgd2VsY29tZTogJ1NlbGVjY2lvbmUgdW5hIGNhcHR1cmEgcGFyYSBpbmljaWFyLicsXG4gICAgc2lkZWJhcjoge1xuICAgICAgICB0aXRsZTogJ0NhcHR1cmFzJyxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIG1pc3Npb246IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ01pc2nDs24nLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9kdWN0OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdQcm9kdWN0bycsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc2NhbkZpbHRlcjoge1xuICAgICAgICAgICAgYWxsOiAnVG9kb3MnLFxuICAgICAgICAgICAgd2l0aFByb2R1Y3Q6ICdDb24gcHJvZHVjdG8nLFxuICAgICAgICAgICAgd2l0aG91dFByb2R1Y3Q6ICdTaW4gcHJvZHVjdG8nLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBzY2FuOiB7XG4gICAgICAgIHRvcEJhcjoge1xuICAgICAgICAgICAgYmVpbmdWYWxpZGF0ZWQ6ICdFc3RlIHJlZ2lzdHJvIGVzdMOhIHNpZW5kbyB2YWxpZGFkbywgc2VsZWNjaW9uYSB1bm8gZGlmZXJlbnRlJyxcbiAgICAgICAgICAgIHdpdGhvdXROdW1iZXI6ICdTaW4gTsO6bWVybycsXG4gICAgICAgICAgICB3aXRob3V0TWlzc2lvbjogJ1NpbiBNaXNpw7NuJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJvZHVjdEltYWdlOiB7XG4gICAgICAgICAgICBsYWJlbDogJ1Byb2R1Y3RvJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJpY2VJbWFnZToge1xuICAgICAgICAgICAgbGFiZWw6ICdQcmVjaW8nLFxuICAgICAgICB9LFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgYmFyY29kZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQ8OzZGlnbyBkZSBiYXJyYXMnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmljZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnUHJlY2lvJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvbW90aW9uUHJpY2U6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1ByZWNpbyBkZSBwcm9tb2Npw7NuJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcmU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0NhZGVuYScsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdFbCBjYW1wbyBlcyByZXF1ZXJpZG8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZHJlc3M6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0RpcmVjY2nDs24nLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZGl0aW9uYWxDb21tZW50czoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQ29tZW50YXJpb3MgYWRpY2lvbmFsZXMnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbjoge1xuICAgICAgICAgICAgc2hvd1BpY3R1cmU6ICdWZXIgZm90bycsXG4gICAgICAgICAgICByZWplY3Q6ICdSZWNoYXphcicsXG4gICAgICAgICAgICB2YWxpZGF0ZTogJ1ZhbGlkYXIgY2FwdHVyYScsXG4gICAgICAgICAgICB2YWxpZGF0ZUFuZEFkZDogJ1ZhbGlkYXIgeSBhZ3JlZ2FyJyxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgcHJvZHVjdDoge1xuICAgICAgICB0aXRsZTogJ0NyZWFyIG51ZXZvIHByb2R1Y3RvJyxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ05vbWJyZSBkZWwgcHJvZHVjdG8nLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYXJjb2RlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDw7NkaWdvIGRlIGJhcnJhcycsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdFbCBjYW1wbyBlcyByZXF1ZXJpZG8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyYW5kOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdNYXJjYScsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdFbCBjYW1wbyBlcyByZXF1ZXJpZG8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFtb3VudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQ2FudGlkYWQnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bml0OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdVbmlkYWQnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBncm91cDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnR3J1cG8nLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdMw61uZWEnLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdUaXBvJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBvcHRpb246IHtcbiAgICAgICAgICAgIGNoYW5nZUltYWdlOiAnQ2FtYmlhciBpbWFnZW4nLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBtb2RhbDoge1xuICAgICAgICByZWplY3Q6IHtcbiAgICAgICAgICAgIHN1YmplY3Q6ICdTZWxlY2Npb25hIHVuIG1vdGl2byBkZSByZWNoYXpvJyxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0b2FzdDoge1xuICAgICAgICBzZW5kQ3JpdGVyaW9uOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4gJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgcmVjaGF6YWRvIGxhIGNhcHR1cmEgY29ycmVjdGFtZW50ZS4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIGVycm9yLiAnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBjb24gbGEgcGV0aWNpw7NuLicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJhZGlvTWFwRmlyc3Q6IHtcbiAgICAgICAgYmx1cnJ5OiAnQ2FwdHVyYSBib3Jyb3NhJyxcbiAgICAgICAgZmFyQXdheTogJ0NhcHR1cmEgbGVqYW5hJyxcbiAgICAgICAgZGFyazogJ0NhcHR1cmEgb3NjdXJhJyxcbiAgICAgICAgaW5jb21wbGV0ZTogJ0Rlc2NyaXBjacOzbiBkZSBwcm9kdWN0byBpbmNvbXBsZXRhJyxcbiAgICAgICAgZG9lc250TWF0Y2g6ICdQcm9kdWN0b3MgcXVlIG5vIGNvaW5jaWRlbicsXG4gICAgfSxcblxuICAgIHJhZGlvU2Vjb25kOiB7XG4gICAgICAgIG91dHNpZGVTaG9wOiAnQ2FwdHVyYSBmdWVyYSBkZSB0aWVuZGEnLFxuICAgICAgICBzaG9wVGlja2V0OiAnQ2FwdHVyYSBkZSB0aWNrZXRzIGRlIGNvbXByYScsXG4gICAgICAgIGFub3RoZXJDZWxsOiAnQ2FwdHVyYSB0b21hZGEgYSBvdHJvIGNlbHVsYXInLFxuICAgICAgICB0ZXN0U2NhbjogJ1BydWViYXMnLFxuICAgIH0sXG5cbiAgICBoaXN0b3J5OiB7XG4gICAgICAgIHJlY2VudDogJ03DoXMgcmVjaWVudGUnLFxuICAgICAgICBtb3N0RXhwZW5zaXZlOiAnTcOhcyBhbHRvJyxcbiAgICAgICAgY2hlYXBlc3Q6ICdNw6FzIGJham8nLFxuICAgICAgICBjaGVhcGVzdFdpdGhQcm9tb3Rpb246ICdNw6FzIGJham8gY29uIHByb21vY2nDs24nLFxuICAgIH0sXG59XG4iLCIvLyBFU1xuaW1wb3J0IG5hdmJhciBmcm9tICcuL25hdmJhcidcbmltcG9ydCBob21lIGZyb20gJy4vaG9tZSdcbmltcG9ydCBtaXNzaW9ucyBmcm9tICcuL21pc3Npb25zJztcbmltcG9ydCBjYXB0dXJlcyBmcm9tICcuL2NhcHR1cmVzJztcbmltcG9ydCBjYXB0dXJlIGZyb20gJy4vY2FwdHVyZSc7XG5pbXBvcnQgY2F0YWxvZ3MgZnJvbSAnLi9jYXRhbG9ncyc7XG5pbXBvcnQgcHJvZmlsZSBmcm9tICcuL3Byb2ZpbGUnO1xuaW1wb3J0IHByb2R1Y3RzIGZyb20gJy4vcHJvZHVjdHMnO1xuaW1wb3J0IHByb2R1Y3QgZnJvbSAnLi9wcm9kdWN0JztcbmltcG9ydCByYW5raW5ncyBmcm9tICcuL3JhbmtpbmdzJztcbmltcG9ydCBncmFwaFRhYiBmcm9tICcuL2dyYXBoLXRhYic7XG5pbXBvcnQgYWR2YW5jZWRTZWFyY2ggZnJvbSAnLi9hZHZhbmNlZC1zZWFyY2gnO1xuaW1wb3J0IHRhYmxlVGFiIGZyb20gJy4vdGFibGUtdGFiJztcbmltcG9ydCBwcm9kdWN0VGFiIGZyb20gJy4vcHJvZHVjdC10YWInO1xuaW1wb3J0IHNjYW5uZXJzVGFiIGZyb20gJy4vc2Nhbm5lcnMtdGFiJztcbmltcG9ydCB2YWxpZGF0b3JzVGFiIGZyb20gJy4vdmFsaWRhdG9ycy10YWInO1xuaW1wb3J0IGJyYW5kc0NhdGFsb2cgZnJvbSAnLi9icmFuZHMtY2F0YWxvZyc7XG5pbXBvcnQgdW5pdHNDYXRhbG9nIGZyb20gJy4vdW5pdHMtY2F0YWxvZyc7XG5pbXBvcnQgZ3JvdXBzQ2F0YWxvZyBmcm9tICcuL2dyb3Vwcy1jYXRhbG9nJztcbmltcG9ydCBsaW5lc0NhdGFsb2cgZnJvbSAnLi9saW5lcy1jYXRhbG9nJztcbmltcG9ydCBjaGFpbnNDYXRhbG9nIGZyb20gJy4vY2hhaW5zLWNhdGFsb2cnO1xuaW1wb3J0IHJlZ2lvbnNDYXRhbG9nIGZyb20gJy4vcmVnaW9ucy1jYXRhbG9nJztcbmltcG9ydCB1c2Vyc0NhdGFsb2cgZnJvbSAnLi91c2Vycy1jYXRhbG9nJztcbmltcG9ydCB0YWJsZSBmcm9tICcuL3RhYmxlJztcbmltcG9ydCBncmFwaFRhYkNvbXBhcmUgZnJvbSAnLi9ncmFwaC10YWItY29tcGFyZSdcbmltcG9ydCBzdGF0aXN0aWNSZXBvcnQgZnJvbSAnLi9zdGF0aXN0aWMtcmVwb3J0J1xuaW1wb3J0IHByb2R1Y3RSZXBvcnQgZnJvbSAnLi9wcm9kdWN0LXJlcG9ydCdcbmltcG9ydCBzY2Fuc1JlcG9ydCBmcm9tICcuL3NjYW5zLXJlcG9ydCdcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hdmJhcixcbiAgICBob21lLFxuICAgIHRhYmxlLFxuICAgIG1pc3Npb25zLFxuICAgIGNhcHR1cmVzLFxuICAgIGNhcHR1cmUsXG4gICAgY2F0YWxvZ3MsXG4gICAgcHJvZmlsZSxcbiAgICBwcm9kdWN0cyxcbiAgICBwcm9kdWN0LFxuICAgIHJhbmtpbmdzLFxuICAgIGdyYXBoVGFiLFxuICAgIGFkdmFuY2VkU2VhcmNoLFxuICAgIHRhYmxlVGFiLFxuICAgIHByb2R1Y3RUYWIsXG4gICAgc2Nhbm5lcnNUYWIsXG4gICAgdmFsaWRhdG9yc1RhYixcbiAgICBicmFuZHNDYXRhbG9nLFxuICAgIHVuaXRzQ2F0YWxvZyxcbiAgICBncm91cHNDYXRhbG9nLFxuICAgIGxpbmVzQ2F0YWxvZyxcbiAgICBjaGFpbnNDYXRhbG9nLFxuICAgIHJlZ2lvbnNDYXRhbG9nLFxuICAgIHVzZXJzQ2F0YWxvZyxcbiAgICBncmFwaFRhYkNvbXBhcmUsXG4gICAgc3RhdGlzdGljUmVwb3J0LFxuICAgIHByb2R1Y3RSZXBvcnQsXG4gICAgc2NhbnNSZXBvcnQsXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdMw61uZWFzJyxcbiAgICBzZWFyY2g6ICdCdXNjYXIgdW5hIGzDrW5lYScsXG4gICAgc2VhcmNoQnlOYW1lOiAnQnVzY2FyIHBvciBub21icmUgJyxcbiAgICBhY3Rpb25zOiB7XG4gICAgICAgIGFkZDogJ0HDsWFkaXIgbMOtbmVhJyxcbiAgICAgICAgZG93bmxvYWQ6ICdEZXNjYXJnYXIgUmVwb3J0ZScsXG4gICAgfSxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBuYW1lX2xpbmU6ICdMw61uZWEnLFxuICAgICAgICAgICAgbmFtZV9ncm91cDogJ0dydXBvJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRvYXN0OiB7XG4gICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRXJyb3IgY29uIGxhIHBldGljacOzbi4nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIGNvbiBsYSBwZXRpY2nDs24uJyxcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBjcmVhZG8gbGEgbMOtbmVhIGNvcnJlY3RhbWVudGUuICcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZWxpbWluYWRvIGxhIGzDrW5lYSBjb3JyZWN0YW1lbnRlLiAnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlZGl0OiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBlZGl0YWRvIGxhIGzDrW5lYSBjb3JyZWN0YW1lbnRlLicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRvd25sb2FkRGF0YToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZGVzY2FyZ2FkbyBlbCByZXBvcnRlIGV4aXRvc2FtZW50ZS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgICAgY3JlYXRlTW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ3JlYXIgbMOtbmVhJyxcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdE1vZGFsOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0VkaXRhciBsw61uZWEnLFxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzYXZlOiAnR3VhcmRhcicsXG4gICAgICAgICAgICBjcmVhdGU6ICdDcmVhcicsXG4gICAgICAgIH0sXG4gICAgfSxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ01JU0lPTkVTJyxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkOiB7XG4gICAgICAgICAgICB0aXRsZTogJ1TDrXR1bG8nLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdEZXNjcmlwY2nDs24nLFxuICAgICAgICAgICAgY2FwdHVyZV9wb2ludHM6ICdQdW50b3MgcG9yIGNhcHR1cmFzJyxcbiAgICAgICAgICAgIG1pc3Npb25fcG9pbnRzOiAnUHVudG9zIHBvciBtaXNpw7NuJyxcbiAgICAgICAgICAgIHN0YXJ0X2RhdGU6ICdGZWNoYSBkZSBpbmljaW8nLFxuICAgICAgICAgICAgZW5kX2RhdGU6ICdGZWNoYSBkZSBmaW4nLFxuICAgICAgICAgICAgcmVnaW9uczogJ1JlZ2nDs24nLFxuICAgICAgICAgICAgYWN0aW9uczogJ0FjY2lvbmVzJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWRkOiAnTnVldmEgbWlzacOzbicsXG4gICAgfSxcblxuICAgIHRvYXN0OiB7XG4gICAgICAgIGNyZWF0ZU1pc3Npb246IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLiAnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBjcmVhZG8gbGEgbWlzacOzbiBjb3JyZWN0YW1lbnRlLiAnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIGVycm9yLiAnLFxuICAgICAgICAgICAgICAgIGR1cGxpY2F0ZWRNZXNzYWdlOiAnRWwgVGl0dWxvIHNlIGR1cGxpY8OzLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0FsZ28gc2FsacOzIG1hbC4gJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIG1vZGFsOiB7XG4gICAgICAgIGRpYWxvZzoge1xuICAgICAgICAgICAgbWVzc2FnZTogJ0VzdGEgb3BlcmFjacOzbiBubyBzZSBwdWVkZSByZWFsaXphciBkZWJpZG8gYSBxdWUgbGEgbWlzacOzbiB0aWVuZSBjYXB0dXJhcyBhc29jaWFkYXMnLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGFjZXB0OiAnQWNlcHRhcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBhZGQ6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnTnVldmEgbWlzacOzbicsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2FuY2VsOiAnQ2FuY2VsYXInLFxuICAgICAgICAgICAgICAgIGNyZWF0ZTogJ0NyZWFyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXQ6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdGFyIG1pc2nDs24nLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNhbmNlbDogJ0NhbmNlbGFyJyxcbiAgICAgICAgICAgICAgICBlZGl0OiAnZWRpdGFyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnVMOtdHVsbyAob2JsaWdhdG9yaW8pJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnRGVzY3JpcGNpw7NuIChvYmxpZ2F0b3JpbyAvIG3DoXhpbW8gMjU1IGNhcmFjdGVyZXMpJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogJ0xhIGRlc2NyaXBjacOzbiBkZWJlIHRlbmVyIHBvciBsbyBtZW5vcyA1IGNhcmFjdGVyZXMuJyxcbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAnTGEgZGVzY3JpcGNpw7NuIGRlYmUgdGVuZXIgbcOheGltbyAyNTUgY2FyYWN0ZXJlcy4nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhcnREYXRlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGZWNoYSBkZSBpbmljaW8nLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAnTGEgZmVjaGEgZGUgaW5pY2lvIG5vIGVzIHbDoWxpZGEnLFxuICAgICAgICAgICAgICAgICAgICBncmVhdGVyVGhhbjogJ0xhIGZlY2hhIGRlIGluaWNpbyBkZWJlIHNlciBtYXlvciBhbCBkw61hIGRlIGF5ZXIuJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuZERhdGU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0ZlY2hhIGRlIGZpbicsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICdMYSBmZWNoYSBkZSBmaW4gbm8gZXMgdsOhbGlkYScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWdpb246IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1NlbGVjY2lvbmEgdW5hIHJlZ2nDs24nLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAnRGViZXMgc2VsZWNjaW9uYXIgcG9yIGxvIG1lbm9zIHVuYSByZWdpw7NuJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pc3Npb25Qb2ludHM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1B1bnRhamUgZGUgbGEgbWlzacOzbicsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQ6ICdFbCBwdW50YWplIGRlYmUgc2VyIHVuIG7Dum1lcm8gdsOhbGlkbycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXB0dXJlUG9pbnRzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdQdW50YWplIGRlIGNhcHR1cmEnLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkOiAnRWwgcHVudGFqZSBkZWJlIHNlciB1biBuw7ptZXJvIHbDoWxpZG8nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIG9wdGlvbjoge1xuICAgICAgICB2YWxpZGF0aW9uczogJ1ZhbGlkYWNpw7NuJyxcbiAgICAgICAgbWlzc2lvbnM6ICdNaXNpb25lcycsXG4gICAgICAgIGNhcHR1cmVzOiAnQ2FwdHVyYXMnLFxuICAgICAgICBwcm9kdWN0czogJ1Byb2R1Y3RvcycsXG4gICAgICAgIHJhbmtpbmdzOiAnUmFua2luZ3MnLFxuICAgICAgICBjYXRhbG9nczogJ0NhdMOhbG9nb3MnLFxuICAgICAgICBlZGl0UHJvZmlsZTogJ0VkaXRhciBwZXJmaWwnLFxuICAgICAgICBzaWduT3V0OiAnQ2VycmFyIHNlc2nDs24nLFxuICAgICAgICByZXBvcnRzOiB7XG4gICAgICAgICAgICBnZW9sb2NhbGl6YXRpb246ICdSZXBvcnRlIGRlIGdlb2xvY2FsaXphY2nDs24nLFxuICAgICAgICAgICAgc3RhdGlzdGljOiAnUmVwb3J0ZSBjb21wYXJhdGl2byBkZSBwcmVjaW9zJyxcbiAgICAgICAgICAgIHByb2R1Y3Q6ICdSZXBvcnRlIGRlIHByb2R1Y3RvJyxcbiAgICAgICAgICAgIHNjYW5zOiAnUmVwb3J0ZSBkZSBjYXB0dXJhcycsXG4gICAgICAgIH0sXG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnUmVwb3J0ZSBkZSBQcm9kdWN0bycsXG4gICAgbmV3U2VyYWNoOiAnTnVldmEgQsO6c3F1ZWRhJyxcbiAgICBwbGFjZWhvbGRlclNlYXJjaDogJ05vbWJyZSAvIEPDs2RpZ28nLFxuICAgIHNlbGVjdGVkOiAnU2VsZWNjaW9uYWRvJyxcbiAgICBzZWFyY2g6ICdCdXNjYXInLFxuICAgIG15TGlzdDogJ1ZlciBtaSBsaXN0YScsXG4gICAgZ2VuZXJhbFNlYXJjaDogJ0LDunNxdWVkYSBHZW5lcmFsJyxcbiAgICBzYXZlTGlzdDogJ0d1YXJkYXIgYSBtaSBsaXN0YScsXG4gICAgZ3JhcGhpYzogJ0dyw6FmaWNhJyxcbiAgICBjbGVhckdyYXBoaWM6ICdMaW1waWFyIEdyw6FmaWNhJyxcbiAgICBlbXB0eVN0YXRlOiAnSGFjZXIgYsO6c3F1ZWRhIHBhcmEgdmVyIHJlc3VsdGFkb3MnLFxuICAgIGVtcHRHcmFwaHlTdGF0ZTogJ0dyYWZpY2FyIHBhcmEgdmVyIHJlc3VsdGFkb3MnLFxuICAgIHNhdmVQcm9kdWN0czogJ1Byb2R1Y3RvcyBoYW4gc2lkbyBhZ3JlZ2Fkb3MgYSBsYSBsaXN0YScsXG4gICAgc2F2ZVByb2R1Y3RzRXJyb3I6ICdVbiBlcnJvciBvY3VycmlvIG1pZW50cmFzIHNlIGd1YXJkYWJhIGxhIGxpc3RhJyxcbiAgICBwYXJhbWV0ZXI6ICdQYXJhbWV0cm9zJyxcbiAgICB2YWx1ZXM6ICdWYWxvcicsXG4gICAgc3RhcnREYXRlOiAnRmVjaGEgSW5pY2lvJyxcbiAgICBlbmREYXRlOiAnRmVjaGEgVGVybWluYWNpw7NuJyxcbiAgICBkZWxldGVGaWx0ZXJzOiBcIkxpbXBpYXIgRmlsdHJvc1wiLFxuICAgIGRvd25sb2FkOiBcIkRlc2NhcmdhclwiLFxuICAgIG5hbWVPckNvZGU6IFwiTm9tYnJlIC8gQ8OzZGlnbyBkZWwgcHJvZHVjdG9cIixcbiAgICBzdWNjZXNzRG93bmxvYWQ6IFwiUmVwb3J0ZSBkZXNjYXJnYWRvIGV4aXRvc2FtZW50ZVwiLFxuICAgIGRlbGV0ZUZyb21MaXN0OiBcIkJvcnJhciBkZSBtaSBsaXN0YVwiLFxuICAgIHN1Y2Nlc3NEZWxldGU6IFwiTG9zIHByb2R1Y3RvcyBoYW4gc2lkbyBib3JyYWRvcyBkZSBsYSBsaXN0YVwiLFxuICAgIGVycm9yRGVsZXRlOiBcIlVuIGVycm9yIG9jdXJyaW8gbWllbnRyYXMgc2UgcmVtb3ZpYW4gcHJvZHVjdG9zIGRlIGxhIGxpc3RhXCIsXG4gICAgZXJyb3JEb3dubG9hZDogXCJVbiAgZXJyb3Igb2N1cnJpbyBtaWVudHJhcyBzZSBkZXNjYXJnYWJhIGVsIHJlcG9ydGVcIixcbiAgICBub1NlbGVjdGVkOiBcIk5vIGhheSBwcm9kdWN0b3Mgc2VsZWNjaW9uYWRvcy4uLi4uXCIsXG4gICAgY2FyZDoge1xuICAgICAgICBpZDogXCJJRDpcIixcbiAgICAgICAgYmFyY29kZTogXCJDw5NESUdPIERFIEJBUlJBUzpcIixcbiAgICAgICAgYnJhbmQ6IFwiTUFSQ0E6XCIsXG4gICAgICAgIGxpbmU6IFwiTElORUE6XCIsXG4gICAgICAgIGdyb3VwOiBcIkdSVVBPOlwiLFxuICAgICAgICB1bml0OiBcIlVOSURBRDpcIixcbiAgICAgICAgdHlwZTogXCJUSVBPOlwiLFxuICAgICAgICBuYW1lOiBcIk5PTUJSRTpcIixcbiAgICAgICAgbG93ZXJfcHJpY2U6IFwiTUVOT1IgUFJFQ0lPOlwiLFxuICAgICAgICBoaWdoZXN0X3ByaWNlOiBcIk1BWU9SIFBSRUNJTzpcIixcbiAgICAgICAgZ3JhbW1hZ2U6IFwiR1JBTUFKRSAvIFVOSURBRDpcIixcbiAgICAgICAgcmVjZW50bHk6IFwiUmVjaWVudGVcIixcbiAgICAgICAgaGlnaGVyOiBcIk3DoXMgYWx0b1wiLFxuICAgICAgICBsb3dlcjogXCJNw6FzIGJham9cIixcbiAgICAgICAgbG93ZXJQcm9tb3Rpb246IFwiTcOhcyBiYWpvIGNvbiBkZXNjdWVudG9cIixcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIGRldGFpbDp7XG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICBwcm9kdWN0SWQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0lEIFByb2R1Y3RvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYXJjb2RlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDw7NkaWdvIGRlIGJhcnJhcycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnTm9tYnJlJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg6ICdFbCBjYW1wbyBkZWJlIGNvbnRlbmVyIGFsIG1lbm9zIGRvcyBjYXJhY3RlcmVzJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyYW5kOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdNYXJjYScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnVGlwbycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ3JvdXA6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0dydXBvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdMw61uZWEnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFtb3VudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnR3JhbWFqZSAvIENhbnRpZGFkJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZDogJ0VsIGdyYW1hamUgbyBjYW50aWRhZCBkZWJlIHNlciB1biBuw7ptZXJvIHbDoWxpZG86IENvbiBkb3MgZGVjaW1hbGVzIG3DoXhpbW8uJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuaXQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1VuaWRhZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFpbkltYWdlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGb3RvIHByaW5jaXBhbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJpY2VJbWFnZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnRm90byBkZSBwcmVjaW8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pblByaWNlOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdQcmVjaW8gbcOtbmltbycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF4UHJpY2U6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1ByZWNpbyBtw6F4aW1vJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGRldGFpbHNDb250YWluZXI6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRm90byBkZWwgcHJvZHVjdG8nLFxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBjYW5jZWw6ICdDYW5jZWxhcicsXG4gICAgICAgICAgICBjaGFuZ2VJbWFnZTogJ0NhbWJpYXIgaW1hZ2VuJyxcbiAgICAgICAgICAgIGVkaXRJbmZvcm1hdGlvbjogJ0VkaXRhciBpbmZvcm1hY2nDs24nLFxuICAgICAgICAgICAgc2F2ZUluZm9ybWF0aW9uOiAnR3VhcmRhciBpbmZvcm1hY2nDs24nLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgb3B0aW9uczoge1xuICAgICAgICBsaXN0UHJpY2U6ICdHcsOhZmljYSAtIFByZWNpbyBkZSBsaXN0YScsXG4gICAgICAgIHVuaXRhcnlQcmljZTogJ0dyw6FmaWNhIC0gUHJlY2lvIHVuaXRhcmlvJyxcbiAgICAgICAgcHJpY2VIaXN0b3J5OiAnSGlzdG9yaWFsIGRlIHByZWNpb3MnLFxuICAgICAgICBkZXRhaWw6ICdEZXRhbGxlJyxcbiAgICB9LFxuICAgIHN0YXJ0RGF0ZTogJ0ZlY2hhIGluaWNpYWwnLFxuICAgIGVuZERhdGU6ICdGZWNoYSBmaW5hbCcsXG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgYnJhbmNoT2ZmaWNlOiAnU3VjdXJzYWwnLFxuICAgICAgICAgICAgbWluUHJpY2U6ICdQcmVjaW8gbcOtbmltbycsXG4gICAgICAgICAgICBtYXhQcmljZTogJ1ByZWNpbyBtw6F4aW1vJyxcbiAgICAgICAgICAgIGN1cnJlbnRQcmljZTogJ1ByZWNpbyBhY3R1YWwnLFxuICAgICAgICAgICAgYXZlcmFnZVByaWNlOiAnUHJlY2lvIHByb21lZGlvJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2VlSGlzdG9yeTogJ1ZlciBoaXN0b3JpYWwnLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGV0YWlsOntcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIHByb2R1Y3RJZDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnSUQgUHJvZHVjdG8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJhcmNvZGU6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0PDs2RpZ28gZGUgYmFycmFzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdOb21icmUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyYW5kOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdNYXJjYScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnVGlwbycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ3JvdXA6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0dydXBvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdMw61uZWEnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFtb3VudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnR3JhbWFqZSAvIENhbnRpZGFkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bml0OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdVbmlkYWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1haW5JbWFnZToge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnRm90byBwcmluY2lwYWwnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByaWNlSW1hZ2U6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0ZvdG8gZGUgcHJlY2lvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGNoYW5nZUltYWdlOiAnQ2FtYmlhciBpbWFnZW4nLFxuICAgICAgICAgICAgZWRpdEluZm9ybWF0aW9uOiAnRWRpdGFyIGluZm9ybWFjacOzbicsXG4gICAgICAgICAgICBzYXZlSW5mb3JtYXRpb246ICdHdWFyZGFyIGluZm9ybWFjacOzbicsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdQUk9EVUNUT1MnLFxuICAgIGZpbHRlcnM6IHtcbiAgICAgICAgc2VhcmNoRmllbGQ6ICdCdXNjYXIgcG9yIG5vbWJyZSBvIGPDs2RpZ28gZGVsIHByb2R1Y3RvJyxcbiAgICAgICAgc3RhcnREYXRlOiAnRGVzZGUnLFxuICAgICAgICBlbmREYXRlOiAnSGFzdGEnLFxuICAgICAgICB1cGRhdGVkQXQ6ICdGZWNoYSBkZSBtb2RpZmljYWNpw7NuJyxcbiAgICAgICAgY3JlYXRlZEF0OiAnRmVjaGEgZGUgQWx0YScsXG4gICAgICAgIHBhcmFtOiAnUGFyw6FtZXRybycsXG4gICAgICAgIHZhbHVlOiAnVmFsb3InLFxuICAgIH0sXG4gICAgYWN0aW9uczoge1xuICAgICAgICBzZWFyY2g6ICdCdXNjYXInLFxuICAgICAgICBjbGVhbkZpbHRlcjogJ0xpbXBpYXIgZmlsdHJvcycsXG4gICAgICAgIGRvd25sb2FkOiAnRGVzY2FyZ2FyJyxcbiAgICAgICAgY29tcGFyYXRpdmVDaGFydDogJ0dyYWZpY2FyIGNvbXBhcmF0aXZvcycsXG4gICAgfSxcbiAgICBvcHRpb25zQ2F0YWxvZzoge1xuICAgICAgICBicmFuZHNDYXRhbG9nOiAnTWFyY2EnLFxuICAgICAgICBncm91cHNDYXRhbG9nOiAnR3J1cG8nLFxuICAgICAgICBsaW5lc0NhdGFsb2c6ICdMw61uZWEnLFxuICAgICAgICBzdG9yZXNDYXRhbG9nOiAnQ2FkZW5hJyxcbiAgICAgICAgdW5pdHNDYXRhbG9nOiAnVW5pZGFkJyxcbiAgICB9LFxuICAgIG1vZGFsOiB7XG4gICAgICAgIGRlbGV0ZToge1xuICAgICAgICAgICAgYnV0dG9uQWNjZXB0TGFiZWw6ICdFbGltaW5hcicsXG4gICAgICAgICAgICBtZXNzYWdlOiAnJyxcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZDoge1xuICAgICAgICAgICAgc2VsZWN0ZWQ6ICdTZWxlY2Npb25hcicsXG4gICAgICAgICAgICBwaG90bzogJ0ZvdG8gZGVsIHByb2R1Y3RvJyxcbiAgICAgICAgICAgIHByb2R1Y3Q6ICdOb21icmUnLFxuICAgICAgICAgICAgYmFyY29kZTogJ0PDs2RpZ28nLFxuICAgICAgICAgICAgYnJhbmQ6ICdNYXJjYScsXG4gICAgICAgICAgICB0eXBlOiAnVGlwbycsXG4gICAgICAgICAgICBjcmVhdGVkX2F0OiAnRmVjaGEgZGUgY2FwdHVyYScsXG4gICAgICAgICAgICB1cGRhdGVkX2F0OiAnRmVjaGEgZGUgbW9kaWZpY2FjacOzbicsXG4gICAgICAgICAgICBncmFtbWFnZV9xdWFudGl0eTogJ0NhbnRpZGFkJyxcbiAgICAgICAgICAgIHVuaXQ6ICdVbmlkYWQnLFxuICAgICAgICAgICAgZ3JvdXA6ICdHcnVwbycsXG4gICAgICAgICAgICBsaW5lOiAnTMOtbmVhJyxcbiAgICAgICAgICAgIGhpZ2hlc3RfcHJpY2U6ICdQcmVjaW8gbcOhcyBhbHRvJyxcbiAgICAgICAgICAgIGxvd2VyX3ByaWNlOiAnUHJlY2lvIG3DoXMgYmFqbycsXG4gICAgICAgICAgICBwcm9tb3Rpb25fbG93ZXJfcHJpY2U6ICdQcmVjaW8gbcOhcyBiYWpvIGNvbiBwcm9tb2Npw7NuJyxcbiAgICAgICAgICAgIGxhc3RfcHJpY2U6ICfDmmx0aW1vIHByZWNpbyBjYXB0dXJhZG8nLFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIGlucHV0OiB7XG4gICAgICAgIHJvbGU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnUm9sIConLFxuICAgICAgICAgICAgZXJyb3I6ICdFbCBjYW1wbyBlcyByZXF1ZXJpZG8nLFxuICAgICAgICB9LFxuICAgICAgICBmaXJzdF9uYW1lOiB7XG4gICAgICAgICAgICBsYWJlbDogJ05vbWJyZSAqJyxcbiAgICAgICAgICAgIGVycm9yOiAnRWwgY2FtcG8gZXMgcmVxdWVyaWRvJyxcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdF9uYW1lOiB7XG4gICAgICAgICAgICBsYWJlbDogJ0FwZWxsaWRvIHBhdGVybm8gKicsXG4gICAgICAgICAgICBlcnJvcjogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdGhlcl9sYXN0X25hbWU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQXBlbGxpZG8gbWF0ZXJubycsXG4gICAgICAgICAgICBlcnJvcjogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgIH0sXG4gICAgICAgIHRoZW1lOiB7XG4gICAgICAgICAgICBsYWJlbDogJ1VzYXIgdGVtYSBvc2N1cm8nLFxuICAgICAgICAgICAgZXJyb3I6ICdFbCBjYW1wbyBlcyByZXF1ZXJpZG8nLFxuICAgICAgICB9LFxuICAgICAgICBsb2NhbGU6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ2FtYmlhciBpZGlvbWEnLFxuICAgICAgICAgICAgZXJyb3I6ICdFbCBjYW1wbyBlcyByZXF1ZXJpZG8nLFxuICAgICAgICB9LFxuICAgICAgICBlbXBsb3llZV9udW1iZXI6IHtcbiAgICAgICAgICAgIGxhYmVsOiAnTsO6bWVybyBkZSBlbXBsZWFkbycsXG4gICAgICAgICAgICBlcnJvcjogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgIH0sXG4gICAgICAgIGNlbGxwaG9uZToge1xuICAgICAgICAgICAgbGFiZWw6ICdOw7ptZXJvIGRlIGNlbHVsYXInLFxuICAgICAgICAgICAgZXJyb3I6ICdFbCBjYW1wbyBlcyByZXF1ZXJpZG8nLFxuICAgICAgICB9LFxuICAgICAgICByZWdpb246IHtcbiAgICAgICAgICAgIGxhYmVsOiAnUmVnacOzbicsXG4gICAgICAgICAgICBlcnJvcjogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgIH0sXG4gICAgICAgIHVzZXJuYW1lOiB7XG4gICAgICAgICAgICBsYWJlbDogJ1VzdWFyaW8gKicsXG4gICAgICAgICAgICBlcnJvcjogJ0VsIGNhbXBvIGVzIHJlcXVlcmlkbycsXG4gICAgICAgIH0sXG4gICAgICAgIHBhc3N3b3JkOiB7XG4gICAgICAgICAgICBsYWJlbDogJ0NvbnRyYXNlw7FhIConLFxuICAgICAgICAgICAgZXJyb3I6ICdFbCBjYW1wbyBlcyByZXF1ZXJpZG8nLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgb3B0aW9uczoge1xuICAgICAgICBjbG9zZTogJ0NlcnJhcicsXG4gICAgICAgIHNhdmU6ICdHdWFyZGFyJyxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnUmFua2luZ3MnLFxuICAgIHRhYnM6IHtcbiAgICAgICAgY2FwdHVyaXN0czoge1xuICAgICAgICAgICAgdGl0bGU6ICdjYXB0dXJpc3RhcycsXG4gICAgICAgICAgICBzdGFydERhdGU6ICdGZWNoYSBpbmljaWFsJyxcbiAgICAgICAgICAgIGVuZERhdGU6ICdGZWNoYSBmaW5hbCcsXG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0J1c2NhciBwb3Igbm9tYnJlIG8gbsO6bWVybyBkZSBlbXBsZWFkbycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2xlYXJEYXRlOiAnTGltcGlhciBmZWNoYXMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhYmxlOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnUG9zaWNpw7NuJyxcbiAgICAgICAgICAgICAgICAgICAgZW1wbG95ZWVOdW1iZXI6ICdOby4gZGUgZW1wbGVhZG8nLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTm9tYnJlJyxcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogJ1BvcmNlbnRhamUnLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZWRDYXB0dXJlczogJ0NhcHR1cmFzIHZhbGlkYWRhcycsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogJ1B1bnRvcycsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdG9yczoge1xuICAgICAgICAgICAgdGl0bGU6ICdWYWxpZGFkb3JlcycsXG4gICAgICAgICAgICBzdGFydERhdGU6ICdGZWNoYSBpbmljaWFsJyxcbiAgICAgICAgICAgIGVuZERhdGU6ICdGZWNoYSBmaW5hbCcsXG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0J1c2NhciBwb3Igbm9tYnJlIG8gbsO6bWVybyBkZSBlbXBsZWFkbycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2xlYXJEYXRlOiAnTGltcGlhciBmZWNoYXMnLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlRGF0YTogJ0dlbmVyYXIgZGF0b3MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvdGFsOiB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZXM6ICdUb3RhbCBkZSBjYXB0dXJhcycsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVkOiAnVG90YWwgdmFsaWRhZGFzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoaXN0b3J5OiB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZXM6ICdIaXN0b3JpYWwgZGUgY2FwdHVyYXMnLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlZDogJ0hpc3RvcmlhbCBkZSB2YWxpZGFkYXMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhYmxlOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGVtcGxveWVlTnVtYmVyOiAnTm8uIGRlIGVtcGxlYWRvJyxcbiAgICAgICAgICAgICAgICAgICAgbm9tYnJlOiAnTm9tYnJlJyxcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogJ1BvcmNlbnRhamUnLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZWRDYXB0dXJlczogJ0NhcHR1cmFzIHZhbGlkYWRhcycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdSZWdpb25lcycsXG4gICAgc2VhcmNoOiAnQnVzY2FyIHVuYSByZWdpw7NuJyxcbiAgICBzZWFyY2hCeU5hbWU6ICdCdXNjYXIgcG9yIG5vbWJyZSAnLFxuICAgIGFjdGlvbnM6IHtcbiAgICAgICAgYWRkOiAnQcOxYWRpciByZWdpw7NuJyxcbiAgICAgICAgZG93bmxvYWQ6ICdEZXNjYXJnYXIgUmVwb3J0ZScsXG4gICAgfSxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBuYW1lOiAnTm9tYnJlJyxcbiAgICAgICAgICAgIGFsaWFzOiAnQWxpYXMnLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgdG9hc3Q6IHtcbiAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgdGl0bGU6ICdFcnJvciBjb24gbGEgcGV0aWNpw7NuLicsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgY29uIGxhIHBldGljacOzbi4nLFxuICAgICAgICB9LFxuICAgICAgICBjcmVhdGU6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NlIGhhIGNyZWFkbyBsYSByZWdpw7NuIGNvcnJlY3RhbWVudGUuICcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZWxpbWluYWRvIGxhIHJlZ2nDs24gY29ycmVjdGFtZW50ZS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgZWRpdGFkbyBsYSByZWdpw7NuIGNvcnJlY3RhbWVudGUuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZG93bmxvYWREYXRhOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBkZXNjYXJnYWRvIGVsIHJlcG9ydGUgZXhpdG9zYW1lbnRlLicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtb2RhbDoge1xuICAgICAgICBjcmVhdGVNb2RhbDoge1xuICAgICAgICAgICAgdGl0bGU6ICdDcmVhciByZWdpw7NuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZWRpdE1vZGFsOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0VkaXRhciByZWdpw7NuJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2F2ZTogJ0d1YXJkYXInLFxuICAgICAgICAgICAgY3JlYXRlOiAnQ3JlYXInLFxuICAgICAgICB9LFxuICAgIH0sXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgc3RhcnREYXRlOiAnRmVjaGEgaW5pY2lhbCcsXG4gICAgZW5kRGF0ZTogJ0ZlY2hhIGZpbmFsJyxcbiAgICBpbnB1dDoge1xuICAgICAgICBzZWFyY2g6IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnQnVzY2FyIHBvciBub21icmUgbyBuw7ptZXJvIGRlIGVtcGxlYWRvJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWlzc2lvbjoge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdNaXNpw7NuJyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2xlYXJEYXRlOiAnTGltcGlhciBmZWNoYXMnLFxuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZGVyOiB7XG4gICAgICAgICAgICByYW5raW5nOiAnUG9zaWNpw7NuJyxcbiAgICAgICAgICAgIGVtcGxveWVlX251bWJlcjogJ05vLiBkZSBlbXBsZWFkbycsXG4gICAgICAgICAgICBuYW1lOiAnTm9tYnJlJyxcbiAgICAgICAgICAgIGVmZmljaWVuY3k6ICdQb3JjZW50YWplJyxcbiAgICAgICAgICAgIHZhbGlkYXRlZF9jYXB0dXJlczogJ0NhcHR1cmFzIHZhbGlkYWRhcycsXG4gICAgICAgICAgICBwb2ludHM6ICdQdW50b3MnLFxuICAgICAgICB9XG4gICAgfSxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ1JlcG9ydGUgZGUgY2FwdHVyYXMnLFxuICAgIGZpbHRlcnM6IHtcbiAgICAgICAgcmVnaW9uOiAnUmVnacOzbicsXG4gICAgICAgIHNjYW5uZXI6ICdDYXB0dXJpc3RhJyxcbiAgICAgICAgbWlzc2lvbjogJ01pc2nDs24nLFxuICAgIH0sXG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJ1JlcG9ydGUgQ29tcGFyYXRpdm8gZGUgUHJlY2lvcycsXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgYnJhbmNoT2ZmaWNlOiAnU3VjdXJzYWwnLFxuICAgICAgICAgICAgbWluUHJpY2U6ICdQcmVjaW8gbcOtbmltbycsXG4gICAgICAgICAgICBtYXhQcmljZTogJ1ByZWNpbyBtw6F4aW1vJyxcbiAgICAgICAgICAgIGN1cnJlbnRQcmljZTogJ1ByZWNpbyBhY3R1YWwnLFxuICAgICAgICAgICAgYXZlcmFnZVByaWNlOiAnUHJlY2lvIHByb21lZGlvJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgc2VlSGlzdG9yeTogJ1ZlciBoaXN0b3JpYWwnLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBzY2FuOiAnQ2FwdHVyYScsXG4gICAgICAgICAgICAgICAgY2FwdHVyZWRBdDogJ0ZlY2hhIGRlIGNhcHR1cmEnLFxuICAgICAgICAgICAgICAgIHByaWNlOiAnUHJlY2lvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGNsb3NlOiAnY2VycmFyJyxcbiAgICAgICAgfSxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIGFjdGlvbnM6ICdBY2Npb25lcycsXG59XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICdVbmlkYWRlcycsXG4gICAgc2VhcmNoOiAnQnVzY2FyIHVuYSB1bmlkYWQnLFxuICAgIHNlYXJjaEJ5TmFtZTogJ0J1c2NhciBwb3Igbm9tYnJlICcsXG4gICAgYWN0aW9uczoge1xuICAgICAgICBhZGQ6ICdBw7FhZGlyIHVuaWRhZCcsXG4gICAgICAgIGRvd25sb2FkOiAnRGVzY2FyZ2FyIFJlcG9ydGUnLFxuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgbmFtZTogJ05vbWJyZScsXG4gICAgICAgICAgICBhYmJyZXZpYXRpb246ICdBYnJldmlhY2nDs24nLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgdG9hc3Q6IHtcbiAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgdGl0bGU6ICdFcnJvciBjb24gbGEgcGV0aWNpw7NuLicsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgY29uIGxhIHBldGljacOzbi4nLFxuICAgICAgICB9LFxuICAgICAgICBjcmVhdGU6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NlIGhhIGNyZWFkbyBsYSB1bmlkYWQgY29ycmVjdGFtZW50ZS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBlbGltaW5hZG8gbGEgdW5pZGFkIGNvcnJlY3RhbWVudGUuICcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXQ6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NlIGhhIGVkaXRhZG8gbGEgdW5pZGFkIGNvcnJlY3RhbWVudGUuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZG93bmxvYWREYXRhOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBkZXNjYXJnYWRvIGVsIHJlcG9ydGUgZXhpdG9zYW1lbnRlLicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtb2RhbDoge1xuICAgICAgICBjcmVhdGVNb2RhbDoge1xuICAgICAgICAgICAgdGl0bGU6ICdDcmVhciB1bmlkYWQnLFxuICAgICAgICB9LFxuICAgICAgICBlZGl0TW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdGFyIHVuaWRhZCcsXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNhdmU6ICdHdWFyZGFyJyxcbiAgICAgICAgICAgIGNyZWF0ZTogJ0NyZWFyJyxcbiAgICAgICAgfSxcbiAgICB9LFxufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnVXN1YXJpb3MnLFxuICAgIHNlYXJjaDogJ0J1c2NhciB1biB1c3VhcmlvJyxcbiAgICBzZWFyY2hCeU5hbWU6ICdCdXNjYXIgcG9yIG5vbWJyZSwgdXN1YXJpbywgZW1haWwsIGV0aXF1ZXRhcywgbyBuw7ptZXJvIGRlIGVtcGxlYWRvLicsXG4gICAgdGFnczogJ0V0aXF1ZXRhcycsXG4gICAgYWN0aW9uczoge1xuICAgICAgICBhZGQ6ICdDcmVhciBudWV2byB1c3VhcmlvJyxcbiAgICAgICAgYWRkVGFnczogJ0FncmVnYXIgZXRpcXVldGFzJyxcbiAgICAgICAgY2xvc2U6ICdDZXJyYXInLFxuICAgICAgICBkb3dubG9hZDogJ0Rlc2NhcmdhciBSZXBvcnRlJyxcbiAgICB9LFxuICAgIGZpbHRlcnM6IHtcbiAgICAgICAgcm9sZTogJ0ZpbHRyYXIgcG9yIHJvbCcsXG4gICAgICAgIHJlZ2lvbjogJ0ZpbHRyYXIgcG9yIHJlZ2nDs24nLFxuICAgICAgICBhbGxSZWdpb25zOiAnVG9kYXMgbGFzIHJlZ2lvbmVzJyxcbiAgICB9LFxuICAgIHRhYmxlOiB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIGZpcnN0X25hbWU6ICdOb21icmUnLFxuICAgICAgICAgICAgbGFzdF9uYW1lOiAnQXBlbGxpZG8gcGF0ZXJubycsXG4gICAgICAgICAgICBtb3RoZXJfbGFzdF9uYW1lOiAnQXBlbGxpZG8gbWF0ZXJubycsXG4gICAgICAgICAgICB1c2VybmFtZTogJ1VzdWFyaW8nLFxuICAgICAgICAgICAgZW1haWw6ICdDb3JyZW8gZWxlY3Ryw7NuaWNvJyxcbiAgICAgICAgICAgIGVtcGxveWVlX251bWJlcjogJ05vLiBkZSBlbXBsZWFkbycsXG4gICAgICAgICAgICByb2xTZWxlY3RlZDogJ1JvbCcsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB0b2FzdDoge1xuICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0Vycm9yIGNvbiBsYSBwZXRpY2nDs24uJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBjb24gbGEgcGV0aWNpw7NuLicsXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZToge1xuICAgICAgICAgICAgc3VjY2Vzczoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnTm90aWZpY2FjacOzbiBkZSDDqXhpdG8uJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU2UgaGEgY3JlYWRvIGVsIHVzdWFyaW8gY29ycmVjdGFtZW50ZS4gJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlOiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBlbGltaW5hZG8gZWwgdXN1YXJpbyBjb3JyZWN0YW1lbnRlLiAnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlZGl0OiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdOb3RpZmljYWNpw7NuIGRlIMOpeGl0by4nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZSBoYSBlZGl0YWRvIGVsIHVzdWFyaW8gY29ycmVjdGFtZW50ZS4nLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkb3dubG9hZERhdGE6IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ05vdGlmaWNhY2nDs24gZGUgw6l4aXRvLicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NlIGhhIGRlc2NhcmdhZG8gZWwgcmVwb3J0ZSBleGl0b3NhbWVudGUuJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1vZGFsOiB7XG4gICAgICAgIGNyZWF0ZU1vZGFsOiB7XG4gICAgICAgICAgICB0aXRsZTogJ0NyZWFyIHVzdWFyaW8nLFxuICAgICAgICB9LFxuICAgICAgICBlZGl0TW9kYWw6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRWRpdGFyIHVzdWFyaW8nLFxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzYXZlOiAnR3VhcmRhcicsXG4gICAgICAgICAgICBjcmVhdGU6ICdDcmVhcicsXG4gICAgICAgIH0sXG4gICAgfSxcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBzdGFydERhdGU6ICdGZWNoYSBpbmljaWFsJyxcbiAgICBlbmREYXRlOiAnRmVjaGEgZmluYWwnLFxuICAgIGlucHV0OiB7XG4gICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdCdXNjYXIgcG9yIG5vbWJyZSBvIG7Dum1lcm8gZGUgZW1wbGVhZG8nLFxuICAgICAgICB9LFxuICAgICAgICBtaXNzaW9uOiB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ01pc2nDs24nLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgb3B0aW9uczoge1xuICAgICAgICBjbGVhckRhdGU6ICdMaW1waWFyIGZlY2hhcycsXG4gICAgICAgIGdlbmVyYXRlRGF0YTogJ0dlbmVyYXIgZGF0b3MnLFxuICAgIH0sXG4gICAgdG90YWw6IHtcbiAgICAgICAgY2FwdHVyZXM6ICdUb3RhbCBkZSBjYXB0dXJhcycsXG4gICAgICAgIHZhbGlkYXRlZDogJ1RvdGFsIHZhbGlkYWRhcycsXG4gICAgfSxcbiAgICBoaXN0b3J5OiB7XG4gICAgICAgIGNhcHR1cmVzOiAnSGlzdG9yaWFsIGRlIGNhcHR1cmFzJyxcbiAgICAgICAgdmFsaWRhdGVkOiAnSGlzdG9yaWFsIGRlIHZhbGlkYWRhcycsXG4gICAgfSxcbiAgICB0YWJsZToge1xuICAgICAgICBoZWFkZXI6IHtcbiAgICAgICAgICAgIGVtcGxveWVlX251bWJlcjogJ07Dum0gZGUgZW1wbGVhZG8nLFxuICAgICAgICAgICAgZnVsbE5hbWU6ICdOb21icmUnLFxuICAgICAgICAgICAgZWZmaWNpZW5jeTogJ1BvcmNlbnRhamUnLFxuICAgICAgICAgICAgdXNlclZhbGlkYXRlczogJ0NhcHR1cmFzIHZhbGlkYWRhcycsXG4gICAgICAgIH0sXG4gICAgfSxcbn1cbiIsImltcG9ydCBnZXQgZnJvbSAnbG9kYXNoLmdldCdcblxuLy8gTE9DQUxFU1xuaW1wb3J0IGVzIGZyb20gJy4vZXMnXG5pbXBvcnQgZW4gZnJvbSAnLi9lbidcblxuY29uc3QgbG9jYWxlcyA9IHtcbiAgICBlcyxcbiAgICBlbixcbn1cblxuZXhwb3J0IGNvbnN0IGdldEkxOG5MYWJlbCA9IChsb2NhbGUsIGtleSkgPT4gKFxuICAgIGdldChsb2NhbGVzW2xvY2FsZV0sIGtleSkgfHwgJydcbilcblxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZVRhYmxlSGVhZGVyID0gKGxvY2FsZSwgaGVhZGVycywgcGF0aCkgPT4gKFxuICAgIGhlYWRlcnMubWFwKChoZWFkZXIpID0+ICh7XG4gICAgICAgIC4uLmhlYWRlcixcbiAgICAgICAgbGFiZWw6IGdldEkxOG5MYWJlbChsb2NhbGUsIGAke3BhdGh9LiR7aGVhZGVyLmtleX1gKSxcbiAgICB9KSlcbilcblxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZVRhYmxlQ29tcGxleEhlYWRlciA9IChsb2NhbGUsIGhlYWRlcnMsIHBhdGgpID0+IChcbiAgICBoZWFkZXJzLm1hcCgoaGVhZGVyKSA9PiAoe1xuICAgICAgICAuLi5oZWFkZXIsXG4gICAgICAgIHRpdGxlOiBnZXRJMThuTGFiZWwobG9jYWxlLCBgJHtwYXRofS4ke2hlYWRlci5uYW1lfWApLFxuICAgIH0pKVxuKVxuIiwiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBVcmxPYmplY3QgfSBmcm9tICd1cmwnXG5pbXBvcnQge1xuICBhZGRCYXNlUGF0aCxcbiAgYWRkTG9jYWxlLFxuICBpc0xvY2FsVVJMLFxuICBOZXh0Um91dGVyLFxuICBQcmVmZXRjaE9wdGlvbnMsXG4gIHJlc29sdmVIcmVmLFxufSBmcm9tICcuLi9uZXh0LXNlcnZlci9saWIvcm91dGVyL3JvdXRlcidcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJy4vcm91dGVyJ1xuXG50eXBlIFVybCA9IHN0cmluZyB8IFVybE9iamVjdFxudHlwZSBSZXF1aXJlZEtleXM8VD4gPSB7XG4gIFtLIGluIGtleW9mIFRdLT86IHt9IGV4dGVuZHMgUGljazxULCBLPiA/IG5ldmVyIDogS1xufVtrZXlvZiBUXVxudHlwZSBPcHRpb25hbEtleXM8VD4gPSB7XG4gIFtLIGluIGtleW9mIFRdLT86IHt9IGV4dGVuZHMgUGljazxULCBLPiA/IEsgOiBuZXZlclxufVtrZXlvZiBUXVxuXG5leHBvcnQgdHlwZSBMaW5rUHJvcHMgPSB7XG4gIGhyZWY6IFVybFxuICBhcz86IFVybFxuICByZXBsYWNlPzogYm9vbGVhblxuICBzY3JvbGw/OiBib29sZWFuXG4gIHNoYWxsb3c/OiBib29sZWFuXG4gIHBhc3NIcmVmPzogYm9vbGVhblxuICBwcmVmZXRjaD86IGJvb2xlYW5cbiAgbG9jYWxlPzogc3RyaW5nIHwgZmFsc2Vcbn1cbnR5cGUgTGlua1Byb3BzUmVxdWlyZWQgPSBSZXF1aXJlZEtleXM8TGlua1Byb3BzPlxudHlwZSBMaW5rUHJvcHNPcHRpb25hbCA9IE9wdGlvbmFsS2V5czxMaW5rUHJvcHM+XG5cbmxldCBjYWNoZWRPYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbmNvbnN0IGxpc3RlbmVycyA9IG5ldyBNYXA8RWxlbWVudCwgKCkgPT4gdm9pZD4oKVxuY29uc3QgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlciA6IG51bGxcbmNvbnN0IHByZWZldGNoZWQ6IHsgW2NhY2hlS2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fVxuXG5mdW5jdGlvbiBnZXRPYnNlcnZlcigpOiBJbnRlcnNlY3Rpb25PYnNlcnZlciB8IHVuZGVmaW5lZCB7XG4gIC8vIFJldHVybiBzaGFyZWQgaW5zdGFuY2Ugb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaWYgYWxyZWFkeSBjcmVhdGVkXG4gIGlmIChjYWNoZWRPYnNlcnZlcikge1xuICAgIHJldHVybiBjYWNoZWRPYnNlcnZlclxuICB9XG5cbiAgLy8gT25seSBjcmVhdGUgc2hhcmVkIEludGVyc2VjdGlvbk9ic2VydmVyIGlmIHN1cHBvcnRlZCBpbiBicm93c2VyXG4gIGlmICghSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICByZXR1cm4gKGNhY2hlZE9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgIChlbnRyaWVzKSA9PiB7XG4gICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmICghbGlzdGVuZXJzLmhhcyhlbnRyeS50YXJnZXQpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYiA9IGxpc3RlbmVycy5nZXQoZW50cnkudGFyZ2V0KSFcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nIHx8IGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMCkge1xuICAgICAgICAgIGNhY2hlZE9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpXG4gICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShlbnRyeS50YXJnZXQpXG4gICAgICAgICAgY2IoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgeyByb290TWFyZ2luOiAnMjAwcHgnIH1cbiAgKSlcbn1cblxuY29uc3QgbGlzdGVuVG9JbnRlcnNlY3Rpb25zID0gKGVsOiBFbGVtZW50LCBjYjogKCkgPT4gdm9pZCkgPT4ge1xuICBjb25zdCBvYnNlcnZlciA9IGdldE9ic2VydmVyKClcbiAgaWYgKCFvYnNlcnZlcikge1xuICAgIHJldHVybiAoKSA9PiB7fVxuICB9XG5cbiAgb2JzZXJ2ZXIub2JzZXJ2ZShlbClcbiAgbGlzdGVuZXJzLnNldChlbCwgY2IpXG4gIHJldHVybiAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbClcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgIH1cbiAgICBsaXN0ZW5lcnMuZGVsZXRlKGVsKVxuICB9XG59XG5cbmZ1bmN0aW9uIHByZWZldGNoKFxuICByb3V0ZXI6IE5leHRSb3V0ZXIsXG4gIGhyZWY6IHN0cmluZyxcbiAgYXM6IHN0cmluZyxcbiAgb3B0aW9ucz86IFByZWZldGNoT3B0aW9uc1xuKTogdm9pZCB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG4gIGlmICghaXNMb2NhbFVSTChocmVmKSkgcmV0dXJuXG4gIC8vIFByZWZldGNoIHRoZSBKU09OIHBhZ2UgaWYgYXNrZWQgKG9ubHkgaW4gdGhlIGNsaWVudClcbiAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYSBwcmVmZXRjaCBlcnJvciBoZXJlIHNpbmNlIHdlIG1heSBiZVxuICAvLyBsb2FkaW5nIHdpdGggcHJpb3JpdHkgd2hpY2ggY2FuIHJlamVjdCBidXQgd2UgZG9uJ3RcbiAgLy8gd2FudCB0byBmb3JjZSBuYXZpZ2F0aW9uIHNpbmNlIHRoaXMgaXMgb25seSBhIHByZWZldGNoXG4gIHJvdXRlci5wcmVmZXRjaChocmVmLCBhcywgb3B0aW9ucykuY2F0Y2goKGVycikgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyByZXRocm93IHRvIHNob3cgaW52YWxpZCBVUkwgZXJyb3JzXG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH0pXG4gIC8vIEpvaW4gb24gYW4gaW52YWxpZCBVUkkgY2hhcmFjdGVyXG4gIHByZWZldGNoZWRbaHJlZiArICclJyArIGFzXSA9IHRydWVcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50KSB7XG4gIGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudC5jdXJyZW50VGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50XG4gIHJldHVybiAoXG4gICAgKHRhcmdldCAmJiB0YXJnZXQgIT09ICdfc2VsZicpIHx8XG4gICAgZXZlbnQubWV0YUtleSB8fFxuICAgIGV2ZW50LmN0cmxLZXkgfHxcbiAgICBldmVudC5zaGlmdEtleSB8fFxuICAgIGV2ZW50LmFsdEtleSB8fCAvLyB0cmlnZ2VycyByZXNvdXJjZSBkb3dubG9hZFxuICAgIChldmVudC5uYXRpdmVFdmVudCAmJiBldmVudC5uYXRpdmVFdmVudC53aGljaCA9PT0gMilcbiAgKVxufVxuXG5mdW5jdGlvbiBsaW5rQ2xpY2tlZChcbiAgZTogUmVhY3QuTW91c2VFdmVudCxcbiAgcm91dGVyOiBOZXh0Um91dGVyLFxuICBocmVmOiBzdHJpbmcsXG4gIGFzOiBzdHJpbmcsXG4gIHJlcGxhY2U/OiBib29sZWFuLFxuICBzaGFsbG93PzogYm9vbGVhbixcbiAgc2Nyb2xsPzogYm9vbGVhbixcbiAgbG9jYWxlPzogc3RyaW5nIHwgZmFsc2Vcbik6IHZvaWQge1xuICBjb25zdCB7IG5vZGVOYW1lIH0gPSBlLmN1cnJlbnRUYXJnZXRcblxuICBpZiAobm9kZU5hbWUgPT09ICdBJyAmJiAoaXNNb2RpZmllZEV2ZW50KGUpIHx8ICFpc0xvY2FsVVJMKGhyZWYpKSkge1xuICAgIC8vIGlnbm9yZSBjbGljayBmb3IgYnJvd3NlcuKAmXMgZGVmYXVsdCBiZWhhdmlvclxuICAgIHJldHVyblxuICB9XG5cbiAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgLy8gIGF2b2lkIHNjcm9sbCBmb3IgdXJscyB3aXRoIGFuY2hvciByZWZzXG4gIGlmIChzY3JvbGwgPT0gbnVsbCkge1xuICAgIHNjcm9sbCA9IGFzLmluZGV4T2YoJyMnKSA8IDBcbiAgfVxuXG4gIC8vIHJlcGxhY2Ugc3RhdGUgaW5zdGVhZCBvZiBwdXNoIGlmIHByb3AgaXMgcHJlc2VudFxuICByb3V0ZXJbcmVwbGFjZSA/ICdyZXBsYWNlJyA6ICdwdXNoJ10oaHJlZiwgYXMsIHsgc2hhbGxvdywgbG9jYWxlIH0pLnRoZW4oXG4gICAgKHN1Y2Nlc3M6IGJvb2xlYW4pID0+IHtcbiAgICAgIGlmICghc3VjY2VzcykgcmV0dXJuXG4gICAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKVxuICAgICAgICBkb2N1bWVudC5ib2R5LmZvY3VzKClcbiAgICAgIH1cbiAgICB9XG4gIClcbn1cblxuZnVuY3Rpb24gTGluayhwcm9wczogUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48TGlua1Byb3BzPikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb3BFcnJvcihhcmdzOiB7XG4gICAgICBrZXk6IHN0cmluZ1xuICAgICAgZXhwZWN0ZWQ6IHN0cmluZ1xuICAgICAgYWN0dWFsOiBzdHJpbmdcbiAgICB9KSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICBgRmFpbGVkIHByb3AgdHlwZTogVGhlIHByb3AgXFxgJHthcmdzLmtleX1cXGAgZXhwZWN0cyBhICR7YXJncy5leHBlY3RlZH0gaW4gXFxgPExpbms+XFxgLCBidXQgZ290IFxcYCR7YXJncy5hY3R1YWx9XFxgIGluc3RlYWQuYCArXG4gICAgICAgICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IFwiXFxuT3BlbiB5b3VyIGJyb3dzZXIncyBjb25zb2xlIHRvIHZpZXcgdGhlIENvbXBvbmVudCBzdGFjayB0cmFjZS5cIlxuICAgICAgICAgICAgOiAnJylcbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyBUeXBlU2NyaXB0IHRyaWNrIGZvciB0eXBlLWd1YXJkaW5nOlxuICAgIGNvbnN0IHJlcXVpcmVkUHJvcHNHdWFyZDogUmVjb3JkPExpbmtQcm9wc1JlcXVpcmVkLCB0cnVlPiA9IHtcbiAgICAgIGhyZWY6IHRydWUsXG4gICAgfSBhcyBjb25zdFxuICAgIGNvbnN0IHJlcXVpcmVkUHJvcHM6IExpbmtQcm9wc1JlcXVpcmVkW10gPSBPYmplY3Qua2V5cyhcbiAgICAgIHJlcXVpcmVkUHJvcHNHdWFyZFxuICAgICkgYXMgTGlua1Byb3BzUmVxdWlyZWRbXVxuICAgIHJlcXVpcmVkUHJvcHMuZm9yRWFjaCgoa2V5OiBMaW5rUHJvcHNSZXF1aXJlZCkgPT4ge1xuICAgICAgaWYgKGtleSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wc1trZXldID09IG51bGwgfHxcbiAgICAgICAgICAodHlwZW9mIHByb3BzW2tleV0gIT09ICdzdHJpbmcnICYmIHR5cGVvZiBwcm9wc1trZXldICE9PSAnb2JqZWN0JylcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgY3JlYXRlUHJvcEVycm9yKHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGV4cGVjdGVkOiAnYHN0cmluZ2Agb3IgYG9iamVjdGAnLFxuICAgICAgICAgICAgYWN0dWFsOiBwcm9wc1trZXldID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHByb3BzW2tleV0sXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVHlwZVNjcmlwdCB0cmljayBmb3IgdHlwZS1ndWFyZGluZzpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICBjb25zdCBfOiBuZXZlciA9IGtleVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBUeXBlU2NyaXB0IHRyaWNrIGZvciB0eXBlLWd1YXJkaW5nOlxuICAgIGNvbnN0IG9wdGlvbmFsUHJvcHNHdWFyZDogUmVjb3JkPExpbmtQcm9wc09wdGlvbmFsLCB0cnVlPiA9IHtcbiAgICAgIGFzOiB0cnVlLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHNjcm9sbDogdHJ1ZSxcbiAgICAgIHNoYWxsb3c6IHRydWUsXG4gICAgICBwYXNzSHJlZjogdHJ1ZSxcbiAgICAgIHByZWZldGNoOiB0cnVlLFxuICAgICAgbG9jYWxlOiB0cnVlLFxuICAgIH0gYXMgY29uc3RcbiAgICBjb25zdCBvcHRpb25hbFByb3BzOiBMaW5rUHJvcHNPcHRpb25hbFtdID0gT2JqZWN0LmtleXMoXG4gICAgICBvcHRpb25hbFByb3BzR3VhcmRcbiAgICApIGFzIExpbmtQcm9wc09wdGlvbmFsW11cbiAgICBvcHRpb25hbFByb3BzLmZvckVhY2goKGtleTogTGlua1Byb3BzT3B0aW9uYWwpID0+IHtcbiAgICAgIGNvbnN0IHZhbFR5cGUgPSB0eXBlb2YgcHJvcHNba2V5XVxuXG4gICAgICBpZiAoa2V5ID09PSAnYXMnKSB7XG4gICAgICAgIGlmIChwcm9wc1trZXldICYmIHZhbFR5cGUgIT09ICdzdHJpbmcnICYmIHZhbFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGhyb3cgY3JlYXRlUHJvcEVycm9yKHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGV4cGVjdGVkOiAnYHN0cmluZ2Agb3IgYG9iamVjdGAnLFxuICAgICAgICAgICAgYWN0dWFsOiB2YWxUeXBlLFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnbG9jYWxlJykge1xuICAgICAgICBpZiAocHJvcHNba2V5XSAmJiB2YWxUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93IGNyZWF0ZVByb3BFcnJvcih7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBleHBlY3RlZDogJ2BzdHJpbmdgJyxcbiAgICAgICAgICAgIGFjdHVhbDogdmFsVHlwZSxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBrZXkgPT09ICdyZXBsYWNlJyB8fFxuICAgICAgICBrZXkgPT09ICdzY3JvbGwnIHx8XG4gICAgICAgIGtleSA9PT0gJ3NoYWxsb3cnIHx8XG4gICAgICAgIGtleSA9PT0gJ3Bhc3NIcmVmJyB8fFxuICAgICAgICBrZXkgPT09ICdwcmVmZXRjaCdcbiAgICAgICkge1xuICAgICAgICBpZiAocHJvcHNba2V5XSAhPSBudWxsICYmIHZhbFR5cGUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgIHRocm93IGNyZWF0ZVByb3BFcnJvcih7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBleHBlY3RlZDogJ2Bib29sZWFuYCcsXG4gICAgICAgICAgICBhY3R1YWw6IHZhbFR5cGUsXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVHlwZVNjcmlwdCB0cmljayBmb3IgdHlwZS1ndWFyZGluZzpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICBjb25zdCBfOiBuZXZlciA9IGtleVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBUaGlzIGhvb2sgaXMgaW4gYSBjb25kaXRpb25hbCBidXQgdGhhdCBpcyBvayBiZWNhdXNlIGBwcm9jZXNzLmVudi5OT0RFX0VOVmAgbmV2ZXIgY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IGhhc1dhcm5lZCA9IFJlYWN0LnVzZVJlZihmYWxzZSlcbiAgICBpZiAocHJvcHMucHJlZmV0Y2ggJiYgIWhhc1dhcm5lZC5jdXJyZW50KSB7XG4gICAgICBoYXNXYXJuZWQuY3VycmVudCA9IHRydWVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ05leHQuanMgYXV0by1wcmVmZXRjaGVzIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gdmlld3BvcnQuIFRoZSBwcmVmZXRjaCBhdHRyaWJ1dGUgaXMgbm8gbG9uZ2VyIG5lZWRlZC4gTW9yZTogaHR0cHM6Ly9lcnIuc2gvdmVyY2VsL25leHQuanMvcHJlZmV0Y2gtdHJ1ZS1kZXByZWNhdGVkJ1xuICAgICAgKVxuICAgIH1cbiAgfVxuICBjb25zdCBwID0gcHJvcHMucHJlZmV0Y2ggIT09IGZhbHNlXG5cbiAgY29uc3QgW2NoaWxkRWxtLCBzZXRDaGlsZEVsbV0gPSBSZWFjdC51c2VTdGF0ZTxFbGVtZW50PigpXG5cbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKClcbiAgY29uc3QgcGF0aG5hbWUgPSAocm91dGVyICYmIHJvdXRlci5wYXRobmFtZSkgfHwgJy8nXG5cbiAgY29uc3QgeyBocmVmLCBhcyB9ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgW3Jlc29sdmVkSHJlZiwgcmVzb2x2ZWRBc10gPSByZXNvbHZlSHJlZihwYXRobmFtZSwgcHJvcHMuaHJlZiwgdHJ1ZSlcbiAgICByZXR1cm4ge1xuICAgICAgaHJlZjogcmVzb2x2ZWRIcmVmLFxuICAgICAgYXM6IHByb3BzLmFzXG4gICAgICAgID8gcmVzb2x2ZUhyZWYocGF0aG5hbWUsIHByb3BzLmFzKVxuICAgICAgICA6IHJlc29sdmVkQXMgfHwgcmVzb2x2ZWRIcmVmLFxuICAgIH1cbiAgfSwgW3BhdGhuYW1lLCBwcm9wcy5ocmVmLCBwcm9wcy5hc10pXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBwICYmXG4gICAgICBJbnRlcnNlY3Rpb25PYnNlcnZlciAmJlxuICAgICAgY2hpbGRFbG0gJiZcbiAgICAgIGNoaWxkRWxtLnRhZ05hbWUgJiZcbiAgICAgIGlzTG9jYWxVUkwoaHJlZilcbiAgICApIHtcbiAgICAgIC8vIEpvaW4gb24gYW4gaW52YWxpZCBVUkkgY2hhcmFjdGVyXG4gICAgICBjb25zdCBpc1ByZWZldGNoZWQgPSBwcmVmZXRjaGVkW2hyZWYgKyAnJScgKyBhc11cbiAgICAgIGlmICghaXNQcmVmZXRjaGVkKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5Ub0ludGVyc2VjdGlvbnMoY2hpbGRFbG0sICgpID0+IHtcbiAgICAgICAgICBwcmVmZXRjaChyb3V0ZXIsIGhyZWYsIGFzKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfSwgW3AsIGNoaWxkRWxtLCBocmVmLCBhcywgcm91dGVyXSlcblxuICBsZXQgeyBjaGlsZHJlbiwgcmVwbGFjZSwgc2hhbGxvdywgc2Nyb2xsLCBsb2NhbGUgfSA9IHByb3BzXG4gIC8vIERlcHJlY2F0ZWQuIFdhcm5pbmcgc2hvd24gYnkgcHJvcFR5cGUgY2hlY2suIElmIHRoZSBjaGlsZHJlbiBwcm92aWRlZCBpcyBhIHN0cmluZyAoPExpbms+ZXhhbXBsZTwvTGluaz4pIHdlIHdyYXAgaXQgaW4gYW4gPGE+IHRhZ1xuICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJykge1xuICAgIGNoaWxkcmVuID0gPGE+e2NoaWxkcmVufTwvYT5cbiAgfVxuXG4gIC8vIFRoaXMgd2lsbCByZXR1cm4gdGhlIGZpcnN0IGNoaWxkLCBpZiBtdWx0aXBsZSBhcmUgcHJvdmlkZWQgaXQgd2lsbCB0aHJvdyBhbiBlcnJvclxuICBjb25zdCBjaGlsZDogYW55ID0gQ2hpbGRyZW4ub25seShjaGlsZHJlbilcbiAgY29uc3QgY2hpbGRQcm9wczoge1xuICAgIG9uTW91c2VFbnRlcj86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyXG4gICAgb25DbGljazogUmVhY3QuTW91c2VFdmVudEhhbmRsZXJcbiAgICBocmVmPzogc3RyaW5nXG4gICAgcmVmPzogYW55XG4gIH0gPSB7XG4gICAgcmVmOiAoZWw6IGFueSkgPT4ge1xuICAgICAgaWYgKGVsKSBzZXRDaGlsZEVsbShlbClcblxuICAgICAgaWYgKGNoaWxkICYmIHR5cGVvZiBjaGlsZCA9PT0gJ29iamVjdCcgJiYgY2hpbGQucmVmKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQucmVmID09PSAnZnVuY3Rpb24nKSBjaGlsZC5yZWYoZWwpXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZC5yZWYgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgY2hpbGQucmVmLmN1cnJlbnQgPSBlbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkNsaWNrOiAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgICAgaWYgKGNoaWxkLnByb3BzICYmIHR5cGVvZiBjaGlsZC5wcm9wcy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZSlcbiAgICAgIH1cbiAgICAgIGlmICghZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIGxpbmtDbGlja2VkKGUsIHJvdXRlciwgaHJlZiwgYXMsIHJlcGxhY2UsIHNoYWxsb3csIHNjcm9sbCwgbG9jYWxlKVxuICAgICAgfVxuICAgIH0sXG4gIH1cblxuICBpZiAocCkge1xuICAgIGNoaWxkUHJvcHMub25Nb3VzZUVudGVyID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGlmICghaXNMb2NhbFVSTChocmVmKSkgcmV0dXJuXG4gICAgICBpZiAoY2hpbGQucHJvcHMgJiYgdHlwZW9mIGNoaWxkLnByb3BzLm9uTW91c2VFbnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjaGlsZC5wcm9wcy5vbk1vdXNlRW50ZXIoZSlcbiAgICAgIH1cbiAgICAgIHByZWZldGNoKHJvdXRlciwgaHJlZiwgYXMsIHsgcHJpb3JpdHk6IHRydWUgfSlcbiAgICB9XG4gIH1cblxuICAvLyBJZiBjaGlsZCBpcyBhbiA8YT4gdGFnIGFuZCBkb2Vzbid0IGhhdmUgYSBocmVmIGF0dHJpYnV0ZSwgb3IgaWYgdGhlICdwYXNzSHJlZicgcHJvcGVydHkgaXNcbiAgLy8gZGVmaW5lZCwgd2Ugc3BlY2lmeSB0aGUgY3VycmVudCAnaHJlZicsIHNvIHRoYXQgcmVwZXRpdGlvbiBpcyBub3QgbmVlZGVkIGJ5IHRoZSB1c2VyXG4gIGlmIChwcm9wcy5wYXNzSHJlZiB8fCAoY2hpbGQudHlwZSA9PT0gJ2EnICYmICEoJ2hyZWYnIGluIGNoaWxkLnByb3BzKSkpIHtcbiAgICBjaGlsZFByb3BzLmhyZWYgPSBhZGRCYXNlUGF0aChcbiAgICAgIGFkZExvY2FsZShcbiAgICAgICAgYXMsXG4gICAgICAgIHR5cGVvZiBsb2NhbGUgIT09ICd1bmRlZmluZWQnID8gbG9jYWxlIDogcm91dGVyICYmIHJvdXRlci5sb2NhbGUsXG4gICAgICAgIHJvdXRlciAmJiByb3V0ZXIuZGVmYXVsdExvY2FsZVxuICAgICAgKVxuICAgIClcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpXG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbmtcbiIsIi8qKlxuICogUmVtb3ZlcyB0aGUgdHJhaWxpbmcgc2xhc2ggb2YgYSBwYXRoIGlmIHRoZXJlIGlzIG9uZS4gUHJlc2VydmVzIHRoZSByb290IHBhdGggYC9gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2gocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHBhdGguZW5kc1dpdGgoJy8nKSAmJiBwYXRoICE9PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGhcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSB0cmFpbGluZyBzbGFzaCBvZiBhIHBhdGggYWNjb3JkaW5nIHRvIHRoZSBgdHJhaWxpbmdTbGFzaGAgb3B0aW9uXG4gKiBpbiBgbmV4dC5jb25maWcuanNgLlxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2ggPSBwcm9jZXNzLmVudi5fX05FWFRfVFJBSUxJTkdfU0xBU0hcbiAgPyAocGF0aDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgIGlmICgvXFwuW14vXStcXC8/JC8udGVzdChwYXRoKSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2gocGF0aClcbiAgICAgIH0gZWxzZSBpZiAocGF0aC5lbmRzV2l0aCgnLycpKSB7XG4gICAgICAgIHJldHVybiBwYXRoXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGF0aCArICcvJ1xuICAgICAgfVxuICAgIH1cbiAgOiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaFxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJvdXRlciwgeyBOZXh0Um91dGVyIH0gZnJvbSAnLi4vbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci9yb3V0ZXInXG5pbXBvcnQgeyBSb3V0ZXJDb250ZXh0IH0gZnJvbSAnLi4vbmV4dC1zZXJ2ZXIvbGliL3JvdXRlci1jb250ZXh0J1xuXG50eXBlIENsYXNzQXJndW1lbnRzPFQ+ID0gVCBleHRlbmRzIG5ldyAoLi4uYXJnczogaW5mZXIgVSkgPT4gYW55ID8gVSA6IGFueVxuXG50eXBlIFJvdXRlckFyZ3MgPSBDbGFzc0FyZ3VtZW50czx0eXBlb2YgUm91dGVyPlxuXG50eXBlIFNpbmdsZXRvblJvdXRlckJhc2UgPSB7XG4gIHJvdXRlcjogUm91dGVyIHwgbnVsbFxuICByZWFkeUNhbGxiYWNrczogQXJyYXk8KCkgPT4gYW55PlxuICByZWFkeShjYjogKCkgPT4gYW55KTogdm9pZFxufVxuXG5leHBvcnQgeyBSb3V0ZXIsIE5leHRSb3V0ZXIgfVxuXG5leHBvcnQgdHlwZSBTaW5nbGV0b25Sb3V0ZXIgPSBTaW5nbGV0b25Sb3V0ZXJCYXNlICYgTmV4dFJvdXRlclxuXG5jb25zdCBzaW5nbGV0b25Sb3V0ZXI6IFNpbmdsZXRvblJvdXRlckJhc2UgPSB7XG4gIHJvdXRlcjogbnVsbCwgLy8gaG9sZHMgdGhlIGFjdHVhbCByb3V0ZXIgaW5zdGFuY2VcbiAgcmVhZHlDYWxsYmFja3M6IFtdLFxuICByZWFkeShjYjogKCkgPT4gdm9pZCkge1xuICAgIGlmICh0aGlzLnJvdXRlcikgcmV0dXJuIGNiKClcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMucmVhZHlDYWxsYmFja3MucHVzaChjYilcbiAgICB9XG4gIH0sXG59XG5cbi8vIENyZWF0ZSBwdWJsaWMgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBvZiB0aGUgcm91dGVyIGluIHRoZSBzaW5nbGV0b25Sb3V0ZXJcbmNvbnN0IHVybFByb3BlcnR5RmllbGRzID0gW1xuICAncGF0aG5hbWUnLFxuICAncm91dGUnLFxuICAncXVlcnknLFxuICAnYXNQYXRoJyxcbiAgJ2NvbXBvbmVudHMnLFxuICAnaXNGYWxsYmFjaycsXG4gICdiYXNlUGF0aCcsXG4gICdsb2NhbGUnLFxuICAnbG9jYWxlcycsXG4gICdkZWZhdWx0TG9jYWxlJyxcbl1cbmNvbnN0IHJvdXRlckV2ZW50cyA9IFtcbiAgJ3JvdXRlQ2hhbmdlU3RhcnQnLFxuICAnYmVmb3JlSGlzdG9yeUNoYW5nZScsXG4gICdyb3V0ZUNoYW5nZUNvbXBsZXRlJyxcbiAgJ3JvdXRlQ2hhbmdlRXJyb3InLFxuICAnaGFzaENoYW5nZVN0YXJ0JyxcbiAgJ2hhc2hDaGFuZ2VDb21wbGV0ZScsXG5dXG5jb25zdCBjb3JlTWV0aG9kRmllbGRzID0gW1xuICAncHVzaCcsXG4gICdyZXBsYWNlJyxcbiAgJ3JlbG9hZCcsXG4gICdiYWNrJyxcbiAgJ3ByZWZldGNoJyxcbiAgJ2JlZm9yZVBvcFN0YXRlJyxcbl1cblxuLy8gRXZlbnRzIGlzIGEgc3RhdGljIHByb3BlcnR5IG9uIHRoZSByb3V0ZXIsIHRoZSByb3V0ZXIgZG9lc24ndCBoYXZlIHRvIGJlIGluaXRpYWxpemVkIHRvIHVzZSBpdFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHNpbmdsZXRvblJvdXRlciwgJ2V2ZW50cycsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiBSb3V0ZXIuZXZlbnRzXG4gIH0sXG59KVxuXG51cmxQcm9wZXJ0eUZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAvLyBIZXJlIHdlIG5lZWQgdG8gdXNlIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBiZWNhdXNlLCB3ZSBuZWVkIHRvIHJldHVyblxuICAvLyB0aGUgcHJvcGVydHkgYXNzaWduZWQgdG8gdGhlIGFjdHVhbCByb3V0ZXJcbiAgLy8gVGhlIHZhbHVlIG1pZ2h0IGdldCBjaGFuZ2VkIGFzIHdlIGNoYW5nZSByb3V0ZXMgYW5kIHRoaXMgaXMgdGhlXG4gIC8vIHByb3BlciB3YXkgdG8gYWNjZXNzIGl0XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaW5nbGV0b25Sb3V0ZXIsIGZpZWxkLCB7XG4gICAgZ2V0KCkge1xuICAgICAgY29uc3Qgcm91dGVyID0gZ2V0Um91dGVyKCkgYXMgYW55XG4gICAgICByZXR1cm4gcm91dGVyW2ZpZWxkXSBhcyBzdHJpbmdcbiAgICB9LFxuICB9KVxufSlcblxuY29yZU1ldGhvZEZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAvLyBXZSBkb24ndCByZWFsbHkga25vdyB0aGUgdHlwZXMgaGVyZSwgc28gd2UgYWRkIHRoZW0gbGF0ZXIgaW5zdGVhZFxuICA7KHNpbmdsZXRvblJvdXRlciBhcyBhbnkpW2ZpZWxkXSA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIGNvbnN0IHJvdXRlciA9IGdldFJvdXRlcigpIGFzIGFueVxuICAgIHJldHVybiByb3V0ZXJbZmllbGRdKC4uLmFyZ3MpXG4gIH1cbn0pXG5cbnJvdXRlckV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICBzaW5nbGV0b25Sb3V0ZXIucmVhZHkoKCkgPT4ge1xuICAgIFJvdXRlci5ldmVudHMub24oZXZlbnQsICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCBldmVudEZpZWxkID0gYG9uJHtldmVudC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke2V2ZW50LnN1YnN0cmluZyhcbiAgICAgICAgMVxuICAgICAgKX1gXG4gICAgICBjb25zdCBfc2luZ2xldG9uUm91dGVyID0gc2luZ2xldG9uUm91dGVyIGFzIGFueVxuICAgICAgaWYgKF9zaW5nbGV0b25Sb3V0ZXJbZXZlbnRGaWVsZF0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBfc2luZ2xldG9uUm91dGVyW2V2ZW50RmllbGRdKC4uLmFyZ3MpXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHdoZW4gcnVubmluZyB0aGUgUm91dGVyIGV2ZW50OiAke2V2ZW50RmllbGR9YClcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGAke2Vyci5tZXNzYWdlfVxcbiR7ZXJyLnN0YWNrfWApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9KVxufSlcblxuZnVuY3Rpb24gZ2V0Um91dGVyKCk6IFJvdXRlciB7XG4gIGlmICghc2luZ2xldG9uUm91dGVyLnJvdXRlcikge1xuICAgIGNvbnN0IG1lc3NhZ2UgPVxuICAgICAgJ05vIHJvdXRlciBpbnN0YW5jZSBmb3VuZC5cXG4nICtcbiAgICAgICdZb3Ugc2hvdWxkIG9ubHkgdXNlIFwibmV4dC9yb3V0ZXJcIiBpbnNpZGUgdGhlIGNsaWVudCBzaWRlIG9mIHlvdXIgYXBwLlxcbidcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSlcbiAgfVxuICByZXR1cm4gc2luZ2xldG9uUm91dGVyLnJvdXRlclxufVxuXG4vLyBFeHBvcnQgdGhlIHNpbmdsZXRvblJvdXRlciBhbmQgdGhpcyBpcyB0aGUgcHVibGljIEFQSS5cbmV4cG9ydCBkZWZhdWx0IHNpbmdsZXRvblJvdXRlciBhcyBTaW5nbGV0b25Sb3V0ZXJcblxuLy8gUmVleHBvcnQgdGhlIHdpdGhSb3V0ZSBIT0NcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd2l0aFJvdXRlciB9IGZyb20gJy4vd2l0aC1yb3V0ZXInXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZXIoKTogTmV4dFJvdXRlciB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFJvdXRlckNvbnRleHQpXG59XG5cbi8vIElOVEVSTkFMIEFQSVNcbi8vIC0tLS0tLS0tLS0tLS1cbi8vIChkbyBub3QgdXNlIGZvbGxvd2luZyBleHBvcnRzIGluc2lkZSB0aGUgYXBwKVxuXG4vLyBDcmVhdGUgYSByb3V0ZXIgYW5kIGFzc2lnbiBpdCBhcyB0aGUgc2luZ2xldG9uIGluc3RhbmNlLlxuLy8gVGhpcyBpcyB1c2VkIGluIGNsaWVudCBzaWRlIHdoZW4gd2UgYXJlIGluaXRpbGl6aW5nIHRoZSBhcHAuXG4vLyBUaGlzIHNob3VsZCAqKm5vdCoqIHVzZSBpbnNpZGUgdGhlIHNlcnZlci5cbmV4cG9ydCBjb25zdCBjcmVhdGVSb3V0ZXIgPSAoLi4uYXJnczogUm91dGVyQXJncyk6IFJvdXRlciA9PiB7XG4gIHNpbmdsZXRvblJvdXRlci5yb3V0ZXIgPSBuZXcgUm91dGVyKC4uLmFyZ3MpXG4gIHNpbmdsZXRvblJvdXRlci5yZWFkeUNhbGxiYWNrcy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgc2luZ2xldG9uUm91dGVyLnJlYWR5Q2FsbGJhY2tzID0gW11cblxuICByZXR1cm4gc2luZ2xldG9uUm91dGVyLnJvdXRlclxufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIHRoZSBgd2l0aFJvdXRlcmAgcm91dGVyIGluc3RhbmNlXG5leHBvcnQgZnVuY3Rpb24gbWFrZVB1YmxpY1JvdXRlckluc3RhbmNlKHJvdXRlcjogUm91dGVyKTogTmV4dFJvdXRlciB7XG4gIGNvbnN0IF9yb3V0ZXIgPSByb3V0ZXIgYXMgYW55XG4gIGNvbnN0IGluc3RhbmNlID0ge30gYXMgYW55XG5cbiAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiB1cmxQcm9wZXJ0eUZpZWxkcykge1xuICAgIGlmICh0eXBlb2YgX3JvdXRlcltwcm9wZXJ0eV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBpbnN0YW5jZVtwcm9wZXJ0eV0gPSBPYmplY3QuYXNzaWduKFxuICAgICAgICBBcnJheS5pc0FycmF5KF9yb3V0ZXJbcHJvcGVydHldKSA/IFtdIDoge30sXG4gICAgICAgIF9yb3V0ZXJbcHJvcGVydHldXG4gICAgICApIC8vIG1ha2VzIHN1cmUgcXVlcnkgaXMgbm90IHN0YXRlZnVsXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGluc3RhbmNlW3Byb3BlcnR5XSA9IF9yb3V0ZXJbcHJvcGVydHldXG4gIH1cblxuICAvLyBFdmVudHMgaXMgYSBzdGF0aWMgcHJvcGVydHkgb24gdGhlIHJvdXRlciwgdGhlIHJvdXRlciBkb2Vzbid0IGhhdmUgdG8gYmUgaW5pdGlhbGl6ZWQgdG8gdXNlIGl0XG4gIGluc3RhbmNlLmV2ZW50cyA9IFJvdXRlci5ldmVudHNcblxuICBjb3JlTWV0aG9kRmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgaW5zdGFuY2VbZmllbGRdID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICByZXR1cm4gX3JvdXRlcltmaWVsZF0oLi4uYXJncylcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIGluc3RhbmNlXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBOZXh0Q29tcG9uZW50VHlwZSwgTmV4dFBhZ2VDb250ZXh0IH0gZnJvbSAnLi4vbmV4dC1zZXJ2ZXIvbGliL3V0aWxzJ1xuaW1wb3J0IHsgTmV4dFJvdXRlciwgdXNlUm91dGVyIH0gZnJvbSAnLi9yb3V0ZXInXG5cbmV4cG9ydCB0eXBlIFdpdGhSb3V0ZXJQcm9wcyA9IHtcbiAgcm91dGVyOiBOZXh0Um91dGVyXG59XG5cbmV4cG9ydCB0eXBlIEV4Y2x1ZGVSb3V0ZXJQcm9wczxQPiA9IFBpY2s8XG4gIFAsXG4gIEV4Y2x1ZGU8a2V5b2YgUCwga2V5b2YgV2l0aFJvdXRlclByb3BzPlxuPlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoUm91dGVyPFxuICBQIGV4dGVuZHMgV2l0aFJvdXRlclByb3BzLFxuICBDID0gTmV4dFBhZ2VDb250ZXh0XG4+KFxuICBDb21wb3NlZENvbXBvbmVudDogTmV4dENvbXBvbmVudFR5cGU8QywgYW55LCBQPlxuKTogUmVhY3QuQ29tcG9uZW50VHlwZTxFeGNsdWRlUm91dGVyUHJvcHM8UD4+IHtcbiAgZnVuY3Rpb24gV2l0aFJvdXRlcldyYXBwZXIocHJvcHM6IGFueSkge1xuICAgIHJldHVybiA8Q29tcG9zZWRDb21wb25lbnQgcm91dGVyPXt1c2VSb3V0ZXIoKX0gey4uLnByb3BzfSAvPlxuICB9XG5cbiAgV2l0aFJvdXRlcldyYXBwZXIuZ2V0SW5pdGlhbFByb3BzID0gQ29tcG9zZWRDb21wb25lbnQuZ2V0SW5pdGlhbFByb3BzXG4gIC8vIFRoaXMgaXMgbmVlZGVkIHRvIGFsbG93IGNoZWNraW5nIGZvciBjdXN0b20gZ2V0SW5pdGlhbFByb3BzIGluIF9hcHBcbiAgOyhXaXRoUm91dGVyV3JhcHBlciBhcyBhbnkpLm9yaWdHZXRJbml0aWFsUHJvcHMgPSAoQ29tcG9zZWRDb21wb25lbnQgYXMgYW55KS5vcmlnR2V0SW5pdGlhbFByb3BzXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3QgbmFtZSA9XG4gICAgICBDb21wb3NlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb3NlZENvbXBvbmVudC5uYW1lIHx8ICdVbmtub3duJ1xuICAgIFdpdGhSb3V0ZXJXcmFwcGVyLmRpc3BsYXlOYW1lID0gYHdpdGhSb3V0ZXIoJHtuYW1lfSlgXG4gIH1cblxuICByZXR1cm4gV2l0aFJvdXRlcldyYXBwZXJcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBUb2tlbml6ZSBpbnB1dCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGxleGVyKHN0cikge1xuICAgIHZhciB0b2tlbnMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBzdHIubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjaGFyID0gc3RyW2ldO1xuICAgICAgICBpZiAoY2hhciA9PT0gXCIqXCIgfHwgY2hhciA9PT0gXCIrXCIgfHwgY2hhciA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgdHlwZTogXCJNT0RJRklFUlwiLCBpbmRleDogaSwgdmFsdWU6IHN0cltpKytdIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYXIgPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IFwiRVNDQVBFRF9DSEFSXCIsIGluZGV4OiBpKyssIHZhbHVlOiBzdHJbaSsrXSB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyID09PSBcIntcIikge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goeyB0eXBlOiBcIk9QRU5cIiwgaW5kZXg6IGksIHZhbHVlOiBzdHJbaSsrXSB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyID09PSBcIn1cIikge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goeyB0eXBlOiBcIkNMT1NFXCIsIGluZGV4OiBpLCB2YWx1ZTogc3RyW2krK10gfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhciA9PT0gXCI6XCIpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gXCJcIjtcbiAgICAgICAgICAgIHZhciBqID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoaiA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGopO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAvLyBgMC05YFxuICAgICAgICAgICAgICAgIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIGBBLVpgXG4gICAgICAgICAgICAgICAgICAgIChjb2RlID49IDY1ICYmIGNvZGUgPD0gOTApIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIGBhLXpgXG4gICAgICAgICAgICAgICAgICAgIChjb2RlID49IDk3ICYmIGNvZGUgPD0gMTIyKSB8fFxuICAgICAgICAgICAgICAgICAgICAvLyBgX2BcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9PT0gOTUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSArPSBzdHJbaisrXTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFuYW1lKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNaXNzaW5nIHBhcmFtZXRlciBuYW1lIGF0IFwiICsgaSk7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IFwiTkFNRVwiLCBpbmRleDogaSwgdmFsdWU6IG5hbWUgfSk7XG4gICAgICAgICAgICBpID0gajtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyID09PSBcIihcIikge1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gMTtcbiAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gXCJcIjtcbiAgICAgICAgICAgIHZhciBqID0gaSArIDE7XG4gICAgICAgICAgICBpZiAoc3RyW2pdID09PSBcIj9cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXR0ZXJuIGNhbm5vdCBzdGFydCB3aXRoIFxcXCI/XFxcIiBhdCBcIiArIGopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGogPCBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0cltqXSA9PT0gXCJcXFxcXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiArPSBzdHJbaisrXSArIHN0cltqKytdO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0cltqXSA9PT0gXCIpXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQtLTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdHJbal0gPT09IFwiKFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJbaiArIDFdICE9PSBcIj9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhcHR1cmluZyBncm91cHMgYXJlIG5vdCBhbGxvd2VkIGF0IFwiICsgaik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGF0dGVybiArPSBzdHJbaisrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb3VudClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5iYWxhbmNlZCBwYXR0ZXJuIGF0IFwiICsgaSk7XG4gICAgICAgICAgICBpZiAoIXBhdHRlcm4pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk1pc3NpbmcgcGF0dGVybiBhdCBcIiArIGkpO1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goeyB0eXBlOiBcIlBBVFRFUk5cIiwgaW5kZXg6IGksIHZhbHVlOiBwYXR0ZXJuIH0pO1xuICAgICAgICAgICAgaSA9IGo7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IFwiQ0hBUlwiLCBpbmRleDogaSwgdmFsdWU6IHN0cltpKytdIH0pO1xuICAgIH1cbiAgICB0b2tlbnMucHVzaCh7IHR5cGU6IFwiRU5EXCIsIGluZGV4OiBpLCB2YWx1ZTogXCJcIiB9KTtcbiAgICByZXR1cm4gdG9rZW5zO1xufVxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKHN0ciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIHRva2VucyA9IGxleGVyKHN0cik7XG4gICAgdmFyIF9hID0gb3B0aW9ucy5wcmVmaXhlcywgcHJlZml4ZXMgPSBfYSA9PT0gdm9pZCAwID8gXCIuL1wiIDogX2E7XG4gICAgdmFyIGRlZmF1bHRQYXR0ZXJuID0gXCJbXlwiICsgZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8IFwiLyM/XCIpICsgXCJdKz9cIjtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBwYXRoID0gXCJcIjtcbiAgICB2YXIgdHJ5Q29uc3VtZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIGlmIChpIDwgdG9rZW5zLmxlbmd0aCAmJiB0b2tlbnNbaV0udHlwZSA9PT0gdHlwZSlcbiAgICAgICAgICAgIHJldHVybiB0b2tlbnNbaSsrXS52YWx1ZTtcbiAgICB9O1xuICAgIHZhciBtdXN0Q29uc3VtZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRyeUNvbnN1bWUodHlwZSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YXIgX2EgPSB0b2tlbnNbaV0sIG5leHRUeXBlID0gX2EudHlwZSwgaW5kZXggPSBfYS5pbmRleDtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVuZXhwZWN0ZWQgXCIgKyBuZXh0VHlwZSArIFwiIGF0IFwiICsgaW5kZXggKyBcIiwgZXhwZWN0ZWQgXCIgKyB0eXBlKTtcbiAgICB9O1xuICAgIHZhciBjb25zdW1lVGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHdoaWxlICgodmFsdWUgPSB0cnlDb25zdW1lKFwiQ0hBUlwiKSB8fCB0cnlDb25zdW1lKFwiRVNDQVBFRF9DSEFSXCIpKSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICB3aGlsZSAoaSA8IHRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGNoYXIgPSB0cnlDb25zdW1lKFwiQ0hBUlwiKTtcbiAgICAgICAgdmFyIG5hbWUgPSB0cnlDb25zdW1lKFwiTkFNRVwiKTtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSB0cnlDb25zdW1lKFwiUEFUVEVSTlwiKTtcbiAgICAgICAgaWYgKG5hbWUgfHwgcGF0dGVybikge1xuICAgICAgICAgICAgdmFyIHByZWZpeCA9IGNoYXIgfHwgXCJcIjtcbiAgICAgICAgICAgIGlmIChwcmVmaXhlcy5pbmRleE9mKHByZWZpeCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcGF0aCArPSBwcmVmaXg7XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGF0aCk7XG4gICAgICAgICAgICAgICAgcGF0aCA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgICAgICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgICAgICAgICBzdWZmaXg6IFwiXCIsXG4gICAgICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybiB8fCBkZWZhdWx0UGF0dGVybixcbiAgICAgICAgICAgICAgICBtb2RpZmllcjogdHJ5Q29uc3VtZShcIk1PRElGSUVSXCIpIHx8IFwiXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlID0gY2hhciB8fCB0cnlDb25zdW1lKFwiRVNDQVBFRF9DSEFSXCIpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdmFsdWU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGF0aCk7XG4gICAgICAgICAgICBwYXRoID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3BlbiA9IHRyeUNvbnN1bWUoXCJPUEVOXCIpO1xuICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgdmFyIHByZWZpeCA9IGNvbnN1bWVUZXh0KCk7XG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gdHJ5Q29uc3VtZShcIk5BTUVcIikgfHwgXCJcIjtcbiAgICAgICAgICAgIHZhciBwYXR0ZXJuXzEgPSB0cnlDb25zdW1lKFwiUEFUVEVSTlwiKSB8fCBcIlwiO1xuICAgICAgICAgICAgdmFyIHN1ZmZpeCA9IGNvbnN1bWVUZXh0KCk7XG4gICAgICAgICAgICBtdXN0Q29uc3VtZShcIkNMT1NFXCIpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVfMSB8fCAocGF0dGVybl8xID8ga2V5KysgOiBcIlwiKSxcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiBuYW1lXzEgJiYgIXBhdHRlcm5fMSA/IGRlZmF1bHRQYXR0ZXJuIDogcGF0dGVybl8xLFxuICAgICAgICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgICAgICAgIHN1ZmZpeDogc3VmZml4LFxuICAgICAgICAgICAgICAgIG1vZGlmaWVyOiB0cnlDb25zdW1lKFwiTU9ESUZJRVJcIikgfHwgXCJcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBtdXN0Q29uc3VtZShcIkVORFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqL1xuZnVuY3Rpb24gY29tcGlsZShzdHIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGU7XG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uKHRva2Vucywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIHJlRmxhZ3MgPSBmbGFncyhvcHRpb25zKTtcbiAgICB2YXIgX2EgPSBvcHRpb25zLmVuY29kZSwgZW5jb2RlID0gX2EgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9IDogX2EsIF9iID0gb3B0aW9ucy52YWxpZGF0ZSwgdmFsaWRhdGUgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iO1xuICAgIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICAgIHZhciBtYXRjaGVzID0gdG9rZW5zLm1hcChmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyB0b2tlbi5wYXR0ZXJuICsgXCIpJFwiLCByZUZsYWdzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgcGF0aCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcGF0aCArPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGEgPyBkYXRhW3Rva2VuLm5hbWVdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIG9wdGlvbmFsID0gdG9rZW4ubW9kaWZpZXIgPT09IFwiP1wiIHx8IHRva2VuLm1vZGlmaWVyID09PSBcIipcIjtcbiAgICAgICAgICAgIHZhciByZXBlYXQgPSB0b2tlbi5tb2RpZmllciA9PT0gXCIqXCIgfHwgdG9rZW4ubW9kaWZpZXIgPT09IFwiK1wiO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXBlYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFxcXCJcIiArIHRva2VuLm5hbWUgKyBcIlxcXCIgdG8gbm90IHJlcGVhdCwgYnV0IGdvdCBhbiBhcnJheVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFxcXCJcIiArIHRva2VuLm5hbWUgKyBcIlxcXCIgdG8gbm90IGJlIGVtcHR5XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0ZSAmJiAhbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYWxsIFxcXCJcIiArIHRva2VuLm5hbWUgKyBcIlxcXCIgdG8gbWF0Y2ggXFxcIlwiICsgdG9rZW4ucGF0dGVybiArIFwiXFxcIiwgYnV0IGdvdCBcXFwiXCIgKyBzZWdtZW50ICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudCArIHRva2VuLnN1ZmZpeDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHZhciBzZWdtZW50ID0gZW5jb2RlKFN0cmluZyh2YWx1ZSksIHRva2VuKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGUgJiYgIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgXFxcIlwiICsgdG9rZW4ubmFtZSArIFwiXFxcIiB0byBtYXRjaCBcXFwiXCIgKyB0b2tlbi5wYXR0ZXJuICsgXCJcXFwiLCBidXQgZ290IFxcXCJcIiArIHNlZ21lbnQgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudCArIHRva2VuLnN1ZmZpeDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25hbClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciB0eXBlT2ZNZXNzYWdlID0gcmVwZWF0ID8gXCJhbiBhcnJheVwiIDogXCJhIHN0cmluZ1wiO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFxcXCJcIiArIHRva2VuLm5hbWUgKyBcIlxcXCIgdG8gYmUgXCIgKyB0eXBlT2ZNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xufVxuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvbjtcbi8qKlxuICogQ3JlYXRlIHBhdGggbWF0Y2ggZnVuY3Rpb24gZnJvbSBgcGF0aC10by1yZWdleHBgIHNwZWMuXG4gKi9cbmZ1bmN0aW9uIG1hdGNoKHN0ciwgb3B0aW9ucykge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHN0ciwga2V5cywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlZ2V4cFRvRnVuY3Rpb24ocmUsIGtleXMsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5tYXRjaCA9IG1hdGNoO1xuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIG1hdGNoIGZ1bmN0aW9uIGZyb20gYHBhdGgtdG8tcmVnZXhwYCBvdXRwdXQuXG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvRnVuY3Rpb24ocmUsIGtleXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBfYSA9IG9wdGlvbnMuZGVjb2RlLCBkZWNvZGUgPSBfYSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0gOiBfYTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgICAgIHZhciBtID0gcmUuZXhlYyhwYXRobmFtZSk7XG4gICAgICAgIGlmICghbSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIHBhdGggPSBtWzBdLCBpbmRleCA9IG0uaW5kZXg7XG4gICAgICAgIHZhciBwYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGlmIChtW2ldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2kgLSAxXTtcbiAgICAgICAgICAgIGlmIChrZXkubW9kaWZpZXIgPT09IFwiKlwiIHx8IGtleS5tb2RpZmllciA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXNba2V5Lm5hbWVdID0gbVtpXS5zcGxpdChrZXkucHJlZml4ICsga2V5LnN1ZmZpeCkubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlKHZhbHVlLCBrZXkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW2tleS5uYW1lXSA9IGRlY29kZShtW2ldLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcGF0aDogcGF0aCwgaW5kZXg6IGluZGV4LCBwYXJhbXM6IHBhcmFtcyB9O1xuICAgIH07XG59XG5leHBvcnRzLnJlZ2V4cFRvRnVuY3Rpb24gPSByZWdleHBUb0Z1bmN0aW9uO1xuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG59XG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGZsYWdzKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/IFwiXCIgOiBcImlcIjtcbn1cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cChwYXRoLCBrZXlzKSB7XG4gICAgaWYgKCFrZXlzKVxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICAgIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKTtcbiAgICBpZiAoZ3JvdXBzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IGksXG4gICAgICAgICAgICAgICAgcHJlZml4OiBcIlwiLFxuICAgICAgICAgICAgICAgIHN1ZmZpeDogXCJcIixcbiAgICAgICAgICAgICAgICBtb2RpZmllcjogXCJcIixcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiBcIlwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAocGF0aHMsIGtleXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgcGFydHMgPSBwYXRocy5tYXAoZnVuY3Rpb24gKHBhdGgpIHsgcmV0dXJuIHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKS5zb3VyY2U7IH0pO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKD86XCIgKyBwYXJ0cy5qb2luKFwifFwiKSArIFwiKVwiLCBmbGFncyhvcHRpb25zKSk7XG59XG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRva2Vuc1RvUmVnZXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKTtcbn1cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdleHAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgX2EgPSBvcHRpb25zLnN0cmljdCwgc3RyaWN0ID0gX2EgPT09IHZvaWQgMCA/IGZhbHNlIDogX2EsIF9iID0gb3B0aW9ucy5zdGFydCwgc3RhcnQgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iLCBfYyA9IG9wdGlvbnMuZW5kLCBlbmQgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jLCBfZCA9IG9wdGlvbnMuZW5jb2RlLCBlbmNvZGUgPSBfZCA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0gOiBfZDtcbiAgICB2YXIgZW5kc1dpdGggPSBcIltcIiArIGVzY2FwZVN0cmluZyhvcHRpb25zLmVuZHNXaXRoIHx8IFwiXCIpICsgXCJdfCRcIjtcbiAgICB2YXIgZGVsaW1pdGVyID0gXCJbXCIgKyBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgXCIvIz9cIikgKyBcIl1cIjtcbiAgICB2YXIgcm91dGUgPSBzdGFydCA/IFwiXlwiIDogXCJcIjtcbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICAgIGZvciAodmFyIF9pID0gMCwgdG9rZW5zXzEgPSB0b2tlbnM7IF9pIDwgdG9rZW5zXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRva2Vuc18xW19pXTtcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKGVuY29kZSh0b2tlbikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyhlbmNvZGUodG9rZW4ucHJlZml4KSk7XG4gICAgICAgICAgICB2YXIgc3VmZml4ID0gZXNjYXBlU3RyaW5nKGVuY29kZSh0b2tlbi5zdWZmaXgpKTtcbiAgICAgICAgICAgIGlmICh0b2tlbi5wYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleXMpXG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgaWYgKHByZWZpeCB8fCBzdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuLm1vZGlmaWVyID09PSBcIitcIiB8fCB0b2tlbi5tb2RpZmllciA9PT0gXCIqXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2QgPSB0b2tlbi5tb2RpZmllciA9PT0gXCIqXCIgPyBcIj9cIiA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSArPSBcIig/OlwiICsgcHJlZml4ICsgXCIoKD86XCIgKyB0b2tlbi5wYXR0ZXJuICsgXCIpKD86XCIgKyBzdWZmaXggKyBwcmVmaXggKyBcIig/OlwiICsgdG9rZW4ucGF0dGVybiArIFwiKSkqKVwiICsgc3VmZml4ICsgXCIpXCIgKyBtb2Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSArPSBcIig/OlwiICsgcHJlZml4ICsgXCIoXCIgKyB0b2tlbi5wYXR0ZXJuICsgXCIpXCIgKyBzdWZmaXggKyBcIilcIiArIHRva2VuLm1vZGlmaWVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByb3V0ZSArPSBcIihcIiArIHRva2VuLnBhdHRlcm4gKyBcIilcIiArIHRva2VuLm1vZGlmaWVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvdXRlICs9IFwiKD86XCIgKyBwcmVmaXggKyBzdWZmaXggKyBcIilcIiArIHRva2VuLm1vZGlmaWVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChlbmQpIHtcbiAgICAgICAgaWYgKCFzdHJpY3QpXG4gICAgICAgICAgICByb3V0ZSArPSBkZWxpbWl0ZXIgKyBcIj9cIjtcbiAgICAgICAgcm91dGUgKz0gIW9wdGlvbnMuZW5kc1dpdGggPyBcIiRcIiA6IFwiKD89XCIgKyBlbmRzV2l0aCArIFwiKVwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGVuZFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIGlzRW5kRGVsaW1pdGVkID0gdHlwZW9mIGVuZFRva2VuID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICA/IGRlbGltaXRlci5pbmRleE9mKGVuZFRva2VuW2VuZFRva2VuLmxlbmd0aCAtIDFdKSA+IC0xXG4gICAgICAgICAgICA6IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIGVuZFRva2VuID09PSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghc3RyaWN0KSB7XG4gICAgICAgICAgICByb3V0ZSArPSBcIig/OlwiICsgZGVsaW1pdGVyICsgXCIoPz1cIiArIGVuZHNXaXRoICsgXCIpKT9cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRW5kRGVsaW1pdGVkKSB7XG4gICAgICAgICAgICByb3V0ZSArPSBcIig/PVwiICsgZGVsaW1pdGVyICsgXCJ8XCIgKyBlbmRzV2l0aCArIFwiKVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVnRXhwKHJvdXRlLCBmbGFncyhvcHRpb25zKSk7XG59XG5leHBvcnRzLnRva2Vuc1RvUmVnZXhwID0gdG9rZW5zVG9SZWdleHA7XG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gICAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApXG4gICAgICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCBrZXlzKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSlcbiAgICAgICAgcmV0dXJuIGFycmF5VG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5wYXRoVG9SZWdleHAgPSBwYXRoVG9SZWdleHA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlUGF0aChcbiAgcGF0aG5hbWU6IHN0cmluZyxcbiAgbG9jYWxlcz86IHN0cmluZ1tdXG4pOiB7XG4gIGRldGVjdGVkTG9jYWxlPzogc3RyaW5nXG4gIHBhdGhuYW1lOiBzdHJpbmdcbn0ge1xuICBsZXQgZGV0ZWN0ZWRMb2NhbGU6IHN0cmluZyB8IHVuZGVmaW5lZFxuICAvLyBmaXJzdCBpdGVtIHdpbGwgYmUgZW1wdHkgc3RyaW5nIGZyb20gc3BsaXR0aW5nIGF0IGZpcnN0IGNoYXJcbiAgY29uc3QgcGF0aG5hbWVQYXJ0cyA9IHBhdGhuYW1lLnNwbGl0KCcvJylcblxuICA7KGxvY2FsZXMgfHwgW10pLnNvbWUoKGxvY2FsZSkgPT4ge1xuICAgIGlmIChwYXRobmFtZVBhcnRzWzFdLnRvTG93ZXJDYXNlKCkgPT09IGxvY2FsZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBkZXRlY3RlZExvY2FsZSA9IGxvY2FsZVxuICAgICAgcGF0aG5hbWVQYXJ0cy5zcGxpY2UoMSwgMSlcbiAgICAgIHBhdGhuYW1lID0gcGF0aG5hbWVQYXJ0cy5qb2luKCcvJykgfHwgJy8nXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfSlcblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIGRldGVjdGVkTG9jYWxlLFxuICB9XG59XG4iLCIvKlxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSBKYXNvbiBNaWxsZXIgKGh0dHBzOi8vamFzb25mb3JtYXQuY29tLylcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuKi9cblxuLy8gVGhpcyBmaWxlIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9kZXZlbG9waXQvbWl0dC9ibG9iL3YxLjEuMy9zcmMvaW5kZXguanNcbi8vIEl0J3MgYmVlbiBlZGl0ZWQgZm9yIHRoZSBuZWVkcyBvZiB0aGlzIHNjcmlwdFxuLy8gU2VlIHRoZSBMSUNFTlNFIGF0IHRoZSB0b3Agb2YgdGhlIGZpbGVcblxudHlwZSBIYW5kbGVyID0gKC4uLmV2dHM6IGFueVtdKSA9PiB2b2lkXG5cbmV4cG9ydCB0eXBlIE1pdHRFbWl0dGVyID0ge1xuICBvbih0eXBlOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIpOiB2b2lkXG4gIG9mZih0eXBlOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIpOiB2b2lkXG4gIGVtaXQodHlwZTogc3RyaW5nLCAuLi5ldnRzOiBhbnlbXSk6IHZvaWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWl0dCgpOiBNaXR0RW1pdHRlciB7XG4gIGNvbnN0IGFsbDogeyBbczogc3RyaW5nXTogSGFuZGxlcltdIH0gPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgcmV0dXJuIHtcbiAgICBvbih0eXBlOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIpIHtcbiAgICAgIDsoYWxsW3R5cGVdIHx8IChhbGxbdHlwZV0gPSBbXSkpLnB1c2goaGFuZGxlcilcbiAgICB9LFxuXG4gICAgb2ZmKHR5cGU6IHN0cmluZywgaGFuZGxlcjogSGFuZGxlcikge1xuICAgICAgaWYgKGFsbFt0eXBlXSkge1xuICAgICAgICBhbGxbdHlwZV0uc3BsaWNlKGFsbFt0eXBlXS5pbmRleE9mKGhhbmRsZXIpID4+PiAwLCAxKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBlbWl0KHR5cGU6IHN0cmluZywgLi4uZXZ0czogYW55W10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cbiAgICAgIDsoYWxsW3R5cGVdIHx8IFtdKS5zbGljZSgpLm1hcCgoaGFuZGxlcjogSGFuZGxlcikgPT4ge1xuICAgICAgICBoYW5kbGVyKC4uLmV2dHMpXG4gICAgICB9KVxuICAgIH0sXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBfX05FWFRfREFUQV9fICovXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1jb25zb2xlXG5pbXBvcnQgeyBQYXJzZWRVcmxRdWVyeSB9IGZyb20gJ3F1ZXJ5c3RyaW5nJ1xuaW1wb3J0IHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVXJsT2JqZWN0IH0gZnJvbSAndXJsJ1xuaW1wb3J0IHtcbiAgbm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2gsXG4gIHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoLFxufSBmcm9tICcuLi8uLi8uLi9jbGllbnQvbm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoJ1xuaW1wb3J0IHsgR29vZFBhZ2VDYWNoZSwgU3R5bGVTaGVldFR1cGxlIH0gZnJvbSAnLi4vLi4vLi4vY2xpZW50L3BhZ2UtbG9hZGVyJ1xuaW1wb3J0IHsgZGVub3JtYWxpemVQYWdlUGF0aCB9IGZyb20gJy4uLy4uL3NlcnZlci9kZW5vcm1hbGl6ZS1wYWdlLXBhdGgnXG5pbXBvcnQgbWl0dCwgeyBNaXR0RW1pdHRlciB9IGZyb20gJy4uL21pdHQnXG5pbXBvcnQge1xuICBBcHBDb250ZXh0VHlwZSxcbiAgZm9ybWF0V2l0aFZhbGlkYXRpb24sXG4gIGdldExvY2F0aW9uT3JpZ2luLFxuICBnZXRVUkwsXG4gIGxvYWRHZXRJbml0aWFsUHJvcHMsXG4gIE5leHRQYWdlQ29udGV4dCxcbiAgU1QsXG59IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IHsgaXNEeW5hbWljUm91dGUgfSBmcm9tICcuL3V0aWxzL2lzLWR5bmFtaWMnXG5pbXBvcnQgeyBwYXJzZVJlbGF0aXZlVXJsIH0gZnJvbSAnLi91dGlscy9wYXJzZS1yZWxhdGl2ZS11cmwnXG5pbXBvcnQgeyBzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5IH0gZnJvbSAnLi91dGlscy9xdWVyeXN0cmluZydcbmltcG9ydCByZXNvbHZlUmV3cml0ZXMgZnJvbSAnLi91dGlscy9yZXNvbHZlLXJld3JpdGVzJ1xuaW1wb3J0IHsgZ2V0Um91dGVNYXRjaGVyIH0gZnJvbSAnLi91dGlscy9yb3V0ZS1tYXRjaGVyJ1xuaW1wb3J0IHsgZ2V0Um91dGVSZWdleCB9IGZyb20gJy4vdXRpbHMvcm91dGUtcmVnZXgnXG5pbXBvcnQgZXNjYXBlUGF0aERlbGltaXRlcnMgZnJvbSAnLi91dGlscy9lc2NhcGUtcGF0aC1kZWxpbWl0ZXJzJ1xuXG5pbnRlcmZhY2UgVHJhbnNpdGlvbk9wdGlvbnMge1xuICBzaGFsbG93PzogYm9vbGVhblxuICBsb2NhbGU/OiBzdHJpbmcgfCBmYWxzZVxufVxuXG5pbnRlcmZhY2UgTmV4dEhpc3RvcnlTdGF0ZSB7XG4gIHVybDogc3RyaW5nXG4gIGFzOiBzdHJpbmdcbiAgb3B0aW9uczogVHJhbnNpdGlvbk9wdGlvbnNcbn1cblxudHlwZSBIaXN0b3J5U3RhdGUgPSBudWxsIHwgeyBfX046IGZhbHNlIH0gfCAoeyBfX046IHRydWUgfSAmIE5leHRIaXN0b3J5U3RhdGUpXG5cbmNvbnN0IGJhc2VQYXRoID0gKHByb2Nlc3MuZW52Ll9fTkVYVF9ST1VURVJfQkFTRVBBVEggYXMgc3RyaW5nKSB8fCAnJ1xuXG5mdW5jdGlvbiBidWlsZENhbmNlbGxhdGlvbkVycm9yKCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoJ1JvdXRlIENhbmNlbGxlZCcpLCB7XG4gICAgY2FuY2VsbGVkOiB0cnVlLFxuICB9KVxufVxuXG5mdW5jdGlvbiBhZGRQYXRoUHJlZml4KHBhdGg6IHN0cmluZywgcHJlZml4Pzogc3RyaW5nKSB7XG4gIHJldHVybiBwcmVmaXggJiYgcGF0aC5zdGFydHNXaXRoKCcvJylcbiAgICA/IHBhdGggPT09ICcvJ1xuICAgICAgPyBub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaChwcmVmaXgpXG4gICAgICA6IGAke3ByZWZpeH0ke3BhdGh9YFxuICAgIDogcGF0aFxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkTG9jYWxlKFxuICBwYXRoOiBzdHJpbmcsXG4gIGxvY2FsZT86IHN0cmluZyB8IGZhbHNlLFxuICBkZWZhdWx0TG9jYWxlPzogc3RyaW5nXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICByZXR1cm4gbG9jYWxlICYmIGxvY2FsZSAhPT0gZGVmYXVsdExvY2FsZSAmJiAhcGF0aC5zdGFydHNXaXRoKCcvJyArIGxvY2FsZSlcbiAgICAgID8gYWRkUGF0aFByZWZpeChwYXRoLCAnLycgKyBsb2NhbGUpXG4gICAgICA6IHBhdGhcbiAgfVxuICByZXR1cm4gcGF0aFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsTG9jYWxlKHBhdGg6IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKSB7XG4gIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgcmV0dXJuIGxvY2FsZSAmJiBwYXRoLnN0YXJ0c1dpdGgoJy8nICsgbG9jYWxlKVxuICAgICAgPyBwYXRoLnN1YnN0cihsb2NhbGUubGVuZ3RoICsgMSkgfHwgJy8nXG4gICAgICA6IHBhdGhcbiAgfVxuICByZXR1cm4gcGF0aFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzQmFzZVBhdGgocGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBwYXRoID09PSBiYXNlUGF0aCB8fCBwYXRoLnN0YXJ0c1dpdGgoYmFzZVBhdGggKyAnLycpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRCYXNlUGF0aChwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyB3ZSBvbmx5IGFkZCB0aGUgYmFzZXBhdGggb24gcmVsYXRpdmUgdXJsc1xuICByZXR1cm4gYWRkUGF0aFByZWZpeChwYXRoLCBiYXNlUGF0aClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbEJhc2VQYXRoKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBwYXRoLnNsaWNlKGJhc2VQYXRoLmxlbmd0aCkgfHwgJy8nXG59XG5cbi8qKlxuICogRGV0ZWN0cyB3aGV0aGVyIGEgZ2l2ZW4gdXJsIGlzIHJvdXRhYmxlIGJ5IHRoZSBOZXh0LmpzIHJvdXRlciAoYnJvd3NlciBvbmx5KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxVUkwodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKHVybC5zdGFydHNXaXRoKCcvJykpIHJldHVybiB0cnVlXG4gIHRyeSB7XG4gICAgLy8gYWJzb2x1dGUgdXJscyBjYW4gYmUgbG9jYWwgaWYgdGhleSBhcmUgb24gdGhlIHNhbWUgb3JpZ2luXG4gICAgY29uc3QgbG9jYXRpb25PcmlnaW4gPSBnZXRMb2NhdGlvbk9yaWdpbigpXG4gICAgY29uc3QgcmVzb2x2ZWQgPSBuZXcgVVJMKHVybCwgbG9jYXRpb25PcmlnaW4pXG4gICAgcmV0dXJuIHJlc29sdmVkLm9yaWdpbiA9PT0gbG9jYXRpb25PcmlnaW4gJiYgaGFzQmFzZVBhdGgocmVzb2x2ZWQucGF0aG5hbWUpXG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG50eXBlIFVybCA9IFVybE9iamVjdCB8IHN0cmluZ1xuXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJwb2xhdGVBcyhcbiAgcm91dGU6IHN0cmluZyxcbiAgYXNQYXRobmFtZTogc3RyaW5nLFxuICBxdWVyeTogUGFyc2VkVXJsUXVlcnlcbikge1xuICBsZXQgaW50ZXJwb2xhdGVkUm91dGUgPSAnJ1xuXG4gIGNvbnN0IGR5bmFtaWNSZWdleCA9IGdldFJvdXRlUmVnZXgocm91dGUpXG4gIGNvbnN0IGR5bmFtaWNHcm91cHMgPSBkeW5hbWljUmVnZXguZ3JvdXBzXG4gIGNvbnN0IGR5bmFtaWNNYXRjaGVzID1cbiAgICAvLyBUcnkgdG8gbWF0Y2ggdGhlIGR5bmFtaWMgcm91dGUgYWdhaW5zdCB0aGUgYXNQYXRoXG4gICAgKGFzUGF0aG5hbWUgIT09IHJvdXRlID8gZ2V0Um91dGVNYXRjaGVyKGR5bmFtaWNSZWdleCkoYXNQYXRobmFtZSkgOiAnJykgfHxcbiAgICAvLyBGYWxsIGJhY2sgdG8gcmVhZGluZyB0aGUgdmFsdWVzIGZyb20gdGhlIGhyZWZcbiAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyB0YWtlIHByaW9yaXR5OyBhbHNvIG5lZWQgdG8gY2hhbmdlIGluIHRoZSByb3V0ZXIuXG4gICAgcXVlcnlcblxuICBpbnRlcnBvbGF0ZWRSb3V0ZSA9IHJvdXRlXG4gIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5rZXlzKGR5bmFtaWNHcm91cHMpXG5cbiAgaWYgKFxuICAgICFwYXJhbXMuZXZlcnkoKHBhcmFtKSA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBkeW5hbWljTWF0Y2hlc1twYXJhbV0gfHwgJydcbiAgICAgIGNvbnN0IHsgcmVwZWF0LCBvcHRpb25hbCB9ID0gZHluYW1pY0dyb3Vwc1twYXJhbV1cblxuICAgICAgLy8gc3VwcG9ydCBzaW5nbGUtbGV2ZWwgY2F0Y2gtYWxsXG4gICAgICAvLyBUT0RPOiBtb3JlIHJvYnVzdCBoYW5kbGluZyBmb3IgdXNlci1lcnJvciAocGFzc2luZyBgL2ApXG4gICAgICBsZXQgcmVwbGFjZWQgPSBgWyR7cmVwZWF0ID8gJy4uLicgOiAnJ30ke3BhcmFtfV1gXG4gICAgICBpZiAob3B0aW9uYWwpIHtcbiAgICAgICAgcmVwbGFjZWQgPSBgJHshdmFsdWUgPyAnLycgOiAnJ31bJHtyZXBsYWNlZH1dYFxuICAgICAgfVxuICAgICAgaWYgKHJlcGVhdCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHZhbHVlID0gW3ZhbHVlXVxuXG4gICAgICByZXR1cm4gKFxuICAgICAgICAob3B0aW9uYWwgfHwgcGFyYW0gaW4gZHluYW1pY01hdGNoZXMpICYmXG4gICAgICAgIC8vIEludGVycG9sYXRlIGdyb3VwIGludG8gZGF0YSBVUkwgaWYgcHJlc2VudFxuICAgICAgICAoaW50ZXJwb2xhdGVkUm91dGUgPVxuICAgICAgICAgIGludGVycG9sYXRlZFJvdXRlIS5yZXBsYWNlKFxuICAgICAgICAgICAgcmVwbGFjZWQsXG4gICAgICAgICAgICByZXBlYXRcbiAgICAgICAgICAgICAgPyAodmFsdWUgYXMgc3RyaW5nW10pLm1hcChlc2NhcGVQYXRoRGVsaW1pdGVycykuam9pbignLycpXG4gICAgICAgICAgICAgIDogZXNjYXBlUGF0aERlbGltaXRlcnModmFsdWUgYXMgc3RyaW5nKVxuICAgICAgICAgICkgfHwgJy8nKVxuICAgICAgKVxuICAgIH0pXG4gICkge1xuICAgIGludGVycG9sYXRlZFJvdXRlID0gJycgLy8gZGlkIG5vdCBzYXRpc2Z5IGFsbCByZXF1aXJlbWVudHNcblxuICAgIC8vIG4uYi4gV2UgaWdub3JlIHRoaXMgZXJyb3IgYmVjYXVzZSB3ZSBoYW5kbGUgd2FybmluZyBmb3IgdGhpcyBjYXNlIGluXG4gICAgLy8gZGV2ZWxvcG1lbnQgaW4gdGhlIGA8TGluaz5gIGNvbXBvbmVudCBkaXJlY3RseS5cbiAgfVxuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICByZXN1bHQ6IGludGVycG9sYXRlZFJvdXRlLFxuICB9XG59XG5cbmZ1bmN0aW9uIG9taXRQYXJtc0Zyb21RdWVyeShxdWVyeTogUGFyc2VkVXJsUXVlcnksIHBhcmFtczogc3RyaW5nW10pIHtcbiAgY29uc3QgZmlsdGVyZWRRdWVyeTogUGFyc2VkVXJsUXVlcnkgPSB7fVxuXG4gIE9iamVjdC5rZXlzKHF1ZXJ5KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoIXBhcmFtcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICBmaWx0ZXJlZFF1ZXJ5W2tleV0gPSBxdWVyeVtrZXldXG4gICAgfVxuICB9KVxuICByZXR1cm4gZmlsdGVyZWRRdWVyeVxufVxuXG4vKipcbiAqIFJlc29sdmVzIGEgZ2l2ZW4gaHlwZXJsaW5rIHdpdGggYSBjZXJ0YWluIHJvdXRlciBzdGF0ZSAoYmFzZVBhdGggbm90IGluY2x1ZGVkKS5cbiAqIFByZXNlcnZlcyBhYnNvbHV0ZSB1cmxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUhyZWYoXG4gIGN1cnJlbnRQYXRoOiBzdHJpbmcsXG4gIGhyZWY6IFVybCxcbiAgcmVzb2x2ZUFzPzogYm9vbGVhblxuKTogc3RyaW5nIHtcbiAgLy8gd2UgdXNlIGEgZHVtbXkgYmFzZSB1cmwgZm9yIHJlbGF0aXZlIHVybHNcbiAgY29uc3QgYmFzZSA9IG5ldyBVUkwoY3VycmVudFBhdGgsICdodHRwOi8vbicpXG4gIGNvbnN0IHVybEFzU3RyaW5nID1cbiAgICB0eXBlb2YgaHJlZiA9PT0gJ3N0cmluZycgPyBocmVmIDogZm9ybWF0V2l0aFZhbGlkYXRpb24oaHJlZilcbiAgdHJ5IHtcbiAgICBjb25zdCBmaW5hbFVybCA9IG5ldyBVUkwodXJsQXNTdHJpbmcsIGJhc2UpXG4gICAgZmluYWxVcmwucGF0aG5hbWUgPSBub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaChmaW5hbFVybC5wYXRobmFtZSlcbiAgICBsZXQgaW50ZXJwb2xhdGVkQXMgPSAnJ1xuXG4gICAgaWYgKFxuICAgICAgaXNEeW5hbWljUm91dGUoZmluYWxVcmwucGF0aG5hbWUpICYmXG4gICAgICBmaW5hbFVybC5zZWFyY2hQYXJhbXMgJiZcbiAgICAgIHJlc29sdmVBc1xuICAgICkge1xuICAgICAgY29uc3QgcXVlcnkgPSBzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5KGZpbmFsVXJsLnNlYXJjaFBhcmFtcylcblxuICAgICAgY29uc3QgeyByZXN1bHQsIHBhcmFtcyB9ID0gaW50ZXJwb2xhdGVBcyhcbiAgICAgICAgZmluYWxVcmwucGF0aG5hbWUsXG4gICAgICAgIGZpbmFsVXJsLnBhdGhuYW1lLFxuICAgICAgICBxdWVyeVxuICAgICAgKVxuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGludGVycG9sYXRlZEFzID0gZm9ybWF0V2l0aFZhbGlkYXRpb24oe1xuICAgICAgICAgIHBhdGhuYW1lOiByZXN1bHQsXG4gICAgICAgICAgaGFzaDogZmluYWxVcmwuaGFzaCxcbiAgICAgICAgICBxdWVyeTogb21pdFBhcm1zRnJvbVF1ZXJ5KHF1ZXJ5LCBwYXJhbXMpLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIHRoZSBvcmlnaW4gZGlkbid0IGNoYW5nZSwgaXQgbWVhbnMgd2UgcmVjZWl2ZWQgYSByZWxhdGl2ZSBocmVmXG4gICAgY29uc3QgcmVzb2x2ZWRIcmVmID1cbiAgICAgIGZpbmFsVXJsLm9yaWdpbiA9PT0gYmFzZS5vcmlnaW5cbiAgICAgICAgPyBmaW5hbFVybC5ocmVmLnNsaWNlKGZpbmFsVXJsLm9yaWdpbi5sZW5ndGgpXG4gICAgICAgIDogZmluYWxVcmwuaHJlZlxuXG4gICAgcmV0dXJuIChyZXNvbHZlQXNcbiAgICAgID8gW3Jlc29sdmVkSHJlZiwgaW50ZXJwb2xhdGVkQXMgfHwgcmVzb2x2ZWRIcmVmXVxuICAgICAgOiByZXNvbHZlZEhyZWYpIGFzIHN0cmluZ1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIChyZXNvbHZlQXMgPyBbdXJsQXNTdHJpbmddIDogdXJsQXNTdHJpbmcpIGFzIHN0cmluZ1xuICB9XG59XG5cbmNvbnN0IFBBR0VfTE9BRF9FUlJPUiA9IFN5bWJvbCgnUEFHRV9MT0FEX0VSUk9SJylcbmV4cG9ydCBmdW5jdGlvbiBtYXJrTG9hZGluZ0Vycm9yKGVycjogRXJyb3IpOiBFcnJvciB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyLCBQQUdFX0xPQURfRVJST1IsIHt9KVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlVXJsQXMocm91dGVyOiBOZXh0Um91dGVyLCB1cmw6IFVybCwgYXM6IFVybCkge1xuICAvLyBJZiB1cmwgYW5kIGFzIHByb3ZpZGVkIGFzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbixcbiAgLy8gd2UnbGwgZm9ybWF0IHRoZW0gaW50byB0aGUgc3RyaW5nIHZlcnNpb24gaGVyZS5cbiAgcmV0dXJuIHtcbiAgICB1cmw6IGFkZEJhc2VQYXRoKHJlc29sdmVIcmVmKHJvdXRlci5wYXRobmFtZSwgdXJsKSksXG4gICAgYXM6IGFzID8gYWRkQmFzZVBhdGgocmVzb2x2ZUhyZWYocm91dGVyLnBhdGhuYW1lLCBhcykpIDogYXMsXG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQmFzZVJvdXRlciA9IHtcbiAgcm91dGU6IHN0cmluZ1xuICBwYXRobmFtZTogc3RyaW5nXG4gIHF1ZXJ5OiBQYXJzZWRVcmxRdWVyeVxuICBhc1BhdGg6IHN0cmluZ1xuICBiYXNlUGF0aDogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xuICBsb2NhbGVzPzogc3RyaW5nW11cbiAgZGVmYXVsdExvY2FsZT86IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBOZXh0Um91dGVyID0gQmFzZVJvdXRlciAmXG4gIFBpY2s8XG4gICAgUm91dGVyLFxuICAgIHwgJ3B1c2gnXG4gICAgfCAncmVwbGFjZSdcbiAgICB8ICdyZWxvYWQnXG4gICAgfCAnYmFjaydcbiAgICB8ICdwcmVmZXRjaCdcbiAgICB8ICdiZWZvcmVQb3BTdGF0ZSdcbiAgICB8ICdldmVudHMnXG4gICAgfCAnaXNGYWxsYmFjaydcbiAgPlxuXG5leHBvcnQgdHlwZSBQcmVmZXRjaE9wdGlvbnMgPSB7XG4gIHByaW9yaXR5PzogYm9vbGVhblxufVxuXG5leHBvcnQgdHlwZSBQcml2YXRlUm91dGVJbmZvID0ge1xuICBDb21wb25lbnQ6IENvbXBvbmVudFR5cGVcbiAgc3R5bGVTaGVldHM6IFN0eWxlU2hlZXRUdXBsZVtdXG4gIF9fTl9TU0c/OiBib29sZWFuXG4gIF9fTl9TU1A/OiBib29sZWFuXG4gIHByb3BzPzogUmVjb3JkPHN0cmluZywgYW55PlxuICBlcnI/OiBFcnJvclxuICBlcnJvcj86IGFueVxufVxuXG5leHBvcnQgdHlwZSBBcHBQcm9wcyA9IFBpY2s8UHJpdmF0ZVJvdXRlSW5mbywgJ0NvbXBvbmVudCcgfCAnZXJyJz4gJiB7XG4gIHJvdXRlcjogUm91dGVyXG59ICYgUmVjb3JkPHN0cmluZywgYW55PlxuZXhwb3J0IHR5cGUgQXBwQ29tcG9uZW50ID0gQ29tcG9uZW50VHlwZTxBcHBQcm9wcz5cblxudHlwZSBTdWJzY3JpcHRpb24gPSAoZGF0YTogUHJpdmF0ZVJvdXRlSW5mbywgQXBwOiBBcHBDb21wb25lbnQpID0+IFByb21pc2U8dm9pZD5cblxudHlwZSBCZWZvcmVQb3BTdGF0ZUNhbGxiYWNrID0gKHN0YXRlOiBOZXh0SGlzdG9yeVN0YXRlKSA9PiBib29sZWFuXG5cbnR5cGUgQ29tcG9uZW50TG9hZENhbmNlbCA9ICgoKSA9PiB2b2lkKSB8IG51bGxcblxudHlwZSBIaXN0b3J5TWV0aG9kID0gJ3JlcGxhY2VTdGF0ZScgfCAncHVzaFN0YXRlJ1xuXG5jb25zdCBtYW51YWxTY3JvbGxSZXN0b3JhdGlvbiA9XG4gIHByb2Nlc3MuZW52Ll9fTkVYVF9TQ1JPTExfUkVTVE9SQVRJT04gJiZcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgJ3Njcm9sbFJlc3RvcmF0aW9uJyBpbiB3aW5kb3cuaGlzdG9yeVxuXG5jb25zdCBTU0dfREFUQV9OT1RfRk9VTkRfRVJST1IgPSAnU1NHIERhdGEgTk9UX0ZPVU5EJ1xuXG5mdW5jdGlvbiBmZXRjaFJldHJ5KHVybDogc3RyaW5nLCBhdHRlbXB0czogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgIC8vIENvb2tpZXMgYXJlIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQgZm9yIE5leHQuanMnIFNTRyBcIlByZXZpZXcgTW9kZVwiLlxuICAgIC8vIENvb2tpZXMgbWF5IGFsc28gYmUgcmVxdWlyZWQgZm9yIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgLlxuICAgIC8vXG4gICAgLy8gPiBgZmV0Y2hgIHdvbuKAmXQgc2VuZCBjb29raWVzLCB1bmxlc3MgeW91IHNldCB0aGUgY3JlZGVudGlhbHMgaW5pdFxuICAgIC8vID4gb3B0aW9uLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GZXRjaF9BUEkvVXNpbmdfRmV0Y2hcbiAgICAvL1xuICAgIC8vID4gRm9yIG1heGltdW0gYnJvd3NlciBjb21wYXRpYmlsaXR5IHdoZW4gaXQgY29tZXMgdG8gc2VuZGluZyAmXG4gICAgLy8gPiByZWNlaXZpbmcgY29va2llcywgYWx3YXlzIHN1cHBseSB0aGUgYGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nYFxuICAgIC8vID4gb3B0aW9uIGluc3RlYWQgb2YgcmVseWluZyBvbiB0aGUgZGVmYXVsdC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL2ZldGNoI2NhdmVhdHNcbiAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGlmIChhdHRlbXB0cyA+IDEgJiYgcmVzLnN0YXR1cyA+PSA1MDApIHtcbiAgICAgICAgcmV0dXJuIGZldGNoUmV0cnkodXJsLCBhdHRlbXB0cyAtIDEpXG4gICAgICB9XG4gICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIC8vIFRPRE86IGhhbmRsZSByZWxvYWRpbmcgaW4gZGV2ZWxvcG1lbnQgZnJvbSBmYWxsYmFjayByZXR1cm5pbmcgMjAwXG4gICAgICAgIC8vIHRvIG9uLWRlbWFuZC1lbnRyeS1oYW5kbGVyIGNhdXNpbmcgaXQgdG8gcmVsb2FkIHBlcmlvZGljYWxseVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoU1NHX0RBVEFfTk9UX0ZPVU5EX0VSUk9SKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbG9hZCBzdGF0aWMgcHJvcHNgKVxuICAgIH1cbiAgICByZXR1cm4gcmVzLmpzb24oKVxuICB9KVxufVxuXG5mdW5jdGlvbiBmZXRjaE5leHREYXRhKGRhdGFIcmVmOiBzdHJpbmcsIGlzU2VydmVyUmVuZGVyOiBib29sZWFuKSB7XG4gIHJldHVybiBmZXRjaFJldHJ5KGRhdGFIcmVmLCBpc1NlcnZlclJlbmRlciA/IDMgOiAxKS5jYXRjaCgoZXJyOiBFcnJvcikgPT4ge1xuICAgIC8vIFdlIHNob3VsZCBvbmx5IHRyaWdnZXIgYSBzZXJ2ZXItc2lkZSB0cmFuc2l0aW9uIGlmIHRoaXMgd2FzIGNhdXNlZFxuICAgIC8vIG9uIGEgY2xpZW50LXNpZGUgdHJhbnNpdGlvbi4gT3RoZXJ3aXNlLCB3ZSdkIGdldCBpbnRvIGFuIGluZmluaXRlXG4gICAgLy8gbG9vcC5cblxuICAgIGlmICghaXNTZXJ2ZXJSZW5kZXIpIHtcbiAgICAgIG1hcmtMb2FkaW5nRXJyb3IoZXJyKVxuICAgIH1cbiAgICB0aHJvdyBlcnJcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIGltcGxlbWVudHMgQmFzZVJvdXRlciB7XG4gIHJvdXRlOiBzdHJpbmdcbiAgcGF0aG5hbWU6IHN0cmluZ1xuICBxdWVyeTogUGFyc2VkVXJsUXVlcnlcbiAgYXNQYXRoOiBzdHJpbmdcbiAgYmFzZVBhdGg6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBNYXAgb2YgYWxsIGNvbXBvbmVudHMgbG9hZGVkIGluIGBSb3V0ZXJgXG4gICAqL1xuICBjb21wb25lbnRzOiB7IFtwYXRobmFtZTogc3RyaW5nXTogUHJpdmF0ZVJvdXRlSW5mbyB9XG4gIC8vIFN0YXRpYyBEYXRhIENhY2hlXG4gIHNkYzogeyBbYXNQYXRoOiBzdHJpbmddOiBvYmplY3QgfSA9IHt9XG4gIHN1YjogU3Vic2NyaXB0aW9uXG4gIGNsYzogQ29tcG9uZW50TG9hZENhbmNlbFxuICBwYWdlTG9hZGVyOiBhbnlcbiAgX2JwczogQmVmb3JlUG9wU3RhdGVDYWxsYmFjayB8IHVuZGVmaW5lZFxuICBldmVudHM6IE1pdHRFbWl0dGVyXG4gIF93cmFwQXBwOiAoQXBwOiBBcHBDb21wb25lbnQpID0+IGFueVxuICBpc1NzcjogYm9vbGVhblxuICBpc0ZhbGxiYWNrOiBib29sZWFuXG4gIF9pbkZsaWdodFJvdXRlPzogc3RyaW5nXG4gIF9zaGFsbG93PzogYm9vbGVhblxuICBsb2NhbGU/OiBzdHJpbmdcbiAgbG9jYWxlcz86IHN0cmluZ1tdXG4gIGRlZmF1bHRMb2NhbGU/OiBzdHJpbmdcblxuICBzdGF0aWMgZXZlbnRzOiBNaXR0RW1pdHRlciA9IG1pdHQoKVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhdGhuYW1lOiBzdHJpbmcsXG4gICAgcXVlcnk6IFBhcnNlZFVybFF1ZXJ5LFxuICAgIGFzOiBzdHJpbmcsXG4gICAge1xuICAgICAgaW5pdGlhbFByb3BzLFxuICAgICAgcGFnZUxvYWRlcixcbiAgICAgIEFwcCxcbiAgICAgIHdyYXBBcHAsXG4gICAgICBDb21wb25lbnQsXG4gICAgICBpbml0aWFsU3R5bGVTaGVldHMsXG4gICAgICBlcnIsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBpc0ZhbGxiYWNrLFxuICAgICAgbG9jYWxlLFxuICAgICAgbG9jYWxlcyxcbiAgICAgIGRlZmF1bHRMb2NhbGUsXG4gICAgfToge1xuICAgICAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25cbiAgICAgIGluaXRpYWxQcm9wczogYW55XG4gICAgICBwYWdlTG9hZGVyOiBhbnlcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50VHlwZVxuICAgICAgaW5pdGlhbFN0eWxlU2hlZXRzOiBTdHlsZVNoZWV0VHVwbGVbXVxuICAgICAgQXBwOiBBcHBDb21wb25lbnRcbiAgICAgIHdyYXBBcHA6IChBcHA6IEFwcENvbXBvbmVudCkgPT4gYW55XG4gICAgICBlcnI/OiBFcnJvclxuICAgICAgaXNGYWxsYmFjazogYm9vbGVhblxuICAgICAgbG9jYWxlPzogc3RyaW5nXG4gICAgICBsb2NhbGVzPzogc3RyaW5nW11cbiAgICAgIGRlZmF1bHRMb2NhbGU/OiBzdHJpbmdcbiAgICB9XG4gICkge1xuICAgIC8vIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgY29tcG9uZW50IGtleVxuICAgIHRoaXMucm91dGUgPSByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRobmFtZSlcblxuICAgIC8vIHNldCB1cCB0aGUgY29tcG9uZW50IGNhY2hlIChieSByb3V0ZSBrZXlzKVxuICAgIHRoaXMuY29tcG9uZW50cyA9IHt9XG4gICAgLy8gV2Ugc2hvdWxkIG5vdCBrZWVwIHRoZSBjYWNoZSwgaWYgdGhlcmUncyBhbiBlcnJvclxuICAgIC8vIE90aGVyd2lzZSwgdGhpcyBjYXVzZSBpc3N1ZXMgd2hlbiB3aGVuIGdvaW5nIGJhY2sgYW5kXG4gICAgLy8gY29tZSBhZ2FpbiB0byB0aGUgZXJyb3JlZCBwYWdlLlxuICAgIGlmIChwYXRobmFtZSAhPT0gJy9fZXJyb3InKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudHNbdGhpcy5yb3V0ZV0gPSB7XG4gICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgc3R5bGVTaGVldHM6IGluaXRpYWxTdHlsZVNoZWV0cyxcbiAgICAgICAgcHJvcHM6IGluaXRpYWxQcm9wcyxcbiAgICAgICAgZXJyLFxuICAgICAgICBfX05fU1NHOiBpbml0aWFsUHJvcHMgJiYgaW5pdGlhbFByb3BzLl9fTl9TU0csXG4gICAgICAgIF9fTl9TU1A6IGluaXRpYWxQcm9wcyAmJiBpbml0aWFsUHJvcHMuX19OX1NTUCxcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNvbXBvbmVudHNbJy9fYXBwJ10gPSB7XG4gICAgICBDb21wb25lbnQ6IEFwcCBhcyBDb21wb25lbnRUeXBlLFxuICAgICAgc3R5bGVTaGVldHM6IFtcbiAgICAgICAgLyogL19hcHAgZG9lcyBub3QgbmVlZCBpdHMgc3R5bGVzaGVldHMgbWFuYWdlZCAqL1xuICAgICAgXSxcbiAgICB9XG5cbiAgICAvLyBCYWNrd2FyZHMgY29tcGF0IGZvciBSb3V0ZXIucm91dGVyLmV2ZW50c1xuICAgIC8vIFRPRE86IFNob3VsZCBiZSByZW1vdmUgdGhlIGZvbGxvd2luZyBtYWpvciB2ZXJzaW9uIGFzIGl0IHdhcyBuZXZlciBkb2N1bWVudGVkXG4gICAgdGhpcy5ldmVudHMgPSBSb3V0ZXIuZXZlbnRzXG5cbiAgICB0aGlzLnBhZ2VMb2FkZXIgPSBwYWdlTG9hZGVyXG4gICAgdGhpcy5wYXRobmFtZSA9IHBhdGhuYW1lXG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5XG4gICAgLy8gaWYgYXV0byBwcmVyZW5kZXJlZCBhbmQgZHluYW1pYyByb3V0ZSB3YWl0IHRvIHVwZGF0ZSBhc1BhdGhcbiAgICAvLyB1bnRpbCBhZnRlciBtb3VudCB0byBwcmV2ZW50IGh5ZHJhdGlvbiBtaXNtYXRjaFxuICAgIHRoaXMuYXNQYXRoID1cbiAgICAgIC8vIEB0cy1pZ25vcmUgdGhpcyBpcyB0ZW1wb3JhcmlseSBnbG9iYWwgKGF0dGFjaGVkIHRvIHdpbmRvdylcbiAgICAgIGlzRHluYW1pY1JvdXRlKHBhdGhuYW1lKSAmJiBfX05FWFRfREFUQV9fLmF1dG9FeHBvcnQgPyBwYXRobmFtZSA6IGFzXG4gICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoXG4gICAgdGhpcy5zdWIgPSBzdWJzY3JpcHRpb25cbiAgICB0aGlzLmNsYyA9IG51bGxcbiAgICB0aGlzLl93cmFwQXBwID0gd3JhcEFwcFxuICAgIC8vIG1ha2Ugc3VyZSB0byBpZ25vcmUgZXh0cmEgcG9wU3RhdGUgaW4gc2FmYXJpIG9uIG5hdmlnYXRpbmdcbiAgICAvLyBiYWNrIGZyb20gZXh0ZXJuYWwgc2l0ZVxuICAgIHRoaXMuaXNTc3IgPSB0cnVlXG5cbiAgICB0aGlzLmlzRmFsbGJhY2sgPSBpc0ZhbGxiYWNrXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgdGhpcy5sb2NhbGUgPSBsb2NhbGVcbiAgICAgIHRoaXMubG9jYWxlcyA9IGxvY2FsZXNcbiAgICAgIHRoaXMuZGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGVcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIG1ha2Ugc3VyZSBcImFzXCIgZG9lc24ndCBzdGFydCB3aXRoIGRvdWJsZSBzbGFzaGVzIG9yIGVsc2UgaXQgY2FuXG4gICAgICAvLyB0aHJvdyBhbiBlcnJvciBhcyBpdCdzIGNvbnNpZGVyZWQgaW52YWxpZFxuICAgICAgaWYgKGFzLnN1YnN0cigwLCAyKSAhPT0gJy8vJykge1xuICAgICAgICAvLyBpbiBvcmRlciBmb3IgYGUuc3RhdGVgIHRvIHdvcmsgb24gdGhlIGBvbnBvcHN0YXRlYCBldmVudFxuICAgICAgICAvLyB3ZSBoYXZlIHRvIHJlZ2lzdGVyIHRoZSBpbml0aWFsIHJvdXRlIHVwb24gaW5pdGlhbGl6YXRpb25cbiAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShcbiAgICAgICAgICAncmVwbGFjZVN0YXRlJyxcbiAgICAgICAgICBmb3JtYXRXaXRoVmFsaWRhdGlvbih7IHBhdGhuYW1lOiBhZGRCYXNlUGF0aChwYXRobmFtZSksIHF1ZXJ5IH0pLFxuICAgICAgICAgIGdldFVSTCgpXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgdGhpcy5vblBvcFN0YXRlKVxuXG4gICAgICAvLyBlbmFibGUgY3VzdG9tIHNjcm9sbCByZXN0b3JhdGlvbiBoYW5kbGluZyB3aGVuIGF2YWlsYWJsZVxuICAgICAgLy8gb3RoZXJ3aXNlIGZhbGxiYWNrIHRvIGJyb3dzZXIncyBkZWZhdWx0IGhhbmRsaW5nXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTikge1xuICAgICAgICBpZiAobWFudWFsU2Nyb2xsUmVzdG9yYXRpb24pIHtcbiAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9ICdtYW51YWwnXG5cbiAgICAgICAgICBsZXQgc2Nyb2xsRGVib3VuY2VUaW1lb3V0OiB1bmRlZmluZWQgfCBOb2RlSlMuVGltZW91dFxuXG4gICAgICAgICAgY29uc3QgZGVib3VuY2VkU2Nyb2xsU2F2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChzY3JvbGxEZWJvdW5jZVRpbWVvdXQpIGNsZWFyVGltZW91dChzY3JvbGxEZWJvdW5jZVRpbWVvdXQpXG5cbiAgICAgICAgICAgIHNjcm9sbERlYm91bmNlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IHVybCwgYXM6IGN1ckFzLCBvcHRpb25zIH0gPSBoaXN0b3J5LnN0YXRlXG4gICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoXG4gICAgICAgICAgICAgICAgJ3JlcGxhY2VTdGF0ZScsXG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgIGN1ckFzLFxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgIF9OX1g6IHdpbmRvdy5zY3JvbGxYLFxuICAgICAgICAgICAgICAgICAgX05fWTogd2luZG93LnNjcm9sbFksXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSwgMTApXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGRlYm91bmNlZFNjcm9sbFNhdmUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvblBvcFN0YXRlID0gKGU6IFBvcFN0YXRlRXZlbnQpOiB2b2lkID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IGUuc3RhdGUgYXMgSGlzdG9yeVN0YXRlXG5cbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICAvLyBXZSBnZXQgc3RhdGUgYXMgdW5kZWZpbmVkIGZvciB0d28gcmVhc29ucy5cbiAgICAgIC8vICAxLiBXaXRoIG9sZGVyIHNhZmFyaSAoPCA4KSBhbmQgb2xkZXIgY2hyb21lICg8IDM0KVxuICAgICAgLy8gIDIuIFdoZW4gdGhlIFVSTCBjaGFuZ2VkIHdpdGggI1xuICAgICAgLy9cbiAgICAgIC8vIEluIHRoZSBib3RoIGNhc2VzLCB3ZSBkb24ndCBuZWVkIHRvIHByb2NlZWQgYW5kIGNoYW5nZSB0aGUgcm91dGUuXG4gICAgICAvLyAoYXMgaXQncyBhbHJlYWR5IGNoYW5nZWQpXG4gICAgICAvLyBCdXQgd2UgY2FuIHNpbXBseSByZXBsYWNlIHRoZSBzdGF0ZSB3aXRoIHRoZSBuZXcgY2hhbmdlcy5cbiAgICAgIC8vIEFjdHVhbGx5LCBmb3IgKDEpIHdlIGRvbid0IG5lZWQgdG8gbm90aGluZy4gQnV0IGl0J3MgaGFyZCB0byBkZXRlY3QgdGhhdCBldmVudC5cbiAgICAgIC8vIFNvLCBkb2luZyB0aGUgZm9sbG93aW5nIGZvciAoMSkgZG9lcyBubyBoYXJtLlxuICAgICAgY29uc3QgeyBwYXRobmFtZSwgcXVlcnkgfSA9IHRoaXNcbiAgICAgIHRoaXMuY2hhbmdlU3RhdGUoXG4gICAgICAgICdyZXBsYWNlU3RhdGUnLFxuICAgICAgICBmb3JtYXRXaXRoVmFsaWRhdGlvbih7IHBhdGhuYW1lOiBhZGRCYXNlUGF0aChwYXRobmFtZSksIHF1ZXJ5IH0pLFxuICAgICAgICBnZXRVUkwoKVxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFzdGF0ZS5fX04pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHsgdXJsLCBhcywgb3B0aW9ucyB9ID0gc3RhdGVcblxuICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHBhcnNlUmVsYXRpdmVVcmwodXJsKVxuXG4gICAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IHJlLXJlbmRlciBvbiBpbml0aWFsIGxvYWQsXG4gICAgLy8gY2FuIGJlIGNhdXNlZCBieSBuYXZpZ2F0aW5nIGJhY2sgZnJvbSBhbiBleHRlcm5hbCBzaXRlXG4gICAgaWYgKHRoaXMuaXNTc3IgJiYgYXMgPT09IHRoaXMuYXNQYXRoICYmIHBhdGhuYW1lID09PSB0aGlzLnBhdGhuYW1lKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgZG93bnN0cmVhbSBhcHBsaWNhdGlvbiByZXR1cm5zIGZhbHN5LCByZXR1cm4uXG4gICAgLy8gVGhleSB3aWxsIHRoZW4gYmUgcmVzcG9uc2libGUgZm9yIGhhbmRsaW5nIHRoZSBldmVudC5cbiAgICBpZiAodGhpcy5fYnBzICYmICF0aGlzLl9icHMoc3RhdGUpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLmNoYW5nZShcbiAgICAgICdyZXBsYWNlU3RhdGUnLFxuICAgICAgdXJsLFxuICAgICAgYXMsXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIHNoYWxsb3c6IG9wdGlvbnMuc2hhbGxvdyAmJiB0aGlzLl9zaGFsbG93LFxuICAgICAgICBsb2NhbGU6IG9wdGlvbnMubG9jYWxlIHx8IHRoaXMuZGVmYXVsdExvY2FsZSxcbiAgICAgIH0pXG4gICAgKVxuICB9XG5cbiAgcmVsb2FkKCk6IHZvaWQge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdvIGJhY2sgaW4gaGlzdG9yeVxuICAgKi9cbiAgYmFjaygpIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKClcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGBwdXNoU3RhdGVgIHdpdGggYXJndW1lbnRzXG4gICAqIEBwYXJhbSB1cmwgb2YgdGhlIHJvdXRlXG4gICAqIEBwYXJhbSBhcyBtYXNrcyBgdXJsYCBmb3IgdGhlIGJyb3dzZXJcbiAgICogQHBhcmFtIG9wdGlvbnMgb2JqZWN0IHlvdSBjYW4gZGVmaW5lIGBzaGFsbG93YCBhbmQgb3RoZXIgb3B0aW9uc1xuICAgKi9cbiAgcHVzaCh1cmw6IFVybCwgYXM6IFVybCA9IHVybCwgb3B0aW9uczogVHJhbnNpdGlvbk9wdGlvbnMgPSB7fSkge1xuICAgIDsoeyB1cmwsIGFzIH0gPSBwcmVwYXJlVXJsQXModGhpcywgdXJsLCBhcykpXG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlKCdwdXNoU3RhdGUnLCB1cmwsIGFzLCBvcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgYHJlcGxhY2VTdGF0ZWAgd2l0aCBhcmd1bWVudHNcbiAgICogQHBhcmFtIHVybCBvZiB0aGUgcm91dGVcbiAgICogQHBhcmFtIGFzIG1hc2tzIGB1cmxgIGZvciB0aGUgYnJvd3NlclxuICAgKiBAcGFyYW0gb3B0aW9ucyBvYmplY3QgeW91IGNhbiBkZWZpbmUgYHNoYWxsb3dgIGFuZCBvdGhlciBvcHRpb25zXG4gICAqL1xuICByZXBsYWNlKHVybDogVXJsLCBhczogVXJsID0gdXJsLCBvcHRpb25zOiBUcmFuc2l0aW9uT3B0aW9ucyA9IHt9KSB7XG4gICAgOyh7IHVybCwgYXMgfSA9IHByZXBhcmVVcmxBcyh0aGlzLCB1cmwsIGFzKSlcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2UoJ3JlcGxhY2VTdGF0ZScsIHVybCwgYXMsIG9wdGlvbnMpXG4gIH1cblxuICBhc3luYyBjaGFuZ2UoXG4gICAgbWV0aG9kOiBIaXN0b3J5TWV0aG9kLFxuICAgIHVybDogc3RyaW5nLFxuICAgIGFzOiBzdHJpbmcsXG4gICAgb3B0aW9uczogVHJhbnNpdGlvbk9wdGlvbnNcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgaWYgKCFpc0xvY2FsVVJMKHVybCkpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgdGhpcy5sb2NhbGUgPSBvcHRpb25zLmxvY2FsZSB8fCB0aGlzLmxvY2FsZVxuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvcHRpb25zLmxvY2FsZSA9IHRoaXMubG9jYWxlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbm9ybWFsaXplTG9jYWxlUGF0aCxcbiAgICAgIH0gPSByZXF1aXJlKCcuLi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aCcpIGFzIHR5cGVvZiBpbXBvcnQoJy4uL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoJylcblxuICAgICAgY29uc3QgbG9jYWxlUGF0aFJlc3VsdCA9IG5vcm1hbGl6ZUxvY2FsZVBhdGgoYXMsIHRoaXMubG9jYWxlcylcblxuICAgICAgaWYgKGxvY2FsZVBhdGhSZXN1bHQuZGV0ZWN0ZWRMb2NhbGUpIHtcbiAgICAgICAgdGhpcy5sb2NhbGUgPSBsb2NhbGVQYXRoUmVzdWx0LmRldGVjdGVkTG9jYWxlXG4gICAgICAgIHVybCA9IGxvY2FsZVBhdGhSZXN1bHQucGF0aG5hbWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIShvcHRpb25zIGFzIGFueSkuX2gpIHtcbiAgICAgIHRoaXMuaXNTc3IgPSBmYWxzZVxuICAgIH1cbiAgICAvLyBtYXJraW5nIHJvdXRlIGNoYW5nZXMgYXMgYSBuYXZpZ2F0aW9uIHN0YXJ0IGVudHJ5XG4gICAgaWYgKFNUKSB7XG4gICAgICBwZXJmb3JtYW5jZS5tYXJrKCdyb3V0ZUNoYW5nZScpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2luRmxpZ2h0Um91dGUpIHtcbiAgICAgIHRoaXMuYWJvcnRDb21wb25lbnRMb2FkKHRoaXMuX2luRmxpZ2h0Um91dGUpXG4gICAgfVxuXG4gICAgYXMgPSBhZGRMb2NhbGUoYXMsIG9wdGlvbnMubG9jYWxlLCB0aGlzLmRlZmF1bHRMb2NhbGUpXG4gICAgY29uc3QgY2xlYW5lZEFzID0gZGVsTG9jYWxlKFxuICAgICAgaGFzQmFzZVBhdGgoYXMpID8gZGVsQmFzZVBhdGgoYXMpIDogYXMsXG4gICAgICB0aGlzLmxvY2FsZVxuICAgIClcbiAgICB0aGlzLl9pbkZsaWdodFJvdXRlID0gYXNcblxuICAgIC8vIElmIHRoZSB1cmwgY2hhbmdlIGlzIG9ubHkgcmVsYXRlZCB0byBhIGhhc2ggY2hhbmdlXG4gICAgLy8gV2Ugc2hvdWxkIG5vdCBwcm9jZWVkLiBXZSBzaG91bGQgb25seSBjaGFuZ2UgdGhlIHN0YXRlLlxuXG4gICAgLy8gV0FSTklORzogYF9oYCBpcyBhbiBpbnRlcm5hbCBvcHRpb24gZm9yIGhhbmRpbmcgTmV4dC5qcyBjbGllbnQtc2lkZVxuICAgIC8vIGh5ZHJhdGlvbi4gWW91ciBhcHAgc2hvdWxkIF9uZXZlcl8gdXNlIHRoaXMgcHJvcGVydHkuIEl0IG1heSBjaGFuZ2UgYXRcbiAgICAvLyBhbnkgdGltZSB3aXRob3V0IG5vdGljZS5cbiAgICBpZiAoIShvcHRpb25zIGFzIGFueSkuX2ggJiYgdGhpcy5vbmx5QUhhc2hDaGFuZ2UoY2xlYW5lZEFzKSkge1xuICAgICAgdGhpcy5hc1BhdGggPSBjbGVhbmVkQXNcbiAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgnaGFzaENoYW5nZVN0YXJ0JywgYXMpXG4gICAgICAvLyBUT0RPOiBkbyB3ZSBuZWVkIHRoZSByZXNvbHZlZCBocmVmIHdoZW4gb25seSBhIGhhc2ggY2hhbmdlP1xuICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShtZXRob2QsIHVybCwgYXMsIG9wdGlvbnMpXG4gICAgICB0aGlzLnNjcm9sbFRvSGFzaChjbGVhbmVkQXMpXG4gICAgICB0aGlzLm5vdGlmeSh0aGlzLmNvbXBvbmVudHNbdGhpcy5yb3V0ZV0pXG4gICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ2hhc2hDaGFuZ2VDb21wbGV0ZScsIGFzKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvLyBUaGUgYnVpbGQgbWFuaWZlc3QgbmVlZHMgdG8gYmUgbG9hZGVkIGJlZm9yZSBhdXRvLXN0YXRpYyBkeW5hbWljIHBhZ2VzXG4gICAgLy8gZ2V0IHRoZWlyIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gYWxsb3cgZW5zdXJpbmcgdGhleSBjYW4gYmUgcGFyc2VkIHByb3Blcmx5XG4gICAgLy8gd2hlbiByZXdyaXR0ZW4gdG9cbiAgICBjb25zdCBwYWdlcyA9IGF3YWl0IHRoaXMucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpXG4gICAgY29uc3QgeyBfX3Jld3JpdGVzOiByZXdyaXRlcyB9ID0gYXdhaXQgdGhpcy5wYWdlTG9hZGVyLnByb21pc2VkQnVpbGRNYW5pZmVzdFxuXG4gICAgbGV0IHBhcnNlZCA9IHBhcnNlUmVsYXRpdmVVcmwodXJsKVxuXG4gICAgbGV0IHsgcGF0aG5hbWUsIHF1ZXJ5IH0gPSBwYXJzZWRcblxuICAgIHBhcnNlZCA9IHRoaXMuX3Jlc29sdmVIcmVmKHBhcnNlZCwgcGFnZXMpIGFzIHR5cGVvZiBwYXJzZWRcblxuICAgIGlmIChwYXJzZWQucGF0aG5hbWUgIT09IHBhdGhuYW1lKSB7XG4gICAgICBwYXRobmFtZSA9IHBhcnNlZC5wYXRobmFtZVxuICAgICAgdXJsID0gZm9ybWF0V2l0aFZhbGlkYXRpb24ocGFyc2VkKVxuICAgIH1cblxuICAgIC8vIHVybCBhbmQgYXMgc2hvdWxkIGFsd2F5cyBiZSBwcmVmaXhlZCB3aXRoIGJhc2VQYXRoIGJ5IHRoaXNcbiAgICAvLyBwb2ludCBieSBlaXRoZXIgbmV4dC9saW5rIG9yIHJvdXRlci5wdXNoL3JlcGxhY2Ugc28gc3RyaXAgdGhlXG4gICAgLy8gYmFzZVBhdGggZnJvbSB0aGUgcGF0aG5hbWUgdG8gbWF0Y2ggdGhlIHBhZ2VzIGRpciAxLXRvLTFcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lXG4gICAgICA/IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKGRlbEJhc2VQYXRoKHBhdGhuYW1lKSlcbiAgICAgIDogcGF0aG5hbWVcblxuICAgIC8vIElmIGFza2VkIHRvIGNoYW5nZSB0aGUgY3VycmVudCBVUkwgd2Ugc2hvdWxkIHJlbG9hZCB0aGUgY3VycmVudCBwYWdlXG4gICAgLy8gKG5vdCBsb2NhdGlvbi5yZWxvYWQoKSBidXQgcmVsb2FkIGdldEluaXRpYWxQcm9wcyBhbmQgb3RoZXIgTmV4dC5qcyBzdHVmZnMpXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIHNldCB0aGUgbWV0aG9kID0gcmVwbGFjZVN0YXRlIGFsd2F5c1xuICAgIC8vIGFzIHRoaXMgc2hvdWxkIG5vdCBnbyBpbnRvIHRoZSBoaXN0b3J5IChUaGF0J3MgaG93IGJyb3dzZXJzIHdvcmspXG4gICAgLy8gV2Ugc2hvdWxkIGNvbXBhcmUgdGhlIG5ldyBhc1BhdGggdG8gdGhlIGN1cnJlbnQgYXNQYXRoLCBub3QgdGhlIHVybFxuICAgIGlmICghdGhpcy51cmxJc05ldyhjbGVhbmVkQXMpKSB7XG4gICAgICBtZXRob2QgPSAncmVwbGFjZVN0YXRlJ1xuICAgIH1cblxuICAgIGxldCByb3V0ZSA9IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGhuYW1lKVxuICAgIGNvbnN0IHsgc2hhbGxvdyA9IGZhbHNlIH0gPSBvcHRpb25zXG5cbiAgICAvLyB3ZSBuZWVkIHRvIHJlc29sdmUgdGhlIGFzIHZhbHVlIHVzaW5nIHJld3JpdGVzIGZvciBkeW5hbWljIFNTR1xuICAgIC8vIHBhZ2VzIHRvIGFsbG93IGJ1aWxkaW5nIHRoZSBkYXRhIFVSTCBjb3JyZWN0bHlcbiAgICBsZXQgcmVzb2x2ZWRBcyA9IGFzXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0hBU19SRVdSSVRFUykge1xuICAgICAgcmVzb2x2ZWRBcyA9IHJlc29sdmVSZXdyaXRlcyhcbiAgICAgICAgcGFyc2VSZWxhdGl2ZVVybChhcykucGF0aG5hbWUsXG4gICAgICAgIHBhZ2VzLFxuICAgICAgICBiYXNlUGF0aCxcbiAgICAgICAgcmV3cml0ZXMsXG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICAocDogc3RyaW5nKSA9PiB0aGlzLl9yZXNvbHZlSHJlZih7IHBhdGhuYW1lOiBwIH0sIHBhZ2VzKS5wYXRobmFtZSFcbiAgICAgIClcblxuICAgICAgaWYgKHJlc29sdmVkQXMgIT09IGFzKSB7XG4gICAgICAgIGNvbnN0IHBvdGVudGlhbEhyZWYgPSByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChcbiAgICAgICAgICB0aGlzLl9yZXNvbHZlSHJlZihcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHBhcnNlZCwgeyBwYXRobmFtZTogcmVzb2x2ZWRBcyB9KSxcbiAgICAgICAgICAgIHBhZ2VzLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICApLnBhdGhuYW1lIVxuICAgICAgICApXG5cbiAgICAgICAgLy8gaWYgdGhpcyBkaXJlY3RseSBtYXRjaGVzIGEgcGFnZSB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgaHJlZiB0b1xuICAgICAgICAvLyBhbGxvdyB0aGUgY29ycmVjdCBwYWdlIGNodW5rIHRvIGJlIGxvYWRlZFxuICAgICAgICBpZiAocGFnZXMuaW5jbHVkZXMocG90ZW50aWFsSHJlZikpIHtcbiAgICAgICAgICByb3V0ZSA9IHBvdGVudGlhbEhyZWZcbiAgICAgICAgICBwYXRobmFtZSA9IHBvdGVudGlhbEhyZWZcbiAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBwYXRobmFtZVxuICAgICAgICAgIHVybCA9IGZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXNvbHZlZEFzID0gZGVsTG9jYWxlKGRlbEJhc2VQYXRoKHJlc29sdmVkQXMpLCB0aGlzLmxvY2FsZSlcblxuICAgIGlmIChpc0R5bmFtaWNSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGNvbnN0IHBhcnNlZEFzID0gcGFyc2VSZWxhdGl2ZVVybChyZXNvbHZlZEFzKVxuICAgICAgY29uc3QgYXNQYXRobmFtZSA9IHBhcnNlZEFzLnBhdGhuYW1lXG5cbiAgICAgIGNvbnN0IHJvdXRlUmVnZXggPSBnZXRSb3V0ZVJlZ2V4KHJvdXRlKVxuICAgICAgY29uc3Qgcm91dGVNYXRjaCA9IGdldFJvdXRlTWF0Y2hlcihyb3V0ZVJlZ2V4KShhc1BhdGhuYW1lKVxuICAgICAgY29uc3Qgc2hvdWxkSW50ZXJwb2xhdGUgPSByb3V0ZSA9PT0gYXNQYXRobmFtZVxuICAgICAgY29uc3QgaW50ZXJwb2xhdGVkQXMgPSBzaG91bGRJbnRlcnBvbGF0ZVxuICAgICAgICA/IGludGVycG9sYXRlQXMocm91dGUsIGFzUGF0aG5hbWUsIHF1ZXJ5KVxuICAgICAgICA6ICh7fSBhcyB7IHJlc3VsdDogdW5kZWZpbmVkOyBwYXJhbXM6IHVuZGVmaW5lZCB9KVxuXG4gICAgICBpZiAoIXJvdXRlTWF0Y2ggfHwgKHNob3VsZEludGVycG9sYXRlICYmICFpbnRlcnBvbGF0ZWRBcy5yZXN1bHQpKSB7XG4gICAgICAgIGNvbnN0IG1pc3NpbmdQYXJhbXMgPSBPYmplY3Qua2V5cyhyb3V0ZVJlZ2V4Lmdyb3VwcykuZmlsdGVyKFxuICAgICAgICAgIChwYXJhbSkgPT4gIXF1ZXJ5W3BhcmFtXVxuICAgICAgICApXG5cbiAgICAgICAgaWYgKG1pc3NpbmdQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgIGAke1xuICAgICAgICAgICAgICAgIHNob3VsZEludGVycG9sYXRlXG4gICAgICAgICAgICAgICAgICA/IGBJbnRlcnBvbGF0aW5nIGhyZWZgXG4gICAgICAgICAgICAgICAgICA6IGBNaXNtYXRjaGluZyBcXGBhc1xcYCBhbmQgXFxgaHJlZlxcYGBcbiAgICAgICAgICAgICAgfSBmYWlsZWQgdG8gbWFudWFsbHkgcHJvdmlkZSBgICtcbiAgICAgICAgICAgICAgICBgdGhlIHBhcmFtczogJHttaXNzaW5nUGFyYW1zLmpvaW4oXG4gICAgICAgICAgICAgICAgICAnLCAnXG4gICAgICAgICAgICAgICAgKX0gaW4gdGhlIFxcYGhyZWZcXGAncyBcXGBxdWVyeVxcYGBcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAoc2hvdWxkSW50ZXJwb2xhdGVcbiAgICAgICAgICAgICAgPyBgVGhlIHByb3ZpZGVkIFxcYGhyZWZcXGAgKCR7dXJsfSkgdmFsdWUgaXMgbWlzc2luZyBxdWVyeSB2YWx1ZXMgKCR7bWlzc2luZ1BhcmFtcy5qb2luKFxuICAgICAgICAgICAgICAgICAgJywgJ1xuICAgICAgICAgICAgICAgICl9KSB0byBiZSBpbnRlcnBvbGF0ZWQgcHJvcGVybHkuIGBcbiAgICAgICAgICAgICAgOiBgVGhlIHByb3ZpZGVkIFxcYGFzXFxgIHZhbHVlICgke2FzUGF0aG5hbWV9KSBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgXFxgaHJlZlxcYCB2YWx1ZSAoJHtyb3V0ZX0pLiBgKSArXG4gICAgICAgICAgICAgIGBSZWFkIG1vcmU6IGh0dHBzOi8vZXJyLnNoL3ZlcmNlbC9uZXh0LmpzLyR7XG4gICAgICAgICAgICAgICAgc2hvdWxkSW50ZXJwb2xhdGVcbiAgICAgICAgICAgICAgICAgID8gJ2hyZWYtaW50ZXJwb2xhdGlvbi1mYWlsZWQnXG4gICAgICAgICAgICAgICAgICA6ICdpbmNvbXBhdGlibGUtaHJlZi1hcydcbiAgICAgICAgICAgICAgfWBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSW50ZXJwb2xhdGUpIHtcbiAgICAgICAgYXMgPSBmb3JtYXRXaXRoVmFsaWRhdGlvbihcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBwYXJzZWRBcywge1xuICAgICAgICAgICAgcGF0aG5hbWU6IGludGVycG9sYXRlZEFzLnJlc3VsdCxcbiAgICAgICAgICAgIHF1ZXJ5OiBvbWl0UGFybXNGcm9tUXVlcnkocXVlcnksIGludGVycG9sYXRlZEFzLnBhcmFtcyEpLFxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1lcmdlIHBhcmFtcyBpbnRvIGBxdWVyeWAsIG92ZXJ3cml0aW5nIGFueSBzcGVjaWZpZWQgaW4gc2VhcmNoXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocXVlcnksIHJvdXRlTWF0Y2gpXG4gICAgICB9XG4gICAgfVxuXG4gICAgUm91dGVyLmV2ZW50cy5lbWl0KCdyb3V0ZUNoYW5nZVN0YXJ0JywgYXMpXG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgcm91dGVJbmZvID0gYXdhaXQgdGhpcy5nZXRSb3V0ZUluZm8oXG4gICAgICAgIHJvdXRlLFxuICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgcXVlcnksXG4gICAgICAgIGFzLFxuICAgICAgICBzaGFsbG93XG4gICAgICApXG4gICAgICBsZXQgeyBlcnJvciwgcHJvcHMsIF9fTl9TU0csIF9fTl9TU1AgfSA9IHJvdXRlSW5mb1xuXG4gICAgICAvLyBoYW5kbGUgcmVkaXJlY3Qgb24gY2xpZW50LXRyYW5zaXRpb25cbiAgICAgIGlmIChcbiAgICAgICAgKF9fTl9TU0cgfHwgX19OX1NTUCkgJiZcbiAgICAgICAgcHJvcHMgJiZcbiAgICAgICAgKHByb3BzIGFzIGFueSkucGFnZVByb3BzICYmXG4gICAgICAgIChwcm9wcyBhcyBhbnkpLnBhZ2VQcm9wcy5fX05fUkVESVJFQ1RcbiAgICAgICkge1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IChwcm9wcyBhcyBhbnkpLnBhZ2VQcm9wcy5fX05fUkVESVJFQ1RcblxuICAgICAgICAvLyBjaGVjayBpZiBkZXN0aW5hdGlvbiBpcyBpbnRlcm5hbCAocmVzb2x2ZXMgdG8gYSBwYWdlKSBhbmQgYXR0ZW1wdFxuICAgICAgICAvLyBjbGllbnQtbmF2aWdhdGlvbiBpZiBpdCBpcyBmYWxsaW5nIGJhY2sgdG8gaGFyZCBuYXZpZ2F0aW9uIGlmXG4gICAgICAgIC8vIGl0J3Mgbm90XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbi5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICBjb25zdCBwYXJzZWRIcmVmID0gcGFyc2VSZWxhdGl2ZVVybChkZXN0aW5hdGlvbilcbiAgICAgICAgICB0aGlzLl9yZXNvbHZlSHJlZihwYXJzZWRIcmVmLCBwYWdlcylcblxuICAgICAgICAgIGlmIChwYWdlcy5pbmNsdWRlcyhwYXJzZWRIcmVmLnBhdGhuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlKG1ldGhvZCwgZGVzdGluYXRpb24sIGRlc3RpbmF0aW9uLCBvcHRpb25zKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGVzdGluYXRpb25cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpID0+IHt9KVxuICAgICAgfVxuXG4gICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ2JlZm9yZUhpc3RvcnlDaGFuZ2UnLCBhcylcbiAgICAgIHRoaXMuY2hhbmdlU3RhdGUoXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgdXJsLFxuICAgICAgICBhZGRMb2NhbGUoYXMsIG9wdGlvbnMubG9jYWxlLCB0aGlzLmRlZmF1bHRMb2NhbGUpLFxuICAgICAgICBvcHRpb25zXG4gICAgICApXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGFwcENvbXA6IGFueSA9IHRoaXMuY29tcG9uZW50c1snL19hcHAnXS5Db21wb25lbnRcbiAgICAgICAgOyh3aW5kb3cgYXMgYW55KS5uZXh0LmlzUHJlcmVuZGVyZWQgPVxuICAgICAgICAgIGFwcENvbXAuZ2V0SW5pdGlhbFByb3BzID09PSBhcHBDb21wLm9yaWdHZXRJbml0aWFsUHJvcHMgJiZcbiAgICAgICAgICAhKHJvdXRlSW5mby5Db21wb25lbnQgYXMgYW55KS5nZXRJbml0aWFsUHJvcHNcbiAgICAgIH1cblxuICAgICAgYXdhaXQgdGhpcy5zZXQocm91dGUsIHBhdGhuYW1lISwgcXVlcnksIGNsZWFuZWRBcywgcm91dGVJbmZvKS5jYXRjaChcbiAgICAgICAgKGUpID0+IHtcbiAgICAgICAgICBpZiAoZS5jYW5jZWxsZWQpIGVycm9yID0gZXJyb3IgfHwgZVxuICAgICAgICAgIGVsc2UgdGhyb3cgZVxuICAgICAgICB9XG4gICAgICApXG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ3JvdXRlQ2hhbmdlRXJyb3InLCBlcnJvciwgY2xlYW5lZEFzKVxuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTikge1xuICAgICAgICBpZiAobWFudWFsU2Nyb2xsUmVzdG9yYXRpb24gJiYgJ19OX1gnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oKG9wdGlvbnMgYXMgYW55KS5fTl9YLCAob3B0aW9ucyBhcyBhbnkpLl9OX1kpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgncm91dGVDaGFuZ2VDb21wbGV0ZScsIGFzKVxuXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyci5jYW5jZWxsZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cblxuICBjaGFuZ2VTdGF0ZShcbiAgICBtZXRob2Q6IEhpc3RvcnlNZXRob2QsXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgYXM6IHN0cmluZyxcbiAgICBvcHRpb25zOiBUcmFuc2l0aW9uT3B0aW9ucyA9IHt9XG4gICk6IHZvaWQge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdy5oaXN0b3J5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBXYXJuaW5nOiB3aW5kb3cuaGlzdG9yeSBpcyBub3QgYXZhaWxhYmxlLmApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdy5oaXN0b3J5W21ldGhvZF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFdhcm5pbmc6IHdpbmRvdy5oaXN0b3J5LiR7bWV0aG9kfSBpcyBub3QgYXZhaWxhYmxlYClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1ldGhvZCAhPT0gJ3B1c2hTdGF0ZScgfHwgZ2V0VVJMKCkgIT09IGFzKSB7XG4gICAgICB0aGlzLl9zaGFsbG93ID0gb3B0aW9ucy5zaGFsbG93XG4gICAgICB3aW5kb3cuaGlzdG9yeVttZXRob2RdKFxuICAgICAgICB7XG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIGFzLFxuICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgX19OOiB0cnVlLFxuICAgICAgICB9IGFzIEhpc3RvcnlTdGF0ZSxcbiAgICAgICAgLy8gTW9zdCBicm93c2VycyBjdXJyZW50bHkgaWdub3JlcyB0aGlzIHBhcmFtZXRlciwgYWx0aG91Z2ggdGhleSBtYXkgdXNlIGl0IGluIHRoZSBmdXR1cmUuXG4gICAgICAgIC8vIFBhc3NpbmcgdGhlIGVtcHR5IHN0cmluZyBoZXJlIHNob3VsZCBiZSBzYWZlIGFnYWluc3QgZnV0dXJlIGNoYW5nZXMgdG8gdGhlIG1ldGhvZC5cbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hpc3RvcnkvcmVwbGFjZVN0YXRlXG4gICAgICAgICcnLFxuICAgICAgICBhc1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGhhbmRsZVJvdXRlSW5mb0Vycm9yKFxuICAgIGVycjogRXJyb3IgJiB7IGNvZGU6IGFueTsgY2FuY2VsbGVkOiBib29sZWFuIH0sXG4gICAgcGF0aG5hbWU6IHN0cmluZyxcbiAgICBxdWVyeTogUGFyc2VkVXJsUXVlcnksXG4gICAgYXM6IHN0cmluZyxcbiAgICBsb2FkRXJyb3JGYWlsPzogYm9vbGVhblxuICApOiBQcm9taXNlPFByaXZhdGVSb3V0ZUluZm8+IHtcbiAgICBpZiAoZXJyLmNhbmNlbGxlZCkge1xuICAgICAgLy8gYnViYmxlIHVwIGNhbmNlbGxhdGlvbiBlcnJvcnNcbiAgICAgIHRocm93IGVyclxuICAgIH1cblxuICAgIGlmIChQQUdFX0xPQURfRVJST1IgaW4gZXJyIHx8IGxvYWRFcnJvckZhaWwpIHtcbiAgICAgIFJvdXRlci5ldmVudHMuZW1pdCgncm91dGVDaGFuZ2VFcnJvcicsIGVyciwgYXMpXG5cbiAgICAgIC8vIElmIHdlIGNhbid0IGxvYWQgdGhlIHBhZ2UgaXQgY291bGQgYmUgb25lIG9mIGZvbGxvd2luZyByZWFzb25zXG4gICAgICAvLyAgMS4gUGFnZSBkb2Vzbid0IGV4aXN0c1xuICAgICAgLy8gIDIuIFBhZ2UgZG9lcyBleGlzdCBpbiBhIGRpZmZlcmVudCB6b25lXG4gICAgICAvLyAgMy4gSW50ZXJuYWwgZXJyb3Igd2hpbGUgbG9hZGluZyB0aGUgcGFnZVxuXG4gICAgICAvLyBTbywgZG9pbmcgYSBoYXJkIHJlbG9hZCBpcyB0aGUgcHJvcGVyIHdheSB0byBkZWFsIHdpdGggdGhpcy5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYXNcblxuICAgICAgLy8gQ2hhbmdpbmcgdGhlIFVSTCBkb2Vzbid0IGJsb2NrIGV4ZWN1dGluZyB0aGUgY3VycmVudCBjb2RlIHBhdGguXG4gICAgICAvLyBTbyBsZXQncyB0aHJvdyBhIGNhbmNlbGxhdGlvbiBlcnJvciBzdG9wIHRoZSByb3V0aW5nIGxvZ2ljLlxuICAgICAgdGhyb3cgYnVpbGRDYW5jZWxsYXRpb25FcnJvcigpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBDb21wb25lbnQ6IENvbXBvbmVudFR5cGVcbiAgICAgIGxldCBzdHlsZVNoZWV0czogU3R5bGVTaGVldFR1cGxlW11cbiAgICAgIGxldCBwcm9wczogUmVjb3JkPHN0cmluZywgYW55PiB8IHVuZGVmaW5lZFxuICAgICAgY29uc3Qgc3NnNDA0ID0gZXJyLm1lc3NhZ2UgPT09IFNTR19EQVRBX05PVF9GT1VORF9FUlJPUlxuXG4gICAgICBpZiAoc3NnNDA0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IG1vZDogYW55XG4gICAgICAgICAgOyh7IHBhZ2U6IENvbXBvbmVudCwgc3R5bGVTaGVldHMsIG1vZCB9ID0gYXdhaXQgdGhpcy5mZXRjaENvbXBvbmVudChcbiAgICAgICAgICAgICcvNDA0J1xuICAgICAgICAgICkpXG5cbiAgICAgICAgICAvLyBUT0RPOiBzaG91bGQgd2UgdG9sZXJhdGUgdGhlc2UgcHJvcHMgbWlzc2luZyBhbmQgc3RpbGwgcmVuZGVyIHRoZVxuICAgICAgICAgIC8vIHBhZ2UgaW5zdGVhZCBvZiBmYWxsaW5nIGJhY2sgdG8gX2Vycm9yP1xuICAgICAgICAgIGlmIChtb2QgJiYgbW9kLl9fTl9TU0cpIHtcbiAgICAgICAgICAgIHByb3BzID0gYXdhaXQgdGhpcy5fZ2V0U3RhdGljRGF0YShcbiAgICAgICAgICAgICAgdGhpcy5wYWdlTG9hZGVyLmdldERhdGFIcmVmKCcvNDA0JywgJy80MDQnLCB0cnVlLCB0aGlzLmxvY2FsZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgICAvLyBub24tZmF0YWwgZmFsbGJhY2sgdG8gX2Vycm9yXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgQ29tcG9uZW50ISA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgdHlwZW9mIHN0eWxlU2hlZXRzISA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICkge1xuICAgICAgICA7KHsgcGFnZTogQ29tcG9uZW50LCBzdHlsZVNoZWV0cyB9ID0gYXdhaXQgdGhpcy5mZXRjaENvbXBvbmVudChcbiAgICAgICAgICAnL19lcnJvcidcbiAgICAgICAgKSlcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm91dGVJbmZvOiBQcml2YXRlUm91dGVJbmZvID0ge1xuICAgICAgICBwcm9wcyxcbiAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICBzdHlsZVNoZWV0cyxcbiAgICAgICAgZXJyOiBzc2c0MDQgPyB1bmRlZmluZWQgOiBlcnIsXG4gICAgICAgIGVycm9yOiBzc2c0MDQgPyB1bmRlZmluZWQgOiBlcnIsXG4gICAgICB9XG5cbiAgICAgIGlmICghcm91dGVJbmZvLnByb3BzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcm91dGVJbmZvLnByb3BzID0gYXdhaXQgdGhpcy5nZXRJbml0aWFsUHJvcHMoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgIH0gYXMgYW55KVxuICAgICAgICB9IGNhdGNoIChnaXBFcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBlcnJvciBwYWdlIGBnZXRJbml0aWFsUHJvcHNgOiAnLCBnaXBFcnIpXG4gICAgICAgICAgcm91dGVJbmZvLnByb3BzID0ge31cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcm91dGVJbmZvXG4gICAgfSBjYXRjaCAocm91dGVJbmZvRXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVSb3V0ZUluZm9FcnJvcihyb3V0ZUluZm9FcnIsIHBhdGhuYW1lLCBxdWVyeSwgYXMsIHRydWUpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0Um91dGVJbmZvKFxuICAgIHJvdXRlOiBzdHJpbmcsXG4gICAgcGF0aG5hbWU6IHN0cmluZyxcbiAgICBxdWVyeTogYW55LFxuICAgIGFzOiBzdHJpbmcsXG4gICAgc2hhbGxvdzogYm9vbGVhbiA9IGZhbHNlXG4gICk6IFByb21pc2U8UHJpdmF0ZVJvdXRlSW5mbz4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjYWNoZWRSb3V0ZUluZm8gPSB0aGlzLmNvbXBvbmVudHNbcm91dGVdXG5cbiAgICAgIGlmIChzaGFsbG93ICYmIGNhY2hlZFJvdXRlSW5mbyAmJiB0aGlzLnJvdXRlID09PSByb3V0ZSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkUm91dGVJbmZvXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJvdXRlSW5mbzogUHJpdmF0ZVJvdXRlSW5mbyA9IGNhY2hlZFJvdXRlSW5mb1xuICAgICAgICA/IGNhY2hlZFJvdXRlSW5mb1xuICAgICAgICA6IGF3YWl0IHRoaXMuZmV0Y2hDb21wb25lbnQocm91dGUpLnRoZW4oKHJlcykgPT4gKHtcbiAgICAgICAgICAgIENvbXBvbmVudDogcmVzLnBhZ2UsXG4gICAgICAgICAgICBzdHlsZVNoZWV0czogcmVzLnN0eWxlU2hlZXRzLFxuICAgICAgICAgICAgX19OX1NTRzogcmVzLm1vZC5fX05fU1NHLFxuICAgICAgICAgICAgX19OX1NTUDogcmVzLm1vZC5fX05fU1NQLFxuICAgICAgICAgIH0pKVxuXG4gICAgICBjb25zdCB7IENvbXBvbmVudCwgX19OX1NTRywgX19OX1NTUCB9ID0gcm91dGVJbmZvXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gPSByZXF1aXJlKCdyZWFjdC1pcycpXG4gICAgICAgIGlmICghaXNWYWxpZEVsZW1lbnRUeXBlKENvbXBvbmVudCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgVGhlIGRlZmF1bHQgZXhwb3J0IGlzIG5vdCBhIFJlYWN0IENvbXBvbmVudCBpbiBwYWdlOiBcIiR7cGF0aG5hbWV9XCJgXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBkYXRhSHJlZjogc3RyaW5nIHwgdW5kZWZpbmVkXG5cbiAgICAgIGlmIChfX05fU1NHIHx8IF9fTl9TU1ApIHtcbiAgICAgICAgZGF0YUhyZWYgPSB0aGlzLnBhZ2VMb2FkZXIuZ2V0RGF0YUhyZWYoXG4gICAgICAgICAgZm9ybWF0V2l0aFZhbGlkYXRpb24oeyBwYXRobmFtZSwgcXVlcnkgfSksXG4gICAgICAgICAgZGVsQmFzZVBhdGgoYXMpLFxuICAgICAgICAgIF9fTl9TU0csXG4gICAgICAgICAgdGhpcy5sb2NhbGVcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9wcyA9IGF3YWl0IHRoaXMuX2dldERhdGE8UHJpdmF0ZVJvdXRlSW5mbz4oKCkgPT5cbiAgICAgICAgX19OX1NTR1xuICAgICAgICAgID8gdGhpcy5fZ2V0U3RhdGljRGF0YShkYXRhSHJlZiEpXG4gICAgICAgICAgOiBfX05fU1NQXG4gICAgICAgICAgPyB0aGlzLl9nZXRTZXJ2ZXJEYXRhKGRhdGFIcmVmISlcbiAgICAgICAgICA6IHRoaXMuZ2V0SW5pdGlhbFByb3BzKFxuICAgICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICAgIC8vIHdlIHByb3ZpZGUgQXBwVHJlZSBsYXRlciBzbyB0aGlzIG5lZWRzIHRvIGJlIGBhbnlgXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICBhc1BhdGg6IGFzLFxuICAgICAgICAgICAgICB9IGFzIGFueVxuICAgICAgICAgICAgKVxuICAgICAgKVxuXG4gICAgICByb3V0ZUluZm8ucHJvcHMgPSBwcm9wc1xuICAgICAgdGhpcy5jb21wb25lbnRzW3JvdXRlXSA9IHJvdXRlSW5mb1xuICAgICAgcmV0dXJuIHJvdXRlSW5mb1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUm91dGVJbmZvRXJyb3IoZXJyLCBwYXRobmFtZSwgcXVlcnksIGFzKVxuICAgIH1cbiAgfVxuXG4gIHNldChcbiAgICByb3V0ZTogc3RyaW5nLFxuICAgIHBhdGhuYW1lOiBzdHJpbmcsXG4gICAgcXVlcnk6IFBhcnNlZFVybFF1ZXJ5LFxuICAgIGFzOiBzdHJpbmcsXG4gICAgZGF0YTogUHJpdmF0ZVJvdXRlSW5mb1xuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmlzRmFsbGJhY2sgPSBmYWxzZVxuXG4gICAgdGhpcy5yb3V0ZSA9IHJvdXRlXG4gICAgdGhpcy5wYXRobmFtZSA9IHBhdGhuYW1lXG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5XG4gICAgdGhpcy5hc1BhdGggPSBhc1xuICAgIHJldHVybiB0aGlzLm5vdGlmeShkYXRhKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRvIGV4ZWN1dGUgYmVmb3JlIHJlcGxhY2luZyByb3V0ZXIgc3RhdGVcbiAgICogQHBhcmFtIGNiIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkXG4gICAqL1xuICBiZWZvcmVQb3BTdGF0ZShjYjogQmVmb3JlUG9wU3RhdGVDYWxsYmFjaykge1xuICAgIHRoaXMuX2JwcyA9IGNiXG4gIH1cblxuICBvbmx5QUhhc2hDaGFuZ2UoYXM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5hc1BhdGgpIHJldHVybiBmYWxzZVxuICAgIGNvbnN0IFtvbGRVcmxOb0hhc2gsIG9sZEhhc2hdID0gdGhpcy5hc1BhdGguc3BsaXQoJyMnKVxuICAgIGNvbnN0IFtuZXdVcmxOb0hhc2gsIG5ld0hhc2hdID0gYXMuc3BsaXQoJyMnKVxuXG4gICAgLy8gTWFrZXMgc3VyZSB3ZSBzY3JvbGwgdG8gdGhlIHByb3ZpZGVkIGhhc2ggaWYgdGhlIHVybC9oYXNoIGFyZSB0aGUgc2FtZVxuICAgIGlmIChuZXdIYXNoICYmIG9sZFVybE5vSGFzaCA9PT0gbmV3VXJsTm9IYXNoICYmIG9sZEhhc2ggPT09IG5ld0hhc2gpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHVybHMgYXJlIGNoYW5nZSwgdGhlcmUncyBtb3JlIHRoYW4gYSBoYXNoIGNoYW5nZVxuICAgIGlmIChvbGRVcmxOb0hhc2ggIT09IG5ld1VybE5vSGFzaCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIGhhc2ggaGFzIGNoYW5nZWQsIHRoZW4gaXQncyBhIGhhc2ggb25seSBjaGFuZ2UuXG4gICAgLy8gVGhpcyBjaGVjayBpcyBuZWNlc3NhcnkgdG8gaGFuZGxlIGJvdGggdGhlIGVudGVyIGFuZFxuICAgIC8vIGxlYXZlIGhhc2ggPT09ICcnIGNhc2VzLiBUaGUgaWRlbnRpdHkgY2FzZSBmYWxscyB0aHJvdWdoXG4gICAgLy8gYW5kIGlzIHRyZWF0ZWQgYXMgYSBuZXh0IHJlbG9hZC5cbiAgICByZXR1cm4gb2xkSGFzaCAhPT0gbmV3SGFzaFxuICB9XG5cbiAgc2Nyb2xsVG9IYXNoKGFzOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBbLCBoYXNoXSA9IGFzLnNwbGl0KCcjJylcbiAgICAvLyBTY3JvbGwgdG8gdG9wIGlmIHRoZSBoYXNoIGlzIGp1c3QgYCNgIHdpdGggbm8gdmFsdWVcbiAgICBpZiAoaGFzaCA9PT0gJycpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gRmlyc3Qgd2UgY2hlY2sgaWYgdGhlIGVsZW1lbnQgYnkgaWQgaXMgZm91bmRcbiAgICBjb25zdCBpZEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaClcbiAgICBpZiAoaWRFbCkge1xuICAgICAgaWRFbC5zY3JvbGxJbnRvVmlldygpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gSWYgdGhlcmUncyBubyBlbGVtZW50IHdpdGggdGhlIGlkLCB3ZSBjaGVjayB0aGUgYG5hbWVgIHByb3BlcnR5XG4gICAgLy8gVG8gbWlycm9yIGJyb3dzZXJzXG4gICAgY29uc3QgbmFtZUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaClbMF1cbiAgICBpZiAobmFtZUVsKSB7XG4gICAgICBuYW1lRWwuc2Nyb2xsSW50b1ZpZXcoKVxuICAgIH1cbiAgfVxuXG4gIHVybElzTmV3KGFzUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYXNQYXRoICE9PSBhc1BhdGhcbiAgfVxuXG4gIF9yZXNvbHZlSHJlZihwYXJzZWRIcmVmOiBVcmxPYmplY3QsIHBhZ2VzOiBzdHJpbmdbXSwgYXBwbHlCYXNlUGF0aCA9IHRydWUpIHtcbiAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSBwYXJzZWRIcmVmXG4gICAgY29uc3QgY2xlYW5QYXRobmFtZSA9IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKFxuICAgICAgZGVub3JtYWxpemVQYWdlUGF0aChhcHBseUJhc2VQYXRoID8gZGVsQmFzZVBhdGgocGF0aG5hbWUhKSA6IHBhdGhuYW1lISlcbiAgICApXG5cbiAgICBpZiAoY2xlYW5QYXRobmFtZSA9PT0gJy80MDQnIHx8IGNsZWFuUGF0aG5hbWUgPT09ICcvX2Vycm9yJykge1xuICAgICAgcmV0dXJuIHBhcnNlZEhyZWZcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgcmVzb2x2aW5nIGhyZWYgZm9yIGR5bmFtaWMgcm91dGVzXG4gICAgaWYgKCFwYWdlcy5pbmNsdWRlcyhjbGVhblBhdGhuYW1lISkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cbiAgICAgIHBhZ2VzLnNvbWUoKHBhZ2UpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzRHluYW1pY1JvdXRlKHBhZ2UpICYmXG4gICAgICAgICAgZ2V0Um91dGVSZWdleChwYWdlKS5yZS50ZXN0KGNsZWFuUGF0aG5hbWUhKVxuICAgICAgICApIHtcbiAgICAgICAgICBwYXJzZWRIcmVmLnBhdGhuYW1lID0gYXBwbHlCYXNlUGF0aCA/IGFkZEJhc2VQYXRoKHBhZ2UpIDogcGFnZVxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiBwYXJzZWRIcmVmXG4gIH1cblxuICAvKipcbiAgICogUHJlZmV0Y2ggcGFnZSBjb2RlLCB5b3UgbWF5IHdhaXQgZm9yIHRoZSBkYXRhIGR1cmluZyBwYWdlIHJlbmRlcmluZy5cbiAgICogVGhpcyBmZWF0dXJlIG9ubHkgd29ya3MgaW4gcHJvZHVjdGlvbiFcbiAgICogQHBhcmFtIHVybCB0aGUgaHJlZiBvZiBwcmVmZXRjaGVkIHBhZ2VcbiAgICogQHBhcmFtIGFzUGF0aCB0aGUgYXMgcGF0aCBvZiB0aGUgcHJlZmV0Y2hlZCBwYWdlXG4gICAqL1xuICBhc3luYyBwcmVmZXRjaChcbiAgICB1cmw6IHN0cmluZyxcbiAgICBhc1BhdGg6IHN0cmluZyA9IHVybCxcbiAgICBvcHRpb25zOiBQcmVmZXRjaE9wdGlvbnMgPSB7fVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsZXQgcGFyc2VkID0gcGFyc2VSZWxhdGl2ZVVybCh1cmwpXG5cbiAgICBsZXQgeyBwYXRobmFtZSB9ID0gcGFyc2VkXG5cbiAgICBjb25zdCBwYWdlcyA9IGF3YWl0IHRoaXMucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpXG5cbiAgICBwYXJzZWQgPSB0aGlzLl9yZXNvbHZlSHJlZihwYXJzZWQsIHBhZ2VzKSBhcyB0eXBlb2YgcGFyc2VkXG5cbiAgICBpZiAocGFyc2VkLnBhdGhuYW1lICE9PSBwYXRobmFtZSkge1xuICAgICAgcGF0aG5hbWUgPSBwYXJzZWQucGF0aG5hbWVcbiAgICAgIHVybCA9IGZvcm1hdFdpdGhWYWxpZGF0aW9uKHBhcnNlZClcbiAgICB9XG5cbiAgICAvLyBQcmVmZXRjaCBpcyBub3Qgc3VwcG9ydGVkIGluIGRldmVsb3BtZW50IG1vZGUgYmVjYXVzZSBpdCB3b3VsZCB0cmlnZ2VyIG9uLWRlbWFuZC1lbnRyaWVzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJvdXRlID0gcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2gocGF0aG5hbWUpXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgdGhpcy5wYWdlTG9hZGVyLnByZWZldGNoRGF0YShcbiAgICAgICAgdXJsLFxuICAgICAgICBhc1BhdGgsXG4gICAgICAgIHRoaXMubG9jYWxlLFxuICAgICAgICB0aGlzLmRlZmF1bHRMb2NhbGVcbiAgICAgICksXG4gICAgICB0aGlzLnBhZ2VMb2FkZXJbb3B0aW9ucy5wcmlvcml0eSA/ICdsb2FkUGFnZScgOiAncHJlZmV0Y2gnXShyb3V0ZSksXG4gICAgXSlcbiAgfVxuXG4gIGFzeW5jIGZldGNoQ29tcG9uZW50KHJvdXRlOiBzdHJpbmcpOiBQcm9taXNlPEdvb2RQYWdlQ2FjaGU+IHtcbiAgICBsZXQgY2FuY2VsbGVkID0gZmFsc2VcbiAgICBjb25zdCBjYW5jZWwgPSAodGhpcy5jbGMgPSAoKSA9PiB7XG4gICAgICBjYW5jZWxsZWQgPSB0cnVlXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbXBvbmVudFJlc3VsdCA9IGF3YWl0IHRoaXMucGFnZUxvYWRlci5sb2FkUGFnZShyb3V0ZSlcblxuICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgIGNvbnN0IGVycm9yOiBhbnkgPSBuZXcgRXJyb3IoXG4gICAgICAgIGBBYm9ydCBmZXRjaGluZyBjb21wb25lbnQgZm9yIHJvdXRlOiBcIiR7cm91dGV9XCJgXG4gICAgICApXG4gICAgICBlcnJvci5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cblxuICAgIGlmIChjYW5jZWwgPT09IHRoaXMuY2xjKSB7XG4gICAgICB0aGlzLmNsYyA9IG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcG9uZW50UmVzdWx0XG4gIH1cblxuICBfZ2V0RGF0YTxUPihmbjogKCkgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuICAgIGxldCBjYW5jZWxsZWQgPSBmYWxzZVxuICAgIGNvbnN0IGNhbmNlbCA9ICgpID0+IHtcbiAgICAgIGNhbmNlbGxlZCA9IHRydWVcbiAgICB9XG4gICAgdGhpcy5jbGMgPSBjYW5jZWxcbiAgICByZXR1cm4gZm4oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICBpZiAoY2FuY2VsID09PSB0aGlzLmNsYykge1xuICAgICAgICB0aGlzLmNsYyA9IG51bGxcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICBjb25zdCBlcnI6IGFueSA9IG5ldyBFcnJvcignTG9hZGluZyBpbml0aWFsIHByb3BzIGNhbmNlbGxlZCcpXG4gICAgICAgIGVyci5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICAgIHRocm93IGVyclxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH0pXG4gIH1cblxuICBfZ2V0U3RhdGljRGF0YShkYXRhSHJlZjogc3RyaW5nKTogUHJvbWlzZTxvYmplY3Q+IHtcbiAgICBjb25zdCB7IGhyZWY6IGNhY2hlS2V5IH0gPSBuZXcgVVJMKGRhdGFIcmVmLCB3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiB0aGlzLnNkY1tjYWNoZUtleV0pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5zZGNbY2FjaGVLZXldKVxuICAgIH1cbiAgICByZXR1cm4gZmV0Y2hOZXh0RGF0YShkYXRhSHJlZiwgdGhpcy5pc1NzcikudGhlbigoZGF0YSkgPT4ge1xuICAgICAgdGhpcy5zZGNbY2FjaGVLZXldID0gZGF0YVxuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9KVxuICB9XG5cbiAgX2dldFNlcnZlckRhdGEoZGF0YUhyZWY6IHN0cmluZyk6IFByb21pc2U8b2JqZWN0PiB7XG4gICAgcmV0dXJuIGZldGNoTmV4dERhdGEoZGF0YUhyZWYsIHRoaXMuaXNTc3IpXG4gIH1cblxuICBnZXRJbml0aWFsUHJvcHMoXG4gICAgQ29tcG9uZW50OiBDb21wb25lbnRUeXBlLFxuICAgIGN0eDogTmV4dFBhZ2VDb250ZXh0XG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgeyBDb21wb25lbnQ6IEFwcCB9ID0gdGhpcy5jb21wb25lbnRzWycvX2FwcCddXG4gICAgY29uc3QgQXBwVHJlZSA9IHRoaXMuX3dyYXBBcHAoQXBwIGFzIEFwcENvbXBvbmVudClcbiAgICBjdHguQXBwVHJlZSA9IEFwcFRyZWVcbiAgICByZXR1cm4gbG9hZEdldEluaXRpYWxQcm9wczxBcHBDb250ZXh0VHlwZTxSb3V0ZXI+PihBcHAsIHtcbiAgICAgIEFwcFRyZWUsXG4gICAgICBDb21wb25lbnQsXG4gICAgICByb3V0ZXI6IHRoaXMsXG4gICAgICBjdHgsXG4gICAgfSlcbiAgfVxuXG4gIGFib3J0Q29tcG9uZW50TG9hZChhczogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY2xjKSB7XG4gICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoJ3JvdXRlQ2hhbmdlRXJyb3InLCBidWlsZENhbmNlbGxhdGlvbkVycm9yKCksIGFzKVxuICAgICAgdGhpcy5jbGMoKVxuICAgICAgdGhpcy5jbGMgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgbm90aWZ5KGRhdGE6IFByaXZhdGVSb3V0ZUluZm8pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdWIoZGF0YSwgdGhpcy5jb21wb25lbnRzWycvX2FwcCddLkNvbXBvbmVudCBhcyBBcHBDb21wb25lbnQpXG4gIH1cbn1cbiIsIi8vIGVzY2FwZSBkZWxpbWl0ZXJzIHVzZWQgYnkgcGF0aC10by1yZWdleHBcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVzY2FwZVBhdGhEZWxpbWl0ZXJzKHNlZ21lbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzZWdtZW50LnJlcGxhY2UoL1svIz9dL2csIChjaGFyOiBzdHJpbmcpID0+IGVuY29kZVVSSUNvbXBvbmVudChjaGFyKSlcbn1cbiIsIi8vIEZvcm1hdCBmdW5jdGlvbiBtb2RpZmllZCBmcm9tIG5vZGVqc1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7IFVybE9iamVjdCB9IGZyb20gJ3VybCdcbmltcG9ydCB7IFBhcnNlZFVybFF1ZXJ5IH0gZnJvbSAncXVlcnlzdHJpbmcnXG5pbXBvcnQgKiBhcyBxdWVyeXN0cmluZyBmcm9tICcuL3F1ZXJ5c3RyaW5nJ1xuXG5jb25zdCBzbGFzaGVkUHJvdG9jb2xzID0gL2h0dHBzP3xmdHB8Z29waGVyfGZpbGUvXG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRVcmwodXJsT2JqOiBVcmxPYmplY3QpIHtcbiAgbGV0IHsgYXV0aCwgaG9zdG5hbWUgfSA9IHVybE9ialxuICBsZXQgcHJvdG9jb2wgPSB1cmxPYmoucHJvdG9jb2wgfHwgJydcbiAgbGV0IHBhdGhuYW1lID0gdXJsT2JqLnBhdGhuYW1lIHx8ICcnXG4gIGxldCBoYXNoID0gdXJsT2JqLmhhc2ggfHwgJydcbiAgbGV0IHF1ZXJ5ID0gdXJsT2JqLnF1ZXJ5IHx8ICcnXG4gIGxldCBob3N0OiBzdHJpbmcgfCBmYWxzZSA9IGZhbHNlXG5cbiAgYXV0aCA9IGF1dGggPyBlbmNvZGVVUklDb21wb25lbnQoYXV0aCkucmVwbGFjZSgvJTNBL2ksICc6JykgKyAnQCcgOiAnJ1xuXG4gIGlmICh1cmxPYmouaG9zdCkge1xuICAgIGhvc3QgPSBhdXRoICsgdXJsT2JqLmhvc3RcbiAgfSBlbHNlIGlmIChob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKH5ob3N0bmFtZS5pbmRleE9mKCc6JykgPyBgWyR7aG9zdG5hbWV9XWAgOiBob3N0bmFtZSlcbiAgICBpZiAodXJsT2JqLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gJzonICsgdXJsT2JqLnBvcnRcbiAgICB9XG4gIH1cblxuICBpZiAocXVlcnkgJiYgdHlwZW9mIHF1ZXJ5ID09PSAnb2JqZWN0Jykge1xuICAgIHF1ZXJ5ID0gU3RyaW5nKHF1ZXJ5c3RyaW5nLnVybFF1ZXJ5VG9TZWFyY2hQYXJhbXMocXVlcnkgYXMgUGFyc2VkVXJsUXVlcnkpKVxuICB9XG5cbiAgbGV0IHNlYXJjaCA9IHVybE9iai5zZWFyY2ggfHwgKHF1ZXJ5ICYmIGA/JHtxdWVyeX1gKSB8fCAnJ1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6J1xuXG4gIGlmIChcbiAgICB1cmxPYmouc2xhc2hlcyB8fFxuICAgICgoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbHMudGVzdChwcm90b2NvbCkpICYmIGhvc3QgIT09IGZhbHNlKVxuICApIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKVxuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZVswXSAhPT0gJy8nKSBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lXG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJydcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2hbMF0gIT09ICcjJykgaGFzaCA9ICcjJyArIGhhc2hcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2hbMF0gIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoXG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGVuY29kZVVSSUNvbXBvbmVudClcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJylcblxuICByZXR1cm4gYCR7cHJvdG9jb2x9JHtob3N0fSR7cGF0aG5hbWV9JHtzZWFyY2h9JHtoYXNofWBcbn1cbiIsIi8vIElkZW50aWZ5IC9bcGFyYW1dLyBpbiByb3V0ZSBzdHJpbmdcbmNvbnN0IFRFU1RfUk9VVEUgPSAvXFwvXFxbW14vXSs/XFxdKD89XFwvfCQpL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEeW5hbWljUm91dGUocm91dGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gVEVTVF9ST1VURS50ZXN0KHJvdXRlKVxufVxuIiwiaW1wb3J0IHsgZ2V0TG9jYXRpb25PcmlnaW4gfSBmcm9tICcuLi8uLi91dGlscydcbmltcG9ydCB7IHNlYXJjaFBhcmFtc1RvVXJsUXVlcnkgfSBmcm9tICcuL3F1ZXJ5c3RyaW5nJ1xuXG5jb25zdCBEVU1NWV9CQVNFID0gbmV3IFVSTChcbiAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyAnaHR0cDovL24nIDogZ2V0TG9jYXRpb25PcmlnaW4oKVxuKVxuXG4vKipcbiAqIFBhcnNlcyBwYXRoLXJlbGF0aXZlIHVybHMgKGUuZy4gYC9oZWxsby93b3JsZD9mb289YmFyYCkuIElmIHVybCBpc24ndCBwYXRoLXJlbGF0aXZlXG4gKiAoZS5nLiBgLi9oZWxsb2ApIHRoZW4gYXQgbGVhc3QgYmFzZSBtdXN0IGJlLlxuICogQWJzb2x1dGUgdXJscyBhcmUgcmVqZWN0ZWQgd2l0aCBvbmUgZXhjZXB0aW9uLCBpbiB0aGUgYnJvd3NlciwgYWJzb2x1dGUgdXJscyB0aGF0IGFyZSBvblxuICogdGhlIGN1cnJlbnQgb3JpZ2luIHdpbGwgYmUgcGFyc2VkIGFzIHJlbGF0aXZlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlbGF0aXZlVXJsKHVybDogc3RyaW5nLCBiYXNlPzogc3RyaW5nKSB7XG4gIGNvbnN0IHJlc29sdmVkQmFzZSA9IGJhc2UgPyBuZXcgVVJMKGJhc2UsIERVTU1ZX0JBU0UpIDogRFVNTVlfQkFTRVxuICBjb25zdCB7XG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoUGFyYW1zLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoLFxuICAgIGhyZWYsXG4gICAgb3JpZ2luLFxuICAgIHByb3RvY29sLFxuICB9ID0gbmV3IFVSTCh1cmwsIHJlc29sdmVkQmFzZSlcbiAgaWYgKFxuICAgIG9yaWdpbiAhPT0gRFVNTVlfQkFTRS5vcmlnaW4gfHxcbiAgICAocHJvdG9jb2wgIT09ICdodHRwOicgJiYgcHJvdG9jb2wgIT09ICdodHRwczonKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudDogaW52YWxpZCByZWxhdGl2ZSBVUkwnKVxuICB9XG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWUsXG4gICAgcXVlcnk6IHNlYXJjaFBhcmFtc1RvVXJsUXVlcnkoc2VhcmNoUGFyYW1zKSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaCxcbiAgICBocmVmOiBocmVmLnNsaWNlKERVTU1ZX0JBU0Uub3JpZ2luLmxlbmd0aCksXG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIHBhdGhUb1JlZ2V4cCBmcm9tICduZXh0L2Rpc3QvY29tcGlsZWQvcGF0aC10by1yZWdleHAnXG5cbmV4cG9ydCB7IHBhdGhUb1JlZ2V4cCB9XG5cbmV4cG9ydCBjb25zdCBtYXRjaGVyT3B0aW9uczogcGF0aFRvUmVnZXhwLlRva2Vuc1RvUmVnZXhwT3B0aW9ucyAmXG4gIHBhdGhUb1JlZ2V4cC5QYXJzZU9wdGlvbnMgPSB7XG4gIHNlbnNpdGl2ZTogZmFsc2UsXG4gIGRlbGltaXRlcjogJy8nLFxufVxuXG5leHBvcnQgY29uc3QgY3VzdG9tUm91dGVNYXRjaGVyT3B0aW9uczogcGF0aFRvUmVnZXhwLlRva2Vuc1RvUmVnZXhwT3B0aW9ucyAmXG4gIHBhdGhUb1JlZ2V4cC5QYXJzZU9wdGlvbnMgPSB7XG4gIC4uLm1hdGNoZXJPcHRpb25zLFxuICBzdHJpY3Q6IHRydWUsXG59XG5cbmV4cG9ydCBkZWZhdWx0IChjdXN0b21Sb3V0ZSA9IGZhbHNlKSA9PiB7XG4gIHJldHVybiAocGF0aDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3Qga2V5czogcGF0aFRvUmVnZXhwLktleVtdID0gW11cbiAgICBjb25zdCBtYXRjaGVyUmVnZXggPSBwYXRoVG9SZWdleHAucGF0aFRvUmVnZXhwKFxuICAgICAgcGF0aCxcbiAgICAgIGtleXMsXG4gICAgICBjdXN0b21Sb3V0ZSA/IGN1c3RvbVJvdXRlTWF0Y2hlck9wdGlvbnMgOiBtYXRjaGVyT3B0aW9uc1xuICAgIClcbiAgICBjb25zdCBtYXRjaGVyID0gcGF0aFRvUmVnZXhwLnJlZ2V4cFRvRnVuY3Rpb24obWF0Y2hlclJlZ2V4LCBrZXlzKVxuXG4gICAgcmV0dXJuIChwYXRobmFtZTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCwgcGFyYW1zPzogYW55KSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBwYXRobmFtZSA9PSBudWxsID8gZmFsc2UgOiBtYXRjaGVyKHBhdGhuYW1lKVxuICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmIChjdXN0b21Sb3V0ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgICAgLy8gdW5uYW1lZCBwYXJhbXMgc2hvdWxkIGJlIHJlbW92ZWQgYXMgdGhleVxuICAgICAgICAgIC8vIGFyZSBub3QgYWxsb3dlZCB0byBiZSB1c2VkIGluIHRoZSBkZXN0aW5hdGlvblxuICAgICAgICAgIGlmICh0eXBlb2Yga2V5Lm5hbWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkZWxldGUgKHJlcy5wYXJhbXMgYXMgYW55KVtrZXkubmFtZV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgLi4ucGFyYW1zLCAuLi5yZXMucGFyYW1zIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFBhcnNlZFVybFF1ZXJ5IH0gZnJvbSAncXVlcnlzdHJpbmcnXG5pbXBvcnQgeyBzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5IH0gZnJvbSAnLi9xdWVyeXN0cmluZydcbmltcG9ydCB7IHBhcnNlUmVsYXRpdmVVcmwgfSBmcm9tICcuL3BhcnNlLXJlbGF0aXZlLXVybCdcbmltcG9ydCAqIGFzIHBhdGhUb1JlZ2V4cCBmcm9tICduZXh0L2Rpc3QvY29tcGlsZWQvcGF0aC10by1yZWdleHAnXG5cbnR5cGUgUGFyYW1zID0geyBbcGFyYW06IHN0cmluZ106IGFueSB9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBhcmVEZXN0aW5hdGlvbihcbiAgZGVzdGluYXRpb246IHN0cmluZyxcbiAgcGFyYW1zOiBQYXJhbXMsXG4gIHF1ZXJ5OiBQYXJzZWRVcmxRdWVyeSxcbiAgYXBwZW5kUGFyYW1zVG9RdWVyeTogYm9vbGVhbixcbiAgYmFzZVBhdGg6IHN0cmluZ1xuKSB7XG4gIGxldCBwYXJzZWREZXN0aW5hdGlvbjoge1xuICAgIHF1ZXJ5PzogUGFyc2VkVXJsUXVlcnlcbiAgICBwcm90b2NvbD86IHN0cmluZ1xuICAgIGhvc3RuYW1lPzogc3RyaW5nXG4gICAgcG9ydD86IHN0cmluZ1xuICB9ICYgUmV0dXJuVHlwZTx0eXBlb2YgcGFyc2VSZWxhdGl2ZVVybD4gPSB7fSBhcyBhbnlcblxuICBpZiAoZGVzdGluYXRpb24uc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgcGFyc2VkRGVzdGluYXRpb24gPSBwYXJzZVJlbGF0aXZlVXJsKGRlc3RpbmF0aW9uKVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoUGFyYW1zLFxuICAgICAgaGFzaCxcbiAgICAgIGhvc3RuYW1lLFxuICAgICAgcG9ydCxcbiAgICAgIHByb3RvY29sLFxuICAgICAgc2VhcmNoLFxuICAgICAgaHJlZixcbiAgICB9ID0gbmV3IFVSTChkZXN0aW5hdGlvbilcblxuICAgIHBhcnNlZERlc3RpbmF0aW9uID0ge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBxdWVyeTogc2VhcmNoUGFyYW1zVG9VcmxRdWVyeShzZWFyY2hQYXJhbXMpLFxuICAgICAgaGFzaCxcbiAgICAgIHByb3RvY29sLFxuICAgICAgaG9zdG5hbWUsXG4gICAgICBwb3J0LFxuICAgICAgc2VhcmNoLFxuICAgICAgaHJlZixcbiAgICB9XG4gIH1cblxuICBjb25zdCBkZXN0UXVlcnkgPSBwYXJzZWREZXN0aW5hdGlvbi5xdWVyeVxuICBjb25zdCBkZXN0UGF0aCA9IGAke3BhcnNlZERlc3RpbmF0aW9uLnBhdGhuYW1lIX0ke1xuICAgIHBhcnNlZERlc3RpbmF0aW9uLmhhc2ggfHwgJydcbiAgfWBcbiAgY29uc3QgZGVzdFBhdGhQYXJhbUtleXM6IHBhdGhUb1JlZ2V4cC5LZXlbXSA9IFtdXG4gIHBhdGhUb1JlZ2V4cC5wYXRoVG9SZWdleHAoZGVzdFBhdGgsIGRlc3RQYXRoUGFyYW1LZXlzKVxuXG4gIGNvbnN0IGRlc3RQYXRoUGFyYW1zID0gZGVzdFBhdGhQYXJhbUtleXMubWFwKChrZXkpID0+IGtleS5uYW1lKVxuXG4gIGxldCBkZXN0aW5hdGlvbkNvbXBpbGVyID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUoXG4gICAgZGVzdFBhdGgsXG4gICAgLy8gd2UgZG9uJ3QgdmFsaWRhdGUgd2hpbGUgY29tcGlsaW5nIHRoZSBkZXN0aW5hdGlvbiBzaW5jZSB3ZSBzaG91bGRcbiAgICAvLyBoYXZlIGFscmVhZHkgdmFsaWRhdGVkIGJlZm9yZSB3ZSBnb3QgdG8gdGhpcyBwb2ludCBhbmQgdmFsaWRhdGluZ1xuICAgIC8vIGJyZWFrcyBjb21waWxpbmcgZGVzdGluYXRpb25zIHdpdGggbmFtZWQgcGF0dGVybiBwYXJhbXMgZnJvbSB0aGUgc291cmNlXG4gICAgLy8gZS5nLiAvc29tZXRoaW5nOmhlbGxvKC4qKSAtPiAvYW5vdGhlci86aGVsbG8gaXMgYnJva2VuIHdpdGggdmFsaWRhdGlvblxuICAgIC8vIHNpbmNlIGNvbXBpbGUgdmFsaWRhdGlvbiBpcyBtZWFudCBmb3IgcmV2ZXJzaW5nIGFuZCBub3QgZm9yIGluc2VydGluZ1xuICAgIC8vIHBhcmFtcyBmcm9tIGEgc2VwYXJhdGUgcGF0aC1yZWdleCBpbnRvIGFub3RoZXJcbiAgICB7IHZhbGlkYXRlOiBmYWxzZSB9XG4gIClcbiAgbGV0IG5ld1VybFxuXG4gIC8vIHVwZGF0ZSBhbnkgcGFyYW1zIGluIHF1ZXJ5IHZhbHVlc1xuICBmb3IgKGNvbnN0IFtrZXksIHN0ck9yQXJyYXldIG9mIE9iamVjdC5lbnRyaWVzKGRlc3RRdWVyeSkpIHtcbiAgICBsZXQgdmFsdWUgPSBBcnJheS5pc0FycmF5KHN0ck9yQXJyYXkpID8gc3RyT3JBcnJheVswXSA6IHN0ck9yQXJyYXlcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIC8vIHRoZSB2YWx1ZSBuZWVkcyB0byBzdGFydCB3aXRoIGEgZm9yd2FyZC1zbGFzaCB0byBiZSBjb21waWxlZFxuICAgICAgLy8gY29ycmVjdGx5XG4gICAgICB2YWx1ZSA9IGAvJHt2YWx1ZX1gXG4gICAgICBjb25zdCBxdWVyeUNvbXBpbGVyID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUodmFsdWUsIHsgdmFsaWRhdGU6IGZhbHNlIH0pXG4gICAgICB2YWx1ZSA9IHF1ZXJ5Q29tcGlsZXIocGFyYW1zKS5zdWJzdHIoMSlcbiAgICB9XG4gICAgZGVzdFF1ZXJ5W2tleV0gPSB2YWx1ZVxuICB9XG5cbiAgLy8gYWRkIHBhdGggcGFyYW1zIHRvIHF1ZXJ5IGlmIGl0J3Mgbm90IGEgcmVkaXJlY3QgYW5kIG5vdFxuICAvLyBhbHJlYWR5IGRlZmluZWQgaW4gZGVzdGluYXRpb24gcXVlcnkgb3IgcGF0aFxuICBjb25zdCBwYXJhbUtleXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpXG5cbiAgaWYgKFxuICAgIGFwcGVuZFBhcmFtc1RvUXVlcnkgJiZcbiAgICAhcGFyYW1LZXlzLnNvbWUoKGtleSkgPT4gZGVzdFBhdGhQYXJhbXMuaW5jbHVkZXMoa2V5KSlcbiAgKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgcGFyYW1LZXlzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gZGVzdFF1ZXJ5KSkge1xuICAgICAgICBkZXN0UXVlcnlba2V5XSA9IHBhcmFtc1trZXldXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc2hvdWxkQWRkQmFzZVBhdGggPSBkZXN0aW5hdGlvbi5zdGFydHNXaXRoKCcvJykgJiYgYmFzZVBhdGhcblxuICB0cnkge1xuICAgIG5ld1VybCA9IGAke3Nob3VsZEFkZEJhc2VQYXRoID8gYmFzZVBhdGggOiAnJ30ke2Rlc3RpbmF0aW9uQ29tcGlsZXIoXG4gICAgICBwYXJhbXNcbiAgICApfWBcblxuICAgIGNvbnN0IFtwYXRobmFtZSwgaGFzaF0gPSBuZXdVcmwuc3BsaXQoJyMnKVxuICAgIHBhcnNlZERlc3RpbmF0aW9uLnBhdGhuYW1lID0gcGF0aG5hbWVcbiAgICBwYXJzZWREZXN0aW5hdGlvbi5oYXNoID0gYCR7aGFzaCA/ICcjJyA6ICcnfSR7aGFzaCB8fCAnJ31gXG4gICAgZGVsZXRlIHBhcnNlZERlc3RpbmF0aW9uLnNlYXJjaFxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyLm1lc3NhZ2UubWF0Y2goL0V4cGVjdGVkIC4qPyB0byBub3QgcmVwZWF0LCBidXQgZ290IGFuIGFycmF5LykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRvIHVzZSBhIG11bHRpLW1hdGNoIGluIHRoZSBkZXN0aW5hdGlvbiB5b3UgbXVzdCBhZGQgXFxgKlxcYCBhdCB0aGUgZW5kIG9mIHRoZSBwYXJhbSBuYW1lIHRvIHNpZ25pZnkgaXQgc2hvdWxkIHJlcGVhdC4gaHR0cHM6Ly9lcnIuc2gvdmVyY2VsL25leHQuanMvaW52YWxpZC1tdWx0aS1tYXRjaGBcbiAgICAgIClcbiAgICB9XG4gICAgdGhyb3cgZXJyXG4gIH1cblxuICAvLyBRdWVyeSBtZXJnZSBvcmRlciBsb3dlc3QgcHJpb3JpdHkgdG8gaGlnaGVzdFxuICAvLyAxLiBpbml0aWFsIFVSTCBxdWVyeSB2YWx1ZXNcbiAgLy8gMi4gcGF0aCBzZWdtZW50IHZhbHVlc1xuICAvLyAzLiBkZXN0aW5hdGlvbiBzcGVjaWZpZWQgcXVlcnkgdmFsdWVzXG4gIHBhcnNlZERlc3RpbmF0aW9uLnF1ZXJ5ID0ge1xuICAgIC4uLnF1ZXJ5LFxuICAgIC4uLnBhcnNlZERlc3RpbmF0aW9uLnF1ZXJ5LFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuZXdVcmwsXG4gICAgcGFyc2VkRGVzdGluYXRpb24sXG4gIH1cbn1cbiIsImltcG9ydCB7IFBhcnNlZFVybFF1ZXJ5IH0gZnJvbSAncXVlcnlzdHJpbmcnXG5cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5KFxuICBzZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc1xuKTogUGFyc2VkVXJsUXVlcnkge1xuICBjb25zdCBxdWVyeTogUGFyc2VkVXJsUXVlcnkgPSB7fVxuICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgIGlmICh0eXBlb2YgcXVlcnlba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHF1ZXJ5W2tleV0gPSB2YWx1ZVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgOyhxdWVyeVtrZXldIGFzIHN0cmluZ1tdKS5wdXNoKHZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBxdWVyeVtrZXldID0gW3F1ZXJ5W2tleV0gYXMgc3RyaW5nLCB2YWx1ZV1cbiAgICB9XG4gIH0pXG4gIHJldHVybiBxdWVyeVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlVcmxRdWVyeVBhcmFtKHBhcmFtOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoXG4gICAgdHlwZW9mIHBhcmFtID09PSAnc3RyaW5nJyB8fFxuICAgICh0eXBlb2YgcGFyYW0gPT09ICdudW1iZXInICYmICFpc05hTihwYXJhbSkpIHx8XG4gICAgdHlwZW9mIHBhcmFtID09PSAnYm9vbGVhbidcbiAgKSB7XG4gICAgcmV0dXJuIFN0cmluZyhwYXJhbSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJydcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXJsUXVlcnlUb1NlYXJjaFBhcmFtcyhcbiAgdXJsUXVlcnk6IFBhcnNlZFVybFF1ZXJ5XG4pOiBVUkxTZWFyY2hQYXJhbXMge1xuICBjb25zdCByZXN1bHQgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKClcbiAgT2JqZWN0LmVudHJpZXModXJsUXVlcnkpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4gcmVzdWx0LmFwcGVuZChrZXksIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0oaXRlbSkpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgc3RyaW5naWZ5VXJsUXVlcnlQYXJhbSh2YWx1ZSkpXG4gICAgfVxuICB9KVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24oXG4gIHRhcmdldDogVVJMU2VhcmNoUGFyYW1zLFxuICAuLi5zZWFyY2hQYXJhbXNMaXN0OiBVUkxTZWFyY2hQYXJhbXNbXVxuKTogVVJMU2VhcmNoUGFyYW1zIHtcbiAgc2VhcmNoUGFyYW1zTGlzdC5mb3JFYWNoKChzZWFyY2hQYXJhbXMpID0+IHtcbiAgICBBcnJheS5mcm9tKHNlYXJjaFBhcmFtcy5rZXlzKCkpLmZvckVhY2goKGtleSkgPT4gdGFyZ2V0LmRlbGV0ZShrZXkpKVxuICAgIHNlYXJjaFBhcmFtcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB0YXJnZXQuYXBwZW5kKGtleSwgdmFsdWUpKVxuICB9KVxuICByZXR1cm4gdGFyZ2V0XG59XG4iLCJpbXBvcnQgeyBQYXJzZWRVcmxRdWVyeSB9IGZyb20gJ3F1ZXJ5c3RyaW5nJ1xuaW1wb3J0IHBhdGhNYXRjaCBmcm9tICcuL3BhdGgtbWF0Y2gnXG5pbXBvcnQgcHJlcGFyZURlc3RpbmF0aW9uIGZyb20gJy4vcHJlcGFyZS1kZXN0aW5hdGlvbidcbmltcG9ydCB7IFJld3JpdGUgfSBmcm9tICcuLi8uLi8uLi8uLi9saWIvbG9hZC1jdXN0b20tcm91dGVzJ1xuaW1wb3J0IHsgcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2ggfSBmcm9tICcuLi8uLi8uLi8uLi9jbGllbnQvbm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoJ1xuXG5jb25zdCBjdXN0b21Sb3V0ZU1hdGNoZXIgPSBwYXRoTWF0Y2godHJ1ZSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVJld3JpdGVzKFxuICBhc1BhdGg6IHN0cmluZyxcbiAgcGFnZXM6IHN0cmluZ1tdLFxuICBiYXNlUGF0aDogc3RyaW5nLFxuICByZXdyaXRlczogUmV3cml0ZVtdLFxuICBxdWVyeTogUGFyc2VkVXJsUXVlcnksXG4gIHJlc29sdmVIcmVmOiAocGF0aDogc3RyaW5nKSA9PiBzdHJpbmdcbikge1xuICBpZiAoIXBhZ2VzLmluY2x1ZGVzKGFzUGF0aCkpIHtcbiAgICBmb3IgKGNvbnN0IHJld3JpdGUgb2YgcmV3cml0ZXMpIHtcbiAgICAgIGNvbnN0IG1hdGNoZXIgPSBjdXN0b21Sb3V0ZU1hdGNoZXIocmV3cml0ZS5zb3VyY2UpXG4gICAgICBjb25zdCBwYXJhbXMgPSBtYXRjaGVyKGFzUGF0aClcblxuICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICBpZiAoIXJld3JpdGUuZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIGEgcHJveGllZCByZXdyaXRlIHdoaWNoIGlzbid0IGhhbmRsZWQgb24gdGhlIGNsaWVudFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVzdFJlcyA9IHByZXBhcmVEZXN0aW5hdGlvbihcbiAgICAgICAgICByZXdyaXRlLmRlc3RpbmF0aW9uLFxuICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIHJld3JpdGUuYmFzZVBhdGggPT09IGZhbHNlID8gJycgOiBiYXNlUGF0aFxuICAgICAgICApXG4gICAgICAgIGFzUGF0aCA9IGRlc3RSZXMucGFyc2VkRGVzdGluYXRpb24ucGF0aG5hbWUhXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocXVlcnksIGRlc3RSZXMucGFyc2VkRGVzdGluYXRpb24ucXVlcnkpXG5cbiAgICAgICAgaWYgKHBhZ2VzLmluY2x1ZGVzKHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKGFzUGF0aCkpKSB7XG4gICAgICAgICAgLy8gY2hlY2sgaWYgd2Ugbm93IG1hdGNoIGEgcGFnZSBhcyB0aGlzIG1lYW5zIHdlIGFyZSBkb25lXG4gICAgICAgICAgLy8gcmVzb2x2aW5nIHRoZSByZXdyaXRlc1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBpZiB3ZSBtYXRjaCBhIGR5bmFtaWMtcm91dGUsIGlmIHNvIHdlIGJyZWFrIHRoZSByZXdyaXRlcyBjaGFpblxuICAgICAgICBjb25zdCByZXNvbHZlZEhyZWYgPSByZXNvbHZlSHJlZihhc1BhdGgpXG5cbiAgICAgICAgaWYgKHJlc29sdmVkSHJlZiAhPT0gYXNQYXRoICYmIHBhZ2VzLmluY2x1ZGVzKHJlc29sdmVkSHJlZikpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhc1BhdGhcbn1cbiIsImltcG9ydCB7IGdldFJvdXRlUmVnZXggfSBmcm9tICcuL3JvdXRlLXJlZ2V4J1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um91dGVNYXRjaGVyKHJvdXRlUmVnZXg6IFJldHVyblR5cGU8dHlwZW9mIGdldFJvdXRlUmVnZXg+KSB7XG4gIGNvbnN0IHsgcmUsIGdyb3VwcyB9ID0gcm91dGVSZWdleFxuICByZXR1cm4gKHBhdGhuYW1lOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgY29uc3Qgcm91dGVNYXRjaCA9IHJlLmV4ZWMocGF0aG5hbWUhKVxuICAgIGlmICghcm91dGVNYXRjaCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgY29uc3QgZGVjb2RlID0gKHBhcmFtOiBzdHJpbmcpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGFyYW0pXG4gICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIGNvbnN0IGVycjogRXJyb3IgJiB7IGNvZGU/OiBzdHJpbmcgfSA9IG5ldyBFcnJvcihcbiAgICAgICAgICAnZmFpbGVkIHRvIGRlY29kZSBwYXJhbSdcbiAgICAgICAgKVxuICAgICAgICBlcnIuY29kZSA9ICdERUNPREVfRkFJTEVEJ1xuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcGFyYW1zOiB7IFtwYXJhbU5hbWU6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdIH0gPSB7fVxuXG4gICAgT2JqZWN0LmtleXMoZ3JvdXBzKS5mb3JFYWNoKChzbHVnTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBnID0gZ3JvdXBzW3NsdWdOYW1lXVxuICAgICAgY29uc3QgbSA9IHJvdXRlTWF0Y2hbZy5wb3NdXG4gICAgICBpZiAobSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmFtc1tzbHVnTmFtZV0gPSB+bS5pbmRleE9mKCcvJylcbiAgICAgICAgICA/IG0uc3BsaXQoJy8nKS5tYXAoKGVudHJ5KSA9PiBkZWNvZGUoZW50cnkpKVxuICAgICAgICAgIDogZy5yZXBlYXRcbiAgICAgICAgICA/IFtkZWNvZGUobSldXG4gICAgICAgICAgOiBkZWNvZGUobSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBwYXJhbXNcbiAgfVxufVxuIiwiaW50ZXJmYWNlIEdyb3VwIHtcbiAgcG9zOiBudW1iZXJcbiAgcmVwZWF0OiBib29sZWFuXG4gIG9wdGlvbmFsOiBib29sZWFuXG59XG5cbi8vIHRoaXMgaXNuJ3QgaW1wb3J0aW5nIHRoZSBlc2NhcGUtc3RyaW5nLXJlZ2V4IG1vZHVsZVxuLy8gdG8gcmVkdWNlIGJ5dGVzXG5mdW5jdGlvbiBlc2NhcGVSZWdleChzdHI6IHN0cmluZykge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uLV0vZywgJ1xcXFwkJicpXG59XG5cbmZ1bmN0aW9uIHBhcnNlUGFyYW1ldGVyKHBhcmFtOiBzdHJpbmcpIHtcbiAgY29uc3Qgb3B0aW9uYWwgPSBwYXJhbS5zdGFydHNXaXRoKCdbJykgJiYgcGFyYW0uZW5kc1dpdGgoJ10nKVxuICBpZiAob3B0aW9uYWwpIHtcbiAgICBwYXJhbSA9IHBhcmFtLnNsaWNlKDEsIC0xKVxuICB9XG4gIGNvbnN0IHJlcGVhdCA9IHBhcmFtLnN0YXJ0c1dpdGgoJy4uLicpXG4gIGlmIChyZXBlYXQpIHtcbiAgICBwYXJhbSA9IHBhcmFtLnNsaWNlKDMpXG4gIH1cbiAgcmV0dXJuIHsga2V5OiBwYXJhbSwgcmVwZWF0LCBvcHRpb25hbCB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSb3V0ZVJlZ2V4KFxuICBub3JtYWxpemVkUm91dGU6IHN0cmluZ1xuKToge1xuICByZTogUmVnRXhwXG4gIG5hbWVkUmVnZXg/OiBzdHJpbmdcbiAgcm91dGVLZXlzPzogeyBbbmFtZWQ6IHN0cmluZ106IHN0cmluZyB9XG4gIGdyb3VwczogeyBbZ3JvdXBOYW1lOiBzdHJpbmddOiBHcm91cCB9XG59IHtcbiAgY29uc3Qgc2VnbWVudHMgPSAobm9ybWFsaXplZFJvdXRlLnJlcGxhY2UoL1xcLyQvLCAnJykgfHwgJy8nKVxuICAgIC5zbGljZSgxKVxuICAgIC5zcGxpdCgnLycpXG5cbiAgY29uc3QgZ3JvdXBzOiB7IFtncm91cE5hbWU6IHN0cmluZ106IEdyb3VwIH0gPSB7fVxuICBsZXQgZ3JvdXBJbmRleCA9IDFcbiAgY29uc3QgcGFyYW1ldGVyaXplZFJvdXRlID0gc2VnbWVudHNcbiAgICAubWFwKChzZWdtZW50KSA9PiB7XG4gICAgICBpZiAoc2VnbWVudC5zdGFydHNXaXRoKCdbJykgJiYgc2VnbWVudC5lbmRzV2l0aCgnXScpKSB7XG4gICAgICAgIGNvbnN0IHsga2V5LCBvcHRpb25hbCwgcmVwZWF0IH0gPSBwYXJzZVBhcmFtZXRlcihzZWdtZW50LnNsaWNlKDEsIC0xKSlcbiAgICAgICAgZ3JvdXBzW2tleV0gPSB7IHBvczogZ3JvdXBJbmRleCsrLCByZXBlYXQsIG9wdGlvbmFsIH1cbiAgICAgICAgcmV0dXJuIHJlcGVhdCA/IChvcHRpb25hbCA/ICcoPzovKC4rPykpPycgOiAnLyguKz8pJykgOiAnLyhbXi9dKz8pJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAvJHtlc2NhcGVSZWdleChzZWdtZW50KX1gXG4gICAgICB9XG4gICAgfSlcbiAgICAuam9pbignJylcblxuICAvLyBkZWFkIGNvZGUgZWxpbWluYXRlIGZvciBicm93c2VyIHNpbmNlIGl0J3Mgb25seSBuZWVkZWRcbiAgLy8gd2hpbGUgZ2VuZXJhdGluZyByb3V0ZXMtbWFuaWZlc3RcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgbGV0IHJvdXRlS2V5Q2hhckNvZGUgPSA5N1xuICAgIGxldCByb3V0ZUtleUNoYXJMZW5ndGggPSAxXG5cbiAgICAvLyBidWlsZHMgYSBtaW5pbWFsIHJvdXRlS2V5IHVzaW5nIG9ubHkgYS16IGFuZCBtaW5pbWFsIG51bWJlciBvZiBjaGFyYWN0ZXJzXG4gICAgY29uc3QgZ2V0U2FmZVJvdXRlS2V5ID0gKCkgPT4ge1xuICAgICAgbGV0IHJvdXRlS2V5ID0gJydcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZUtleUNoYXJMZW5ndGg7IGkrKykge1xuICAgICAgICByb3V0ZUtleSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJvdXRlS2V5Q2hhckNvZGUpXG4gICAgICAgIHJvdXRlS2V5Q2hhckNvZGUrK1xuXG4gICAgICAgIGlmIChyb3V0ZUtleUNoYXJDb2RlID4gMTIyKSB7XG4gICAgICAgICAgcm91dGVLZXlDaGFyTGVuZ3RoKytcbiAgICAgICAgICByb3V0ZUtleUNoYXJDb2RlID0gOTdcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJvdXRlS2V5XG4gICAgfVxuXG4gICAgY29uc3Qgcm91dGVLZXlzOiB7IFtuYW1lZDogc3RyaW5nXTogc3RyaW5nIH0gPSB7fVxuXG4gICAgbGV0IG5hbWVkUGFyYW1ldGVyaXplZFJvdXRlID0gc2VnbWVudHNcbiAgICAgIC5tYXAoKHNlZ21lbnQpID0+IHtcbiAgICAgICAgaWYgKHNlZ21lbnQuc3RhcnRzV2l0aCgnWycpICYmIHNlZ21lbnQuZW5kc1dpdGgoJ10nKSkge1xuICAgICAgICAgIGNvbnN0IHsga2V5LCBvcHRpb25hbCwgcmVwZWF0IH0gPSBwYXJzZVBhcmFtZXRlcihzZWdtZW50LnNsaWNlKDEsIC0xKSlcbiAgICAgICAgICAvLyByZXBsYWNlIGFueSBub24td29yZCBjaGFyYWN0ZXJzIHNpbmNlIHRoZXkgY2FuIGJyZWFrXG4gICAgICAgICAgLy8gdGhlIG5hbWVkIHJlZ2V4XG4gICAgICAgICAgbGV0IGNsZWFuZWRLZXkgPSBrZXkucmVwbGFjZSgvXFxXL2csICcnKVxuICAgICAgICAgIGxldCBpbnZhbGlkS2V5ID0gZmFsc2VcblxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBrZXkgaXMgc3RpbGwgaW52YWxpZCBhbmQgZmFsbGJhY2sgdG8gdXNpbmcgYSBrbm93blxuICAgICAgICAgIC8vIHNhZmUga2V5XG4gICAgICAgICAgaWYgKGNsZWFuZWRLZXkubGVuZ3RoID09PSAwIHx8IGNsZWFuZWRLZXkubGVuZ3RoID4gMzApIHtcbiAgICAgICAgICAgIGludmFsaWRLZXkgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VJbnQoY2xlYW5lZEtleS5zdWJzdHIoMCwgMSkpKSkge1xuICAgICAgICAgICAgaW52YWxpZEtleSA9IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaW52YWxpZEtleSkge1xuICAgICAgICAgICAgY2xlYW5lZEtleSA9IGdldFNhZmVSb3V0ZUtleSgpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcm91dGVLZXlzW2NsZWFuZWRLZXldID0ga2V5XG4gICAgICAgICAgcmV0dXJuIHJlcGVhdFxuICAgICAgICAgICAgPyBvcHRpb25hbFxuICAgICAgICAgICAgICA/IGAoPzovKD88JHtjbGVhbmVkS2V5fT4uKz8pKT9gXG4gICAgICAgICAgICAgIDogYC8oPzwke2NsZWFuZWRLZXl9Pi4rPylgXG4gICAgICAgICAgICA6IGAvKD88JHtjbGVhbmVkS2V5fT5bXi9dKz8pYFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBgLyR7ZXNjYXBlUmVnZXgoc2VnbWVudCl9YFxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmpvaW4oJycpXG5cbiAgICByZXR1cm4ge1xuICAgICAgcmU6IG5ldyBSZWdFeHAoYF4ke3BhcmFtZXRlcml6ZWRSb3V0ZX0oPzovKT8kYCksXG4gICAgICBncm91cHMsXG4gICAgICByb3V0ZUtleXMsXG4gICAgICBuYW1lZFJlZ2V4OiBgXiR7bmFtZWRQYXJhbWV0ZXJpemVkUm91dGV9KD86Lyk/JGAsXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZTogbmV3IFJlZ0V4cChgXiR7cGFyYW1ldGVyaXplZFJvdXRlfSg/Oi8pPyRgKSxcbiAgICBncm91cHMsXG4gIH1cbn1cbiIsImltcG9ydCB7IEluY29taW5nTWVzc2FnZSwgU2VydmVyUmVzcG9uc2UgfSBmcm9tICdodHRwJ1xuaW1wb3J0IHsgUGFyc2VkVXJsUXVlcnkgfSBmcm9tICdxdWVyeXN0cmluZydcbmltcG9ydCB7IENvbXBvbmVudFR5cGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFVybE9iamVjdCB9IGZyb20gJ3VybCdcbmltcG9ydCB7IGZvcm1hdFVybCB9IGZyb20gJy4vcm91dGVyL3V0aWxzL2Zvcm1hdC11cmwnXG5pbXBvcnQgeyBNYW5pZmVzdEl0ZW0gfSBmcm9tICcuLi9zZXJ2ZXIvbG9hZC1jb21wb25lbnRzJ1xuaW1wb3J0IHsgTmV4dFJvdXRlciB9IGZyb20gJy4vcm91dGVyL3JvdXRlcidcbmltcG9ydCB7IEVudiB9IGZyb20gJ0BuZXh0L2VudidcbmltcG9ydCB7IEJ1aWxkTWFuaWZlc3QgfSBmcm9tICcuLi9zZXJ2ZXIvZ2V0LXBhZ2UtZmlsZXMnXG5cbi8qKlxuICogVHlwZXMgdXNlZCBieSBib3RoIG5leHQgYW5kIG5leHQtc2VydmVyXG4gKi9cblxuZXhwb3J0IHR5cGUgTmV4dENvbXBvbmVudFR5cGU8XG4gIEMgZXh0ZW5kcyBCYXNlQ29udGV4dCA9IE5leHRQYWdlQ29udGV4dCxcbiAgSVAgPSB7fSxcbiAgUCA9IHt9XG4+ID0gQ29tcG9uZW50VHlwZTxQPiAmIHtcbiAgLyoqXG4gICAqIFVzZWQgZm9yIGluaXRpYWwgcGFnZSBsb2FkIGRhdGEgcG9wdWxhdGlvbi4gRGF0YSByZXR1cm5lZCBmcm9tIGBnZXRJbml0aWFsUHJvcHNgIGlzIHNlcmlhbGl6ZWQgd2hlbiBzZXJ2ZXIgcmVuZGVyZWQuXG4gICAqIE1ha2Ugc3VyZSB0byByZXR1cm4gcGxhaW4gYE9iamVjdGAgd2l0aG91dCB1c2luZyBgRGF0ZWAsIGBNYXBgLCBgU2V0YC5cbiAgICogQHBhcmFtIGN0eCBDb250ZXh0IG9mIGBwYWdlYFxuICAgKi9cbiAgZ2V0SW5pdGlhbFByb3BzPyhjb250ZXh0OiBDKTogSVAgfCBQcm9taXNlPElQPlxufVxuXG5leHBvcnQgdHlwZSBEb2N1bWVudFR5cGUgPSBOZXh0Q29tcG9uZW50VHlwZTxcbiAgRG9jdW1lbnRDb250ZXh0LFxuICBEb2N1bWVudEluaXRpYWxQcm9wcyxcbiAgRG9jdW1lbnRQcm9wc1xuPiAmIHtcbiAgcmVuZGVyRG9jdW1lbnQoXG4gICAgRG9jdW1lbnQ6IERvY3VtZW50VHlwZSxcbiAgICBwcm9wczogRG9jdW1lbnRQcm9wc1xuICApOiBSZWFjdC5SZWFjdEVsZW1lbnRcbn1cblxuZXhwb3J0IHR5cGUgQXBwVHlwZSA9IE5leHRDb21wb25lbnRUeXBlPFxuICBBcHBDb250ZXh0VHlwZSxcbiAgQXBwSW5pdGlhbFByb3BzLFxuICBBcHBQcm9wc1R5cGVcbj5cblxuZXhwb3J0IHR5cGUgQXBwVHJlZVR5cGUgPSBDb21wb25lbnRUeXBlPFxuICBBcHBJbml0aWFsUHJvcHMgJiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfVxuPlxuXG4vKipcbiAqIFdlYiB2aXRhbHMgcHJvdmlkZWQgdG8gX2FwcC5yZXBvcnRXZWJWaXRhbHMgYnkgQ29yZSBXZWIgVml0YWxzIHBsdWdpbiBkZXZlbG9wZWQgYnkgR29vZ2xlIENocm9tZSB0ZWFtLlxuICogaHR0cHM6Ly9uZXh0anMub3JnL2Jsb2cvbmV4dC05LTQjaW50ZWdyYXRlZC13ZWItdml0YWxzLXJlcG9ydGluZ1xuICovXG5leHBvcnQgdHlwZSBOZXh0V2ViVml0YWxzTWV0cmljID0ge1xuICBpZDogc3RyaW5nXG4gIGxhYmVsOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIHN0YXJ0VGltZTogbnVtYmVyXG4gIHZhbHVlOiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgRW5oYW5jZXI8Qz4gPSAoQ29tcG9uZW50OiBDKSA9PiBDXG5cbmV4cG9ydCB0eXBlIENvbXBvbmVudHNFbmhhbmNlciA9XG4gIHwge1xuICAgICAgZW5oYW5jZUFwcD86IEVuaGFuY2VyPEFwcFR5cGU+XG4gICAgICBlbmhhbmNlQ29tcG9uZW50PzogRW5oYW5jZXI8TmV4dENvbXBvbmVudFR5cGU+XG4gICAgfVxuICB8IEVuaGFuY2VyPE5leHRDb21wb25lbnRUeXBlPlxuXG5leHBvcnQgdHlwZSBSZW5kZXJQYWdlUmVzdWx0ID0ge1xuICBodG1sOiBzdHJpbmdcbiAgaGVhZD86IEFycmF5PEpTWC5FbGVtZW50IHwgbnVsbD5cbn1cblxuZXhwb3J0IHR5cGUgUmVuZGVyUGFnZSA9IChcbiAgb3B0aW9ucz86IENvbXBvbmVudHNFbmhhbmNlclxuKSA9PiBSZW5kZXJQYWdlUmVzdWx0IHwgUHJvbWlzZTxSZW5kZXJQYWdlUmVzdWx0PlxuXG5leHBvcnQgdHlwZSBCYXNlQ29udGV4dCA9IHtcbiAgcmVzPzogU2VydmVyUmVzcG9uc2VcbiAgW2s6IHN0cmluZ106IGFueVxufVxuXG5leHBvcnQgdHlwZSBIZWFkRW50cnkgPSBbc3RyaW5nLCB7IFtrZXk6IHN0cmluZ106IGFueSB9XVxuXG5leHBvcnQgdHlwZSBORVhUX0RBVEEgPSB7XG4gIHByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIHBhZ2U6IHN0cmluZ1xuICBxdWVyeTogUGFyc2VkVXJsUXVlcnlcbiAgYnVpbGRJZDogc3RyaW5nXG4gIGFzc2V0UHJlZml4Pzogc3RyaW5nXG4gIHJ1bnRpbWVDb25maWc/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9XG4gIG5leHRFeHBvcnQ/OiBib29sZWFuXG4gIGF1dG9FeHBvcnQ/OiBib29sZWFuXG4gIGlzRmFsbGJhY2s/OiBib29sZWFuXG4gIGR5bmFtaWNJZHM/OiBzdHJpbmdbXVxuICBlcnI/OiBFcnJvciAmIHsgc3RhdHVzQ29kZT86IG51bWJlciB9XG4gIGdzcD86IGJvb2xlYW5cbiAgZ3NzcD86IGJvb2xlYW5cbiAgY3VzdG9tU2VydmVyPzogYm9vbGVhblxuICBnaXA/OiBib29sZWFuXG4gIGFwcEdpcD86IGJvb2xlYW5cbiAgaGVhZDogSGVhZEVudHJ5W11cbiAgbG9jYWxlPzogc3RyaW5nXG4gIGxvY2FsZXM/OiBzdHJpbmdbXVxuICBkZWZhdWx0TG9jYWxlPzogc3RyaW5nXG59XG5cbi8qKlxuICogYE5leHRgIGNvbnRleHRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOZXh0UGFnZUNvbnRleHQge1xuICAvKipcbiAgICogRXJyb3Igb2JqZWN0IGlmIGVuY291bnRlcmVkIGR1cmluZyByZW5kZXJpbmdcbiAgICovXG4gIGVycj86IChFcnJvciAmIHsgc3RhdHVzQ29kZT86IG51bWJlciB9KSB8IG51bGxcbiAgLyoqXG4gICAqIGBIVFRQYCByZXF1ZXN0IG9iamVjdC5cbiAgICovXG4gIHJlcT86IEluY29taW5nTWVzc2FnZVxuICAvKipcbiAgICogYEhUVFBgIHJlc3BvbnNlIG9iamVjdC5cbiAgICovXG4gIHJlcz86IFNlcnZlclJlc3BvbnNlXG4gIC8qKlxuICAgKiBQYXRoIHNlY3Rpb24gb2YgYFVSTGAuXG4gICAqL1xuICBwYXRobmFtZTogc3RyaW5nXG4gIC8qKlxuICAgKiBRdWVyeSBzdHJpbmcgc2VjdGlvbiBvZiBgVVJMYCBwYXJzZWQgYXMgYW4gb2JqZWN0LlxuICAgKi9cbiAgcXVlcnk6IFBhcnNlZFVybFF1ZXJ5XG4gIC8qKlxuICAgKiBgU3RyaW5nYCBvZiB0aGUgYWN0dWFsIHBhdGggaW5jbHVkaW5nIHF1ZXJ5LlxuICAgKi9cbiAgYXNQYXRoPzogc3RyaW5nXG4gIC8qKlxuICAgKiBgQ29tcG9uZW50YCB0aGUgdHJlZSBvZiB0aGUgQXBwIHRvIHVzZSBpZiBuZWVkaW5nIHRvIHJlbmRlciBzZXBhcmF0ZWx5XG4gICAqL1xuICBBcHBUcmVlOiBBcHBUcmVlVHlwZVxufVxuXG5leHBvcnQgdHlwZSBBcHBDb250ZXh0VHlwZTxSIGV4dGVuZHMgTmV4dFJvdXRlciA9IE5leHRSb3V0ZXI+ID0ge1xuICBDb21wb25lbnQ6IE5leHRDb21wb25lbnRUeXBlPE5leHRQYWdlQ29udGV4dD5cbiAgQXBwVHJlZTogQXBwVHJlZVR5cGVcbiAgY3R4OiBOZXh0UGFnZUNvbnRleHRcbiAgcm91dGVyOiBSXG59XG5cbmV4cG9ydCB0eXBlIEFwcEluaXRpYWxQcm9wcyA9IHtcbiAgcGFnZVByb3BzOiBhbnlcbn1cblxuZXhwb3J0IHR5cGUgQXBwUHJvcHNUeXBlPFxuICBSIGV4dGVuZHMgTmV4dFJvdXRlciA9IE5leHRSb3V0ZXIsXG4gIFAgPSB7fVxuPiA9IEFwcEluaXRpYWxQcm9wcyAmIHtcbiAgQ29tcG9uZW50OiBOZXh0Q29tcG9uZW50VHlwZTxOZXh0UGFnZUNvbnRleHQsIGFueSwgUD5cbiAgcm91dGVyOiBSXG4gIF9fTl9TU0c/OiBib29sZWFuXG4gIF9fTl9TU1A/OiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIERvY3VtZW50Q29udGV4dCA9IE5leHRQYWdlQ29udGV4dCAmIHtcbiAgcmVuZGVyUGFnZTogUmVuZGVyUGFnZVxufVxuXG5leHBvcnQgdHlwZSBEb2N1bWVudEluaXRpYWxQcm9wcyA9IFJlbmRlclBhZ2VSZXN1bHQgJiB7XG4gIHN0eWxlcz86IFJlYWN0LlJlYWN0RWxlbWVudFtdIHwgUmVhY3QuUmVhY3RGcmFnbWVudFxufVxuXG5leHBvcnQgdHlwZSBEb2N1bWVudFByb3BzID0gRG9jdW1lbnRJbml0aWFsUHJvcHMgJiB7XG4gIF9fTkVYVF9EQVRBX186IE5FWFRfREFUQVxuICBkYW5nZXJvdXNBc1BhdGg6IHN0cmluZ1xuICBkb2NDb21wb25lbnRzUmVuZGVyZWQ6IHtcbiAgICBIdG1sPzogYm9vbGVhblxuICAgIE1haW4/OiBib29sZWFuXG4gICAgSGVhZD86IGJvb2xlYW5cbiAgICBOZXh0U2NyaXB0PzogYm9vbGVhblxuICB9XG4gIGJ1aWxkTWFuaWZlc3Q6IEJ1aWxkTWFuaWZlc3RcbiAgYW1wUGF0aDogc3RyaW5nXG4gIGluQW1wTW9kZTogYm9vbGVhblxuICBoeWJyaWRBbXA6IGJvb2xlYW5cbiAgaXNEZXZlbG9wbWVudDogYm9vbGVhblxuICBkeW5hbWljSW1wb3J0czogTWFuaWZlc3RJdGVtW11cbiAgYXNzZXRQcmVmaXg/OiBzdHJpbmdcbiAgY2Fub25pY2FsQmFzZTogc3RyaW5nXG4gIGhlYWRUYWdzOiBhbnlbXVxuICB1bnN0YWJsZV9ydW50aW1lSlM/OiBmYWxzZVxuICBkZXZPbmx5Q2FjaGVCdXN0ZXJRdWVyeVN0cmluZzogc3RyaW5nXG4gIGxvY2FsZT86IHN0cmluZ1xufVxuXG4vKipcbiAqIE5leHQgYEFQSWAgcm91dGUgcmVxdWVzdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5leHRBcGlSZXF1ZXN0IGV4dGVuZHMgSW5jb21pbmdNZXNzYWdlIHtcbiAgLyoqXG4gICAqIE9iamVjdCBvZiBgcXVlcnlgIHZhbHVlcyBmcm9tIHVybFxuICAgKi9cbiAgcXVlcnk6IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXVxuICB9XG4gIC8qKlxuICAgKiBPYmplY3Qgb2YgYGNvb2tpZXNgIGZyb20gaGVhZGVyXG4gICAqL1xuICBjb29raWVzOiB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nXG4gIH1cblxuICBib2R5OiBhbnlcblxuICBlbnY6IEVudlxuXG4gIHByZXZpZXc/OiBib29sZWFuXG4gIC8qKlxuICAgKiBQcmV2aWV3IGRhdGEgc2V0IG9uIHRoZSByZXF1ZXN0LCBpZiBhbnlcbiAgICogKi9cbiAgcHJldmlld0RhdGE/OiBhbnlcbn1cblxuLyoqXG4gKiBTZW5kIGJvZHkgb2YgcmVzcG9uc2VcbiAqL1xudHlwZSBTZW5kPFQ+ID0gKGJvZHk6IFQpID0+IHZvaWRcblxuLyoqXG4gKiBOZXh0IGBBUElgIHJvdXRlIHJlc3BvbnNlXG4gKi9cbmV4cG9ydCB0eXBlIE5leHRBcGlSZXNwb25zZTxUID0gYW55PiA9IFNlcnZlclJlc3BvbnNlICYge1xuICAvKipcbiAgICogU2VuZCBkYXRhIGBhbnlgIGRhdGEgaW4gcmVzcG9uc2VcbiAgICovXG4gIHNlbmQ6IFNlbmQ8VD5cbiAgLyoqXG4gICAqIFNlbmQgZGF0YSBganNvbmAgZGF0YSBpbiByZXNwb25zZVxuICAgKi9cbiAganNvbjogU2VuZDxUPlxuICBzdGF0dXM6IChzdGF0dXNDb2RlOiBudW1iZXIpID0+IE5leHRBcGlSZXNwb25zZTxUPlxuICByZWRpcmVjdCh1cmw6IHN0cmluZyk6IE5leHRBcGlSZXNwb25zZTxUPlxuICByZWRpcmVjdChzdGF0dXM6IG51bWJlciwgdXJsOiBzdHJpbmcpOiBOZXh0QXBpUmVzcG9uc2U8VD5cblxuICAvKipcbiAgICogU2V0IHByZXZpZXcgZGF0YSBmb3IgTmV4dC5qcycgcHJlcmVuZGVyIG1vZGVcbiAgICovXG4gIHNldFByZXZpZXdEYXRhOiAoXG4gICAgZGF0YTogb2JqZWN0IHwgc3RyaW5nLFxuICAgIG9wdGlvbnM/OiB7XG4gICAgICAvKipcbiAgICAgICAqIFNwZWNpZmllcyB0aGUgbnVtYmVyIChpbiBzZWNvbmRzKSBmb3IgdGhlIHByZXZpZXcgc2Vzc2lvbiB0byBsYXN0IGZvci5cbiAgICAgICAqIFRoZSBnaXZlbiBudW1iZXIgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYW4gaW50ZWdlciBieSByb3VuZGluZyBkb3duLlxuICAgICAgICogQnkgZGVmYXVsdCwgbm8gbWF4aW11bSBhZ2UgaXMgc2V0IGFuZCB0aGUgcHJldmlldyBzZXNzaW9uIGZpbmlzaGVzXG4gICAgICAgKiB3aGVuIHRoZSBjbGllbnQgc2h1dHMgZG93biAoYnJvd3NlciBpcyBjbG9zZWQpLlxuICAgICAgICovXG4gICAgICBtYXhBZ2U/OiBudW1iZXJcbiAgICB9XG4gICkgPT4gTmV4dEFwaVJlc3BvbnNlPFQ+XG4gIGNsZWFyUHJldmlld0RhdGE6ICgpID0+IE5leHRBcGlSZXNwb25zZTxUPlxufVxuXG4vKipcbiAqIE5leHQgYEFQSWAgcm91dGUgaGFuZGxlclxuICovXG5leHBvcnQgdHlwZSBOZXh0QXBpSGFuZGxlcjxUID0gYW55PiA9IChcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2U8VD5cbikgPT4gdm9pZCB8IFByb21pc2U8dm9pZD5cblxuLyoqXG4gKiBVdGlsc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZXhlY09uY2U8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gUmV0dXJuVHlwZTxUPj4oXG4gIGZuOiBUXG4pOiBUIHtcbiAgbGV0IHVzZWQgPSBmYWxzZVxuICBsZXQgcmVzdWx0OiBSZXR1cm5UeXBlPFQ+XG5cbiAgcmV0dXJuICgoLi4uYXJnczogYW55W10pID0+IHtcbiAgICBpZiAoIXVzZWQpIHtcbiAgICAgIHVzZWQgPSB0cnVlXG4gICAgICByZXN1bHQgPSBmbiguLi5hcmdzKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pIGFzIFRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2F0aW9uT3JpZ2luKCkge1xuICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCB9ID0gd2luZG93LmxvY2F0aW9uXG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdG5hbWV9JHtwb3J0ID8gJzonICsgcG9ydCA6ICcnfWBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVSTCgpIHtcbiAgY29uc3QgeyBocmVmIH0gPSB3aW5kb3cubG9jYXRpb25cbiAgY29uc3Qgb3JpZ2luID0gZ2V0TG9jYXRpb25PcmlnaW4oKVxuICByZXR1cm4gaHJlZi5zdWJzdHJpbmcob3JpZ2luLmxlbmd0aClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lPFA+KENvbXBvbmVudDogQ29tcG9uZW50VHlwZTxQPikge1xuICByZXR1cm4gdHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZydcbiAgICA/IENvbXBvbmVudFxuICAgIDogQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdVbmtub3duJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZXNTZW50KHJlczogU2VydmVyUmVzcG9uc2UpIHtcbiAgcmV0dXJuIHJlcy5maW5pc2hlZCB8fCByZXMuaGVhZGVyc1NlbnRcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRHZXRJbml0aWFsUHJvcHM8XG4gIEMgZXh0ZW5kcyBCYXNlQ29udGV4dCxcbiAgSVAgPSB7fSxcbiAgUCA9IHt9XG4+KEFwcDogTmV4dENvbXBvbmVudFR5cGU8QywgSVAsIFA+LCBjdHg6IEMpOiBQcm9taXNlPElQPiB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKEFwcC5wcm90b3R5cGU/LmdldEluaXRpYWxQcm9wcykge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGBcIiR7Z2V0RGlzcGxheU5hbWUoXG4gICAgICAgIEFwcFxuICAgICAgKX0uZ2V0SW5pdGlhbFByb3BzKClcIiBpcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIG1ldGhvZCAtIHZpc2l0IGh0dHBzOi8vZXJyLnNoL3ZlcmNlbC9uZXh0LmpzL2dldC1pbml0aWFsLXByb3BzLWFzLWFuLWluc3RhbmNlLW1ldGhvZCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSlcbiAgICB9XG4gIH1cbiAgLy8gd2hlbiBjYWxsZWQgZnJvbSBfYXBwIGBjdHhgIGlzIG5lc3RlZCBpbiBgY3R4YFxuICBjb25zdCByZXMgPSBjdHgucmVzIHx8IChjdHguY3R4ICYmIGN0eC5jdHgucmVzKVxuXG4gIGlmICghQXBwLmdldEluaXRpYWxQcm9wcykge1xuICAgIGlmIChjdHguY3R4ICYmIGN0eC5Db21wb25lbnQpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgcGFnZVByb3BzIGRlZmF1bHRcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhZ2VQcm9wczogYXdhaXQgbG9hZEdldEluaXRpYWxQcm9wcyhjdHguQ29tcG9uZW50LCBjdHguY3R4KSxcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHt9IGFzIElQXG4gIH1cblxuICBjb25zdCBwcm9wcyA9IGF3YWl0IEFwcC5nZXRJbml0aWFsUHJvcHMoY3R4KVxuXG4gIGlmIChyZXMgJiYgaXNSZXNTZW50KHJlcykpIHtcbiAgICByZXR1cm4gcHJvcHNcbiAgfVxuXG4gIGlmICghcHJvcHMpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYFwiJHtnZXREaXNwbGF5TmFtZShcbiAgICAgIEFwcFxuICAgICl9LmdldEluaXRpYWxQcm9wcygpXCIgc2hvdWxkIHJlc29sdmUgdG8gYW4gb2JqZWN0LiBCdXQgZm91bmQgXCIke3Byb3BzfVwiIGluc3RlYWQuYFxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCA9PT0gMCAmJiAhY3R4LmN0eCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgJHtnZXREaXNwbGF5TmFtZShcbiAgICAgICAgICBBcHBcbiAgICAgICAgKX0gcmV0dXJuZWQgYW4gZW1wdHkgb2JqZWN0IGZyb20gXFxgZ2V0SW5pdGlhbFByb3BzXFxgLiBUaGlzIGRlLW9wdGltaXplcyBhbmQgcHJldmVudHMgYXV0b21hdGljIHN0YXRpYyBvcHRpbWl6YXRpb24uIGh0dHBzOi8vZXJyLnNoL3ZlcmNlbC9uZXh0LmpzL2VtcHR5LW9iamVjdC1nZXRJbml0aWFsUHJvcHNgXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BzXG59XG5cbmV4cG9ydCBjb25zdCB1cmxPYmplY3RLZXlzID0gW1xuICAnYXV0aCcsXG4gICdoYXNoJyxcbiAgJ2hvc3QnLFxuICAnaG9zdG5hbWUnLFxuICAnaHJlZicsXG4gICdwYXRoJyxcbiAgJ3BhdGhuYW1lJyxcbiAgJ3BvcnQnLFxuICAncHJvdG9jb2wnLFxuICAncXVlcnknLFxuICAnc2VhcmNoJyxcbiAgJ3NsYXNoZXMnLFxuXVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0V2l0aFZhbGlkYXRpb24odXJsOiBVcmxPYmplY3QpOiBzdHJpbmcge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICBpZiAodXJsICE9PSBudWxsICYmIHR5cGVvZiB1cmwgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyh1cmwpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBpZiAodXJsT2JqZWN0S2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgYFVua25vd24ga2V5IHBhc3NlZCB2aWEgdXJsT2JqZWN0IGludG8gdXJsLmZvcm1hdDogJHtrZXl9YFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VXJsKHVybClcbn1cblxuZXhwb3J0IGNvbnN0IFNQID0gdHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJ1xuZXhwb3J0IGNvbnN0IFNUID1cbiAgU1AgJiZcbiAgdHlwZW9mIHBlcmZvcm1hbmNlLm1hcmsgPT09ICdmdW5jdGlvbicgJiZcbiAgdHlwZW9mIHBlcmZvcm1hbmNlLm1lYXN1cmUgPT09ICdmdW5jdGlvbidcbiIsIlwidXNlIHN0cmljdFwiO2V4cG9ydHMuX19lc01vZHVsZT10cnVlO2V4cG9ydHMubm9ybWFsaXplUGF0aFNlcD1ub3JtYWxpemVQYXRoU2VwO2V4cG9ydHMuZGVub3JtYWxpemVQYWdlUGF0aD1kZW5vcm1hbGl6ZVBhZ2VQYXRoO2Z1bmN0aW9uIG5vcm1hbGl6ZVBhdGhTZXAocGF0aCl7cmV0dXJuIHBhdGgucmVwbGFjZSgvXFxcXC9nLCcvJyk7fWZ1bmN0aW9uIGRlbm9ybWFsaXplUGFnZVBhdGgocGFnZSl7cGFnZT1ub3JtYWxpemVQYXRoU2VwKHBhZ2UpO2lmKHBhZ2Uuc3RhcnRzV2l0aCgnL2luZGV4LycpKXtwYWdlPXBhZ2Uuc2xpY2UoNik7fWVsc2UgaWYocGFnZT09PScvaW5kZXgnKXtwYWdlPScvJzt9cmV0dXJuIHBhZ2U7fVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVub3JtYWxpemUtcGFnZS1wYXRoLmpzLm1hcCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9saW5rJylcbiIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsO1xuICB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4gIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH07XG5cbiAgcmV0dXJuIGNhY2hlO1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJkZWZhdWx0XCI6IG9ialxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTtcblxuICBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHtcbiAgICByZXR1cm4gY2FjaGUuZ2V0KG9iaik7XG4gIH1cblxuICB2YXIgbmV3T2JqID0ge307XG4gIHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsO1xuXG4gICAgICBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XG5cbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ7IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsIi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcImhvbWVfY29udGFpbmVyX18zM0stMlwiLFxuXHRcIml0ZW1MaXN0XCI6IFwiaG9tZV9pdGVtTGlzdF9fMzlXaXhcIixcblx0XCJ0aXRsZVwiOiBcImhvbWVfdGl0bGVfXzgteTNrXCIsXG5cdFwiZm9ybUNvbnRhaW5lclwiOiBcImhvbWVfZm9ybUNvbnRhaW5lcl9fMk5OZXZcIixcblx0XCJjYXB0dXJlc0xpc3RcIjogXCJob21lX2NhcHR1cmVzTGlzdF9fWHk5V1JcIixcblx0XCJ3aXRoUHJvZHVjdFwiOiBcImhvbWVfd2l0aFByb2R1Y3RfXzFJQjlBXCIsXG5cdFwiY3VycmVudFByb2R1Y3RcIjogXCJob21lX2N1cnJlbnRQcm9kdWN0X18xMHNWNVwiLFxuXHRcImxhYmVsUmFkaW9cIjogXCJob21lX2xhYmVsUmFkaW9fXzFtSlJEXCIsXG5cdFwicHJvZHVjdFNjYW5cIjogXCJob21lX3Byb2R1Y3RTY2FuX19nMGtMMFwiLFxuXHRcInNjYW5uZXJEYXRhQ29udGFpbmVyXCI6IFwiaG9tZV9zY2FubmVyRGF0YUNvbnRhaW5lcl9fMzJISlFcIixcblx0XCJlbGVtZW50XCI6IFwiaG9tZV9lbGVtZW50X18yWjVIUFwiLFxuXHRcImRhdGFDb250YWluZXJcIjogXCJob21lX2RhdGFDb250YWluZXJfXzFia3FMXCIsXG5cdFwibGVmdC1pbWFnZXNcIjogXCJob21lX2xlZnQtaW1hZ2VzX18zQUhiZlwiLFxuXHRcImltYWdlUmlnaHRcIjogXCJob21lX2ltYWdlUmlnaHRfXzNSbkFvXCIsXG5cdFwiaW1hZ2VMZWZ0XCI6IFwiaG9tZV9pbWFnZUxlZnRfXzI2RmVSXCIsXG5cdFwiaW1hZ2VcIjogXCJob21lX2ltYWdlX18yYWNfQ1wiLFxuXHRcInByaWNlVGV4dFwiOiBcImhvbWVfcHJpY2VUZXh0X18yclFRSlwiLFxuXHRcInByb2R1Y3REYXRhXCI6IFwiaG9tZV9wcm9kdWN0RGF0YV9faHMzdktcIixcblx0XCJwcm9kdWN0RGF0YUNvbnRhaW5lclwiOiBcImhvbWVfcHJvZHVjdERhdGFDb250YWluZXJfXzI0YjBZXCIsXG5cdFwicHJvZHVjdERhdGFDb250YWluZXJDb21wbGV0ZWRcIjogXCJob21lX3Byb2R1Y3REYXRhQ29udGFpbmVyQ29tcGxldGVkX18yRVMwVFwiLFxuXHRcImhpc3RvcnlDb250YWluZXJcIjogXCJob21lX2hpc3RvcnlDb250YWluZXJfX0swSUJKXCIsXG5cdFwic3F1YXJlQ29udGFpbmVyXCI6IFwiaG9tZV9zcXVhcmVDb250YWluZXJfXzJhMDVrXCIsXG5cdFwibWVzc2FnZU5vRWxlbWVudHNDb250YWluZXJcIjogXCJob21lX21lc3NhZ2VOb0VsZW1lbnRzQ29udGFpbmVyX18xcTlJV1wiLFxuXHRcInNlcGFyYXRvclwiOiBcImhvbWVfc2VwYXJhdG9yX18zQ1lpTFwiLFxuXHRcImJvcmRlclwiOiBcImhvbWVfYm9yZGVyX18xWXhyalwiLFxuXHRcIm1vZGFsSW1hZ2VcIjogXCJob21lX21vZGFsSW1hZ2VfXzFmSGlSXCIsXG5cdFwibW9kYWxJbWFnZUNsb3NlXCI6IFwiaG9tZV9tb2RhbEltYWdlQ2xvc2VfXzNBVnQ4XCIsXG5cdFwiY29udGFpbmVyUmFkaW9cIjogXCJob21lX2NvbnRhaW5lclJhZGlvX18xVFZXVlwiLFxuXHRcImRpc3BsYXlSYWRpb1wiOiBcImhvbWVfZGlzcGxheVJhZGlvX18zTV9nM1wiXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBSb3V0ZXIsIHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWUnXG5pbXBvcnQgeyBmYVRpbWVzQ2lyY2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zJ1xuXG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2hlYWRlcidcbmltcG9ydCB7IGdldERhcmtUaGVtZSwgZ2V0SWQsIHZhbGlkYXRlU2Vzc2lvbiwgZ2V0SGVhZGVyLCBnZXRUaGVtZSwgSXNDdXN0b21UaGVtZSwgZ2V0TG9jYWxlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2Vzc2lvbi1tYW5hZ2VtZW50J1xuaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2hvbWUubW9kdWxlLnNjc3MnXG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3NlbGVjdCdcbmltcG9ydCB7IFByaW1hcnlCdXR0b24sIFNlY29uZGFyeUJ1dHRvbiB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYnV0dG9ucydcbmltcG9ydCB7IEF1dG9jb21wbGV0ZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYXV0b2NvbXBsZXRlJ1xuaW1wb3J0IHsgU2Vjb25kYXJ5QnV0dG9uVmFyaWFudCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYnV0dG9ucy9TZWNvbmRhcnlCdXR0b24nXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvaW5wdXQnXG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY2hlY2tib3gnXG5pbXBvcnQgU3F1YXJlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvc3F1YXJlL1NxdWFyZSdcbmltcG9ydCBhcGkgZnJvbSAnLi4vLi4vdXRpbHMvYXBpJ1xuXG5pbXBvcnQge1xuICAgIGdldEdyb3Vwc0NhdGFsb2csXG4gICAgZ2V0TWlzc2lvbnNDYXRhbG9nLFxuICAgIGdldE1pc3Npb25zVmFsaWRhdGlvbixcbiAgICBnZXRCcmFuZHNDYXRhbG9nLFxuICAgIGdldFVuaXRzQ2F0YWxvZyxcbiAgICBnZXRTdG9yZXNDYXRhbG9nLFxuICAgIGdldExpbmVzQ2F0YWxvZyxcbn0gZnJvbSAnLi4vLi4vdXRpbHMvY2F0YWxvZ3MnXG5cbmltcG9ydCB7IHBob3RvVXJsIH0gZnJvbSAnLi4vLi4vdXRpbHMvcGhvdG9fdXJsJ1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbW9kYWwvTW9kYWwnXG5pbXBvcnQgZm9ybWF0RGF0ZSBmcm9tICcuLi8uLi91dGlscy9mb3JtYXQtZGF0ZSdcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9sb2FkZXIvTG9hZGVyJ1xuaW1wb3J0IE1hcCBmcm9tICcuLi8uLi9jb21wb25lbnRzL21hcC9NYXAnXG5pbXBvcnQgUGFnZVRpdGxlIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvcGFnZVRpdGxlL1BhZ2VUaXRsZSdcbmltcG9ydCB7IFRvYXN0Q29udGFpbmVyLCB0b2FzdCB9IGZyb20gJ3JlYWN0LW5leHRqcy10b2FzdCc7XG5pbXBvcnQge2dldEkxOG5MYWJlbH0gZnJvbSAnLi4vLi4vaTE4bidcbmltcG9ydCB7IGJ1aWxkVGhlbWUgfSBmcm9tICcuLi8uLi91dGlscy90aGVtZSc7XG5cbnR5cGUgU2NhbiA9IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIGJhcmNvZGU6IHN0cmluZyxcbiAgICBpZF9taXNzaW9uOiBudW1iZXIsXG4gICAgcHJvZHVjdDogUHJvZHVjdElkW11cbn1cblxudHlwZSBGdWxsU2NhbiA9IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIGJhcmNvZGU6IHN0cmluZyxcbiAgICBwcmljZTogc3RyaW5nLFxuICAgIHNwZWNpYWxfcHJpY2U6IGJvb2xlYW4sXG4gICAgY29tbWVudHM/OiBzdHJpbmcsXG4gICAgY2FwdHVyZV9kYXRlOiBzdHJpbmcsXG4gICAgcmVjZXB0aW9uX2RhdGU6IHN0cmluZyxcbiAgICBtaXNzaW9uPzogTWlzc2lvbixcbiAgICBwcm9kdWN0OiBQcm9kdWN0LFxuICAgIHNjYW5uZWRfYnk6IFVzZXIsXG4gICAgcmV2aWV3ZWQ/OiBib29sZWFuLFxuICAgIHN0b3JlOiBTdG9yZSxcbiAgICBwaWN0dXJlczogUGljdHVyZVtdLFxuICAgIGhpc3Rvcnk6IEhpc3RvcnksXG4gICAgW2tleXM6IHN0cmluZ106IGFueSxcbn1cblxudHlwZSBTY2FuRGF0YSA9IHtcbiAgICBiYXJjb2RlOiBzdHJpbmcsXG4gICAgaXNfdmFsaWQ6IGJvb2xlYW4sXG4gICAgcHJpY2U6IHN0cmluZyxcbiAgICBzcGVjaWFsX3ByaWNlOiBib29sZWFuLFxuICAgIGNvbW1lbnRzPzogc3RyaW5nLFxuICAgIFtrZXlzOiBzdHJpbmddOiBhbnksXG59XG5cbnR5cGUgT3B0aW9uID0ge1xuICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgbGFiZWw6IHN0cmluZyxcbn1cbnR5cGUgR3JvdXAgPSB7XG4gICAgaWQ6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmcsXG59XG5cbnR5cGUgVW5pdCA9IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIG5hbWU6IHN0cmluZyxcbn1cblxudHlwZSBMaW5lID0ge1xuICAgIGlkOiBudW1iZXIsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGlkX2dyb3VwOiBudW1iZXIsXG59XG5cbnR5cGUgQnJhbmQgPSB7XG4gICAgaWQ6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmcsXG59XG5cbnR5cGUgUHJvZHVjdElkID0ge1xuICAgIGlkOiBudW1iZXJcbn1cblxudHlwZSBQcm9kdWN0ID0ge1xuICAgIGlkOiBudW1iZXIsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHF1YW50aXR5OiBudW1iZXIsXG4gICAgYmFyY29kZTogc3RyaW5nLFxuICAgIHVuaXQ6IFVuaXQsXG4gICAgZ3JvdXA6IEdyb3VwLFxuICAgIGxpbmU6IExpbmUsXG4gICAgYnJhbmQ6IEJyYW5kLFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBpc19lbmFibGU6IGJvb2xlYW4sXG4gICAgcGljdHVyZV9wYXRoOiBzdHJpbmcsXG4gICAgW2tleXM6IHN0cmluZ106IGFueSxcbn1cblxudHlwZSBQcm9kdWN0RGF0YSA9IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBxdWFudGl0eTogbnVtYmVyLFxuICAgIHVuaXQ6IG51bWJlcixcbiAgICBncm91cDogbnVtYmVyLFxuICAgIGxpbmU6IG51bWJlcixcbiAgICBicmFuZDogbnVtYmVyLFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBwaWN0dXJlX3BhdGg6IHN0cmluZyxcbiAgICBba2V5czogc3RyaW5nXTogYW55LFxufVxuXG50eXBlIFVzZXIgPSB7XG4gICAgaWQ6IG51bWJlcixcbiAgICBmaXJzdF9uYW1lOiBzdHJpbmcsXG4gICAgbGFzdF9uYW1lOiBzdHJpbmcsXG4gICAgbW90aGVyX2xhc3RfbmFtZT86IHN0cmluZyxcbiAgICBlbXBsb3llZV9udW1iZXI/OiBudW1iZXIsXG59XG5cbnR5cGUgU3RvcmUgPSB7XG4gICAgaWQ6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBjaGFpbjogc3RyaW5nW10sXG59XG5cbnR5cGUgU3RvcmVEYXRhID0ge1xuICAgIGlkOiBudW1iZXIsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGFkZHJlc3M/OiBzdHJpbmcsXG4gICAgbGF0OiBudW1iZXIsXG4gICAgbG5nOiBudW1iZXIsXG4gICAgW2tleXM6IHN0cmluZ106IGFueSxcbn1cblxudHlwZSBMb2NhdGlvbiA9IHtcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgY29vcmRpbmF0ZXM6IG51bWJlcltdXG59XG5cbnR5cGUgTWlzc2lvbiA9IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmcsXG4gICAgcG9pbnRzOiBudW1iZXJcbn1cblxudHlwZSBQaWN0dXJlID0ge1xuICAgIHByb2R1Y3RfcGljdHVyZTogc3RyaW5nLFxuICAgIHNoZWxmX3BpY3R1cmU/OiBzdHJpbmcsXG4gICAgcHJvbW9fcGljdHVyZT86IHN0cmluZyxcbn1cblxudHlwZSBIaXN0b3J5RGF0YSA9IHtcbiAgICBwcmljZTogbnVtYmVyLFxuICAgIGNhcHR1cmVfZGF0ZTogc3RyaW5nLFxufVxuXG50eXBlIEhpc3RvcnkgPSB7XG4gICAgcmVjZW50X3ByaWNlOiBIaXN0b3J5RGF0YSxcbiAgICBtYXhfcHJpY2U6IEhpc3RvcnlEYXRhLFxuICAgIG1pbl9wcmljZTogSGlzdG9yeURhdGEsXG4gICAgbWluX3ByaWNlX3dpdGhfcHJvbW90aW9uOiBIaXN0b3J5RGF0YSxcbn1cblxuY29uc3QgZW1wdHlMb2NhdGlvbiA9IHtcbiAgICB0eXBlOiAnJyxcbiAgICBjb29yZGluYXRlczogWzkwLCAtOTBdXG59XG5cbmNvbnN0IGVtcHR5U3RvcmUgPSB7XG4gICAgaWQ6IDAsXG4gICAgbmFtZTogJycsXG4gICAgYWRkcmVzczogJycsXG4gICAgbG9jYXRpb246IGVtcHR5TG9jYXRpb24sXG4gICAgY2hhaW46IFtdLFxuICAgIHN0b3JlSWQ6IDAsXG59XG5cbmNvbnN0IGVtcHR5TWlzc2lvbiA9IHtcbiAgICBpZDogMSxcbiAgICB0aXRsZTogJycsXG4gICAgZGVzY3JpcHRpb246ICcnLFxuICAgIHBvaW50czogMCxcbn1cblxuY29uc3QgZW1wdHlDYXRhbG9nID0ge1xuICAgIGlkOiAwLFxuICAgIG5hbWU6ICcnLFxufVxuXG5jb25zdCBlbXB0eUdyb3VwID0ge1xuICAgIGlkOiAwLFxuICAgIG5hbWU6ICcnLFxufVxuXG5jb25zdCBlbXB0eUxpbmUgPSB7XG4gICAgaWQ6IDAsXG4gICAgbmFtZTogJycsXG4gICAgaWRfZ3JvdXA6IDAsXG59XG5cbmNvbnN0IGVtcHR5UHJvZHVjdCA9IHtcbiAgICBpZDogMCxcbiAgICBuYW1lOiAnJyxcbiAgICBxdWFudGl0eTogMSxcbiAgICBiYXJjb2RlOiAnJyxcbiAgICB1bml0OiBlbXB0eUNhdGFsb2csXG4gICAgZ3JvdXA6IGVtcHR5Q2F0YWxvZyxcbiAgICBsaW5lOiBlbXB0eUxpbmUsXG4gICAgYnJhbmQ6IGVtcHR5Q2F0YWxvZyxcbiAgICB0eXBlOiAnJyxcbiAgICBpc19lbmFibGU6IGZhbHNlLFxuICAgIHBpY3R1cmVfcGF0aDogJycsXG59XG5cbmNvbnN0IGVtcHR5VXNlciA9IHtcbiAgICBpZDogMSxcbiAgICBmaXJzdF9uYW1lOiAnJyxcbiAgICBsYXN0X25hbWU6ICcnLFxuICAgIG1vdGhlcl9sYXN0X25hbWU6ICcnLFxuICAgIGVtcGxveWVlX251bWJlcjogMCxcbn1cblxuY29uc3QgZW1wdHlQaWN0dXJlID0ge1xuICAgIHByb2R1Y3RfcGljdHVyZTogJycsXG4gICAgc2hlbGZfcGljdHVyZTogJycsXG4gICAgcHJvbW9fcGljdHVyZTogJycsXG59XG5cbmNvbnN0IGVtcHR5SGlzdG9yeURhdGEgPSB7XG4gICAgcHJpY2U6IDAsXG4gICAgY2FwdHVyZV9kYXRlOiAnJyxcbn1cblxuY29uc3QgZW1wdHlIaXN0b3J5ID0ge1xuICAgIHJlY2VudF9wcmljZTogZW1wdHlIaXN0b3J5RGF0YSxcbiAgICBtYXhfcHJpY2U6IGVtcHR5SGlzdG9yeURhdGEsXG4gICAgbWluX3ByaWNlOiBlbXB0eUhpc3RvcnlEYXRhLFxuICAgIG1pbl9wcmljZV93aXRoX3Byb21vdGlvbjogZW1wdHlIaXN0b3J5RGF0YSxcbn1cblxuY29uc3QgZW1wdHlTY2FuID0ge1xuICAgIGlkOiAwLFxuICAgIGJhcmNvZGU6ICcnLFxuICAgIHByaWNlOiAnJyxcbiAgICBzcGVjaWFsX3ByaWNlOiBmYWxzZSxcbiAgICBjb21tZW50czogJycsXG4gICAgY2FwdHVyZV9kYXRlOiAnJyxcbiAgICByZWNlcHRpb25fZGF0ZTogJycsXG4gICAgbWlzc2lvbjogZW1wdHlNaXNzaW9uLFxuICAgIHByb2R1Y3Q6IGVtcHR5UHJvZHVjdCxcbiAgICBzY2FubmVkX2J5OiBlbXB0eVVzZXIsXG4gICAgcmV2aWV3ZWQ6IGZhbHNlLFxuICAgIHN0b3JlOiBlbXB0eVN0b3JlLFxuICAgIHBpY3R1cmVzOiBbZW1wdHlQaWN0dXJlXSxcbiAgICBoaXN0b3J5OiBlbXB0eUhpc3RvcnksXG59XG5cbmNvbnN0IHRhYk9yZGVyID0ge1xuICAgIHZpZXdQaWN0dXJlOiAtMSxcbiAgICBwcm9kdWN0TmFtZTogMCxcbiAgICBwcm9kdWN0SW1hZ2U6IDEsXG4gICAgcHJvZHVjdEJhcmNvZGU6IC0xLFxuICAgIHByb2R1Y3RCcmFuZDogMixcbiAgICBwcm9kdWN0UXVhbnRpdHk6IDMsXG4gICAgcHJvZHVjdFVuaXQ6IDQsXG4gICAgcHJvZHVjdEdyb3VwOiA1LFxuICAgIHByb2R1Y3RMaW5lOiA2LFxuICAgIHByb2R1Y3RUeXBlOiA3LFxuICAgIGJhcmNvZGU6IDgsXG4gICAgcHJpY2U6IDksXG4gICAgc3BlY2lhbF9wcmljZTogMTAsXG4gICAgc3RvcmU6IDExLFxuICAgIHJlamVjdDogMTIsXG4gICAgdmFsaWRhdGU6IDEzLFxuICAgIGFkZHJlc3M6IC0xLFxuICAgIGNvbW1lbnRzOiAtMSxcbn07XG5cbmNvbnN0IHRhYk9yZGVyQmxvY2tlZFByb2R1Y3QgPSB7XG4gICAgdmlld1BpY3R1cmU6IC0xLFxuICAgIHByb2R1Y3ROYW1lOiAtMSxcbiAgICBwcm9kdWN0SW1hZ2U6IC0xLFxuICAgIHByb2R1Y3RCYXJjb2RlOiAtMSxcbiAgICBwcm9kdWN0QnJhbmQ6IC0xLFxuICAgIHByb2R1Y3RRdWFudGl0eTogLTEsXG4gICAgcHJvZHVjdFVuaXQ6IC0xLFxuICAgIHByb2R1Y3RHcm91cDogLTEsXG4gICAgcHJvZHVjdExpbmU6IC0xLFxuICAgIHByb2R1Y3RUeXBlOiAtMSxcbiAgICBiYXJjb2RlOiAtMSxcbiAgICBwcmljZTogMCxcbiAgICBzcGVjaWFsX3ByaWNlOiAxLFxuICAgIHN0b3JlOiAyLFxuICAgIHJlamVjdDogMyxcbiAgICB2YWxpZGF0ZTogNCxcbiAgICBhZGRyZXNzOiAtMSxcbiAgICBjb21tZW50czogLTEsXG59O1xuXG5jb25zdCB0YWJPcmRlclNwZWNpYWwgPSB7XG4gICAgdmlld1BpY3R1cmU6IDExLFxuICAgIHByb2R1Y3ROYW1lOiAwLFxuICAgIHByb2R1Y3RJbWFnZTogMSxcbiAgICBwcm9kdWN0QmFyY29kZTogLTEsXG4gICAgcHJvZHVjdEJyYW5kOiAyLFxuICAgIHByb2R1Y3RRdWFudGl0eTogMyxcbiAgICBwcm9kdWN0VW5pdDogNCxcbiAgICBwcm9kdWN0R3JvdXA6IDUsXG4gICAgcHJvZHVjdExpbmU6IDYsXG4gICAgcHJvZHVjdFR5cGU6IDcsXG4gICAgYmFyY29kZTogOCxcbiAgICBwcmljZTogOSxcbiAgICBzcGVjaWFsX3ByaWNlOiAxMCxcbiAgICBzdG9yZTogMTIsXG4gICAgcmVqZWN0OiAxMyxcbiAgICB2YWxpZGF0ZTogMTQsXG4gICAgYWRkcmVzczogLTEsXG4gICAgY29tbWVudHM6IC0xLFxufTtcblxuY29uc3QgdGFiT3JkZXJCbG9ja2VkUHJvZHVjdFNwZWNpYWwgPSB7XG4gICAgdmlld1BpY3R1cmU6IDIsXG4gICAgcHJvZHVjdE5hbWU6IC0xLFxuICAgIHByb2R1Y3RJbWFnZTogLTEsXG4gICAgcHJvZHVjdEJhcmNvZGU6IC0xLFxuICAgIHByb2R1Y3RCcmFuZDogLTEsXG4gICAgcHJvZHVjdFF1YW50aXR5OiAtMSxcbiAgICBwcm9kdWN0VW5pdDogLTEsXG4gICAgcHJvZHVjdEdyb3VwOiAtMSxcbiAgICBwcm9kdWN0TGluZTogLTEsXG4gICAgcHJvZHVjdFR5cGU6IC0xLFxuICAgIGJhcmNvZGU6IC0xLFxuICAgIHByaWNlOiAwLFxuICAgIHNwZWNpYWxfcHJpY2U6IDEsXG4gICAgc3RvcmU6IDMsXG4gICAgcmVqZWN0OiA0LFxuICAgIHZhbGlkYXRlOiA1LFxuICAgIGFkZHJlc3M6IC0xLFxuICAgIGNvbW1lbnRzOiAtMSxcbn07XG5cbmNsYXNzIEhvbWVQYWdlIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxhbnksIGFueT4ge1xuICAgIHByb2R1Y3RSZWY6IGFueVxuXG4gICAgdHlwZUZpbHRlciA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6ICdNQycsXG4gICAgICAgICAgICBsYWJlbDogJ01DJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6ICdNUCcsXG4gICAgICAgICAgICBsYWJlbDogJ01QJyxcbiAgICAgICAgfSxcbiAgICBdXG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgc2NhbnM6IFtdLFxuICAgICAgICBsb2FkZWRTY2FuOiBlbXB0eVNjYW4sXG4gICAgICAgIG5leHRTY2FuSWQ6IG51bGwsXG4gICAgICAgIHByb2R1Y3RGaWx0ZXI6IG51bGwsXG4gICAgICAgIG1pc3Npb25GaWx0ZXI6IG51bGwsXG4gICAgICAgIGdyb3VwTGlzdDogW10sXG4gICAgICAgIG1pc3Npb25MaXN0OiBbXSxcbiAgICAgICAgYnJhbmRMaXN0OiBbXSxcbiAgICAgICAgdW5pdExpc3Q6IFtdLFxuICAgICAgICBzdG9yZUxpc3Q6IFtdLFxuICAgICAgICBsaW5lTGlzdDogW10sXG4gICAgICAgIGxpbmVMaXN0RmlsdGVyOiBbXSxcbiAgICAgICAgbG9hZGVkUHJvZHVjdDogZW1wdHlQcm9kdWN0LFxuICAgICAgICBsb2FkZWRTdG9yZTogZW1wdHlTdG9yZSxcbiAgICAgICAgbG9hZGVkQnJhbmQ6IG51bGwsXG4gICAgICAgIGxvYWRlZEdyb3VwOiBlbXB0eUNhdGFsb2csXG4gICAgICAgIGxvYWRlZFVuaXQ6IGVtcHR5Q2F0YWxvZyxcbiAgICAgICAgbG9hZGVkTGluZTogZW1wdHlMaW5lLFxuICAgICAgICBsb2FkZWRSZWNlbnRQcmljZTogZW1wdHlIaXN0b3J5RGF0YSxcbiAgICAgICAgbG9hZGVkTWF4UHJpY2U6IGVtcHR5SGlzdG9yeURhdGEsXG4gICAgICAgIGxvYWRlZE1pblByaWNlOiBlbXB0eUhpc3RvcnlEYXRhLFxuICAgICAgICBsb2FkZWRNaW5QcmljZVByb21vdGlvbjogZW1wdHlIaXN0b3J5RGF0YSxcbiAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgIHNob3dNb2RhbDogZmFsc2UsXG4gICAgICAgIHNob3dSZWplY3RNb2RhbDogZmFsc2UsXG4gICAgICAgIHNlbGVjdGVkUmFkaW86IG51bGwsXG4gICAgICAgIGlzSW1hZ2VNb2RhbDogZmFsc2UsXG4gICAgICAgIHNob3dMb2FkZXI6IGZhbHNlLFxuICAgICAgICBkaXNhYmxlZEZpbHRlckJ0bjogZmFsc2UsXG4gICAgICAgIGJhcmNvZGVFcnJvck1zZzogJycsXG4gICAgICAgIHByaWNlRXJyb3JNc2c6ICcnLFxuICAgICAgICBwcm9kdWN0TmFtZUVycm9yTXNnOiAnJyxcbiAgICAgICAgcHJvZHVjdFR5cGVFcnJvck1zZzogJycsXG4gICAgICAgIHByb2R1Y3RCcmFuZEVycm9yTXNnOiAnJyxcbiAgICAgICAgcHJvZHVjdExpbmVFcnJvck1zZzogJycsXG4gICAgICAgIHByb2R1Y3RVbml0RXJyb3JNc2c6ICcnLFxuICAgICAgICBwcm9kdWN0R3JvdXBFcnJvck1zZzogJycsXG4gICAgICAgIHNob3dNZXNzYWdlTm9FbGVtZW50czogdHJ1ZSxcbiAgICAgICAgc2VsZWN0ZWRQaWN0dXJlOiAnJyxcbiAgICAgICAgZXhpc3RQcm9kdWN0OiBmYWxzZSxcbiAgICAgICAgaW1hZ2VWaXM6ICcnLFxuICAgICAgICBzZWxlY3RlZFNjYW5JZDogMCxcbiAgICAgICAgbGF0OiAnJyxcbiAgICAgICAgbG5nOiAnJyxcbiAgICAgICAgYWRkcmVzczogJycsXG4gICAgICAgIGN1cnJlbnRTY2FuVmVyaWZpZWRJZDogMCxcbiAgICAgICAgY3VycmVudFNjYW5XYXNWZXJpZmllZDogZmFsc2UsXG4gICAgICAgIGlzQmVpbmdWYWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICBpc0JlaW5nVmFsaWRhdGVkQnlDdXJyZW50VXNlcjogZmFsc2UsXG4gICAgICAgIHVzZXJJZDogMCxcbiAgICAgICAgdmFsaWRhdG9ySWQ6IDAsXG4gICAgICAgIHNjYW5zVG90YWw6IDAsXG4gICAgICAgIHNjYW5zVG90YWxXaXRoUHJvZHVjdDogMCxcbiAgICAgICAgc2NhbnNUb3RhbFdpdGhvdXRQcm9kdWN0OiAwLFxuICAgICAgICBzY2FuRmlsdGVyOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnVG9kb3MnLFxuICAgICAgICAgICAgICAgIGtleTogJ2FsbCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAneWVzJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbiBwcm9kdWN0bycsXG4gICAgICAgICAgICAgICAga2V5OiAnd2l0aFByb2R1Y3QnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ25vJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1NpbiBwcm9kdWN0bycsXG4gICAgICAgICAgICAgICAga2V5OiAnd2l0aG91dFByb2R1Y3QnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgcmVzZXRMaW5lOiBmYWxzZSxcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgUm91dGVyLmV2ZW50cy5vbignYmVmb3JlSGlzdG9yeUNoYW5nZScsIGFzeW5jICh1cmwpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBpc0JlaW5nVmFsaWRhdGVkQnlDdXJyZW50VXNlciwgc2VsZWN0ZWRTY2FuSWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRTY2FuSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNOZXh0VXJsSG9tZSA9IHVybCA9PSAnL2hvbWUnO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0JlaW5nVmFsaWRhdGVkQnlDdXJyZW50VXNlciAmJiAhaXNOZXh0VXJsSG9tZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVCZWluZ1ZhbGlkYXRlZFN0YXR1cygnZGlzYWJsZScsIHNlbGVjdGVkU2NhbklkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgaGFuZGxlV2luZG93Q2xvc2UgPSBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgeyBpc0JlaW5nVmFsaWRhdGVkQnlDdXJyZW50VXNlciwgc2VsZWN0ZWRTY2FuSWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgaWYgKGlzQmVpbmdWYWxpZGF0ZWRCeUN1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUJlaW5nVmFsaWRhdGVkU3RhdHVzKCdkaXNhYmxlJywgc2VsZWN0ZWRTY2FuSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCBpc0N1c3RvbSA9IElzQ3VzdG9tVGhlbWUoKTtcbiAgICAgICAgY29uc3QgaGFzRGFya1RoZW1lID0gZ2V0RGFya1RoZW1lKCkgPT09ICcxJyA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgaWYgKGhhc0RhcmtUaGVtZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmNsYXNzTGlzdC5yZW1vdmUoJ2N1c3RvbScpXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LmFkZCgnZGFya21vZGUnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoaXNDdXN0b20pIHtcbiAgICAgICAgICAgIGNvbnN0IHRoZW1lID0gZ2V0VGhlbWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUaGVtZSA9IGJ1aWxkVGhlbWUodGhlbWUpO1xuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgc3R5bGUuaW5uZXJIVE1MID0gY3VycmVudFRoZW1lO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LmFkZCgnY3VzdG9tJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVTZXNzaW9uKClcbiAgICAgICAgY29uc3QgZ3JvdXBMaXN0ID0gYXdhaXQgZ2V0R3JvdXBzQ2F0YWxvZygpXG4gICAgICAgIGNvbnN0IG1pc3Npb25MaXN0ID0gYXdhaXQgZ2V0TWlzc2lvbnNWYWxpZGF0aW9uKClcbiAgICAgICAgY29uc3QgYnJhbmRMaXN0ID0gYXdhaXQgZ2V0QnJhbmRzQ2F0YWxvZygpXG4gICAgICAgIGNvbnN0IHVuaXRMaXN0ID0gYXdhaXQgZ2V0VW5pdHNDYXRhbG9nKClcbiAgICAgICAgY29uc3Qgc3RvcmVMaXN0ID0gYXdhaXQgZ2V0U3RvcmVzQ2F0YWxvZygpXG4gICAgICAgIGNvbnN0IGxpbmVMaXN0ID0gYXdhaXQgZ2V0TGluZXNDYXRhbG9nKClcbiAgICAgICAgY29uc3QgbGluZUxpc3RGaWx0ZXIgPSBhd2FpdCBnZXRMaW5lc0NhdGFsb2coKVxuXG4gICAgICAgIG1pc3Npb25MaXN0LnVuc2hpZnQoeyB2YWx1ZTogJycsIGxhYmVsOiAnVG9kYXMnIH0pXG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBncm91cExpc3QsXG4gICAgICAgICAgICBicmFuZExpc3QsXG4gICAgICAgICAgICB1bml0TGlzdCxcbiAgICAgICAgICAgIG1pc3Npb25MaXN0LFxuICAgICAgICAgICAgc3RvcmVMaXN0LFxuICAgICAgICAgICAgbGluZUxpc3QsXG4gICAgICAgICAgICBsaW5lTGlzdEZpbHRlcixcbiAgICAgICAgICAgIHNob3dMb2FkZXI6IHRydWUsXG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgdGhpcy5nZXRTY2FuTGlzdCh0cnVlKVxuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZVRhYik7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVJbnB1dENsaWNrKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdGhpcy5oYW5kbGVXaW5kb3dDbG9zZSk7XG5cbiAgICB9XG5cbiAgICBoYW5kbGVJbnB1dENsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGV2ZW50XG5cbiAgICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2luZGV4ZWQtZWxlbWVudCcpKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LnNlbGVjdCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5zZWxlY3QoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IHNlbGVjdGVkU2NhbklkLCBpc0JlaW5nVmFsaWRhdGVkLCBpc0JlaW5nVmFsaWRhdGVkQnlDdXJyZW50VXNlciwgY3VycmVudFNjYW5XYXNWZXJpZmllZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZFNjYW5JZCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlQ29tbWFuZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlQ29tbWFuZHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQmVpbmdWYWxpZGF0ZWRTdGF0dXMgPSBhc3luYyAoc3RhdHVzLCBzY2FuSWQpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0ZWRTY2FuSWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdlbmFibGUnKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzID0gJzEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdkaXNhYmxlJykge1xuICAgICAgICAgICAgICAgIHN0YXR1cyA9ICcwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gJ2FwaS9zY2FuL2JlaW5nLXZhbGlkYXRlZCc7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGlkX3NjYW46IHNjYW5JZCxcbiAgICAgICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGdldEhlYWRlcigpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdChlbmRwb2ludCwgcmVxdWVzdCwgaGVhZGVycyk7XG4gICAgICAgICAgICBjb25zdCB7IGlzQmVpbmdWYWxpZGF0ZWQsIHZhbGlkYXRvcklkIH0gPSByZXNwb25zZS5kYXRhO1xuXG4gICAgICAgICAgICBsZXQgdXNlcklkOiBhbnkgPSBhd2FpdCBnZXRJZCgpO1xuICAgICAgICAgICAgdXNlcklkID0gcGFyc2VJbnQodXNlcklkKTtcblxuICAgICAgICAgICAgY29uc3QgaXNCZWluZ1ZhbGlkYXRlZEJ5Q3VycmVudFVzZXIgPSB2YWxpZGF0b3JJZCA9PT0gdXNlcklkO1xuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjdXJyZW50U2Nhbldhc1ZlcmlmaWVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTY2FuVmVyaWZpZWRJZDogc2VsZWN0ZWRTY2FuSWQsXG4gICAgICAgICAgICAgICAgaXNCZWluZ1ZhbGlkYXRlZCxcbiAgICAgICAgICAgICAgICBpc0JlaW5nVmFsaWRhdGVkQnlDdXJyZW50VXNlcixcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JJZCxcbiAgICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0hvbWVQYWdlLnVwZGF0ZUJlaW5nVmFsaWRhdGVkU3RhdHVzW2Vycm9yXTogJywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlVGFiKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGtleUNvZGUgPSBldmVudC53aGljaCA/IGV2ZW50LndoaWNoIDogZXZlbnQua2V5Q29kZTtcbiAgICAgICAgY29uc3Qga2V5ID0gZXZlbnQuY29kZSA/IGV2ZW50LmNvZGUgOiBldmVudC5rZXk7XG4gICAgICAgIGNvbnN0IGlzVGFiS2V5ID0ga2V5Q29kZSA9PT0gOSAmJiBrZXkgPT09ICdUYWInO1xuXG4gICAgICAgIGlmIChkb2N1bWVudCAmJiBpc1RhYktleSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBsZXQgaW5kZXhlZEVsZW1lbnRzOiBhbnkgPSBbXTtcbiAgICAgICAgICAgIGluZGV4ZWRFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbmRleGVkLWVsZW1lbnQ6bm90KFt0YWJpbmRleD1cIi0xXCJdKScpO1xuICAgICAgICAgICAgaW5kZXhlZEVsZW1lbnRzID0gWy4uLmluZGV4ZWRFbGVtZW50c10uc29ydCgoYSwgYikgPT4gYS50YWJJbmRleCAtIGIudGFiSW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXhlZEVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRFbGVtZW50SW5kZXggPSBjdXJyZW50RWxlbWVudC50YWJJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEVsZW1lbnQgPSBpbmRleGVkRWxlbWVudHMuZmluZCgoZWxlbWVudCkgPT4gZWxlbWVudC50YWJJbmRleCA9PT0gbmV4dEVsZW1lbnRJbmRleCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmV4dEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50LnNlbGVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQuc2VsZWN0KClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleGVkRWxlbWVudHMubGVuZ3RoICYmIGluZGV4ZWRFbGVtZW50c1swXSAmJiBpbmRleGVkRWxlbWVudHNbMF0uc2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVkRWxlbWVudHNbMF0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZWRFbGVtZW50c1swXS5zZWxlY3QoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQ29tbWFuZHMgPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBrZXlDb2RlID0gZXZlbnQud2hpY2ggPyBldmVudC53aGljaCA6IGV2ZW50LmtleUNvZGU7XG4gICAgICAgIGNvbnN0IGtleSA9IGV2ZW50LmNvZGUgPyBldmVudC5jb2RlIDogZXZlbnQua2V5O1xuICAgICAgICBjb25zdCBpc0NvbnRyb2xLZXkgPSBldmVudC5jdHJsS2V5O1xuICAgICAgICBjb25zdCBpc1NoaWZ0S2V5ID0gZXZlbnQuc2hpZnRLZXk7XG4gICAgICAgIGNvbnN0IGlzUGx1c0tleSA9IGtleUNvZGUgPT09IDE4NyB8fCBrZXlDb2RlID09PSAxMDcgfHwga2V5ID09PSAnKic7XG4gICAgICAgIGNvbnN0IGlzTGVzc0tleSA9IGtleUNvZGUgPT09IDE4OSB8fCBrZXlDb2RlID09PSAxMDk7XG5cbiAgICAgICAgaWYgKGlzQ29udHJvbEtleSAmJiBpc1NoaWZ0S2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNMZXNzS2V5KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5SZWplY3QoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzUGx1c0tleSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVNjYW5CdXR0b25IYW5kbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0U2Nhbkxpc3QgPSBhc3luYyAoaXNGaXJzdFJ1bjogYm9vbGVhbiA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtczoge1xuICAgICAgICAgICAgdGV4dFNlYXJjaD86IHN0cmluZyxcbiAgICAgICAgICAgIHdpdGhQcm9kdWN0Pzogc3RyaW5nLFxuICAgICAgICB9ID0ge31cblxuICAgICAgICBjb25zdCBsb2NhbGUgPSBnZXRMb2NhbGUoKVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnByb2R1Y3RGaWx0ZXIpIHtcbiAgICAgICAgICAgIHBhcmFtcy53aXRoUHJvZHVjdCA9IGAke3RoaXMuc3RhdGUucHJvZHVjdEZpbHRlcn1gXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5taXNzaW9uRmlsdGVyKSB7XG4gICAgICAgICAgICBwYXJhbXMudGV4dFNlYXJjaCA9IGAke3RoaXMuc3RhdGUubWlzc2lvbkZpbHRlcn1gXG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmdldChcbiAgICAgICAgICAgICAgICAnL2FwaS9zY2FuL2FsbCcsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBnZXRIZWFkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIGlmIChyZXMuZGF0YS5zY2Fucy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIHRvdGFsX3BlbmRpbmcsIHdpdGhfcHJvZHVjdCwgd2l0aG91dF9wcm9kdWN0IH0gPSByZXMuZGF0YS5zY2Fuc1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjYW5zID0gZGF0YS5tYXAoKHNjYW46IFNjYW5bXSkgPT4gKHsgLi4uc2NhbiB9KSlcblxuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbnNDb3VudHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbDogdG90YWxfcGVuZGluZyxcbiAgICAgICAgICAgICAgICAgICAgd2l0aFByb2R1Y3Q6IHdpdGhfcHJvZHVjdCxcbiAgICAgICAgICAgICAgICAgICAgd2l0aG91dFByb2R1Y3Q6IHdpdGhvdXRfcHJvZHVjdCxcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzY2FuRmlsdGVyID0gdGhpcy5zdGF0ZS5zY2FuRmlsdGVyLm1hcChmaWx0ZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIubGFiZWwgPSBnZXRJMThuTGFiZWwobG9jYWxlLCBgaG9tZS5zaWRlYmFyLnNjYW5GaWx0ZXIuJHtmaWx0ZXIua2V5fWApXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlci5sYWJlbCA9IGZpbHRlci5sYWJlbC5yZXBsYWNlKC8gKlxcKFteKV0qXFwpICovZywgJycpXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlci5sYWJlbCA9IGAke2ZpbHRlci5sYWJlbH0gKCR7c2NhbnNDb3VudHNbZmlsdGVyLmtleV19KWBcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBzY2FucyxcbiAgICAgICAgICAgICAgICAgICAgc2hvd01lc3NhZ2VOb0VsZW1lbnRzOiBpc0ZpcnN0UnVuLFxuICAgICAgICAgICAgICAgICAgICBzY2FuRmlsdGVyLFxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBjb25zdCB7IG5leHRTY2FuSWQgfSA9IHRoaXMuc3RhdGVcblxuICAgICAgICAgICAgICAgIGlmICghaXNGaXJzdFJ1bikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFNjYW5JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zY2FuU2VsZWN0ZWRIYW5kbGVyKG5leHRTY2FuSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUJlaW5nVmFsaWRhdGVkU3RhdHVzKCdlbmFibGUnLCBuZXh0U2NhbklkKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zY2FuU2VsZWN0ZWRIYW5kbGVyKHNjYW5zWzBdLmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVCZWluZ1ZhbGlkYXRlZFN0YXR1cygnZW5hYmxlJywgc2NhbnNbMF0uaWQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXMuZGF0YS5zY2Fucy5kYXRhLmxlbmd0aCA9PT0gMCB8fCBpc0ZpcnN0UnVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRlZFNjYW46IGVtcHR5U2NhbixcbiAgICAgICAgICAgICAgICAgICAgc2hvd01lc3NhZ2VOb0VsZW1lbnRzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZEZpbHRlckJ0bjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNob3dMb2FkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8gVE9ETzogZW52aWFyIG5vdGlmaWNhY2nDs24gY3VhbmRvIGZhbGxhIGFsIG9idGVuZXIgbG9zIHNjYW5zXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzY2FuU2VsZWN0ZWRIYW5kbGVyID0gYXN5bmMgKHNjYW5JZDogbnVtYmVyLCBiYXJjb2RlPzogc3RyaW5nKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFuU2NhbigpXG5cbiAgICAgICAgICAgIGNvbnN0IHsgc2NhbnMsIGlzQmVpbmdWYWxpZGF0ZWRCeUN1cnJlbnRVc2VyLCByZXNldExpbmV9ID0gdGhpcy5zdGF0ZVxuICAgICAgICAgICAgbGV0IHsgc2VsZWN0ZWRTY2FuSWQgfSA9IHRoaXMuc3RhdGVcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkU2NhbklkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQmVpbmdWYWxpZGF0ZWRCeUN1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQmVpbmdWYWxpZGF0ZWRTdGF0dXMoJ2Rpc2FibGUnLCBzZWxlY3RlZFNjYW5JZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHNjYW5zLmZpbmRJbmRleChzID0+IHMuaWQgPT09IHNjYW5JZClcbiAgICAgICAgICAgIGNvbnN0IG5leHRTY2FuSWQgPSBzY2Fuc1tuZXh0SW5kZXggKyAxXT8uaWQgfHwgbnVsbFxuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBzaG93TG9hZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dNZXNzYWdlTm9FbGVtZW50czogZmFsc2UsXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBsZXQgcmVzO1xuXG4gICAgICAgICAgICBpZiAoIWJhcmNvZGUpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBhd2FpdCBhcGkuZ2V0KGBhcGkvc2Nhbi8ke3NjYW5JZH1gLCB7IGhlYWRlcnM6IGdldEhlYWRlcigpIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcyA9IGF3YWl0IGFwaS5nZXQoYGFwaS9zY2FuLyR7c2VsZWN0ZWRTY2FuSWR9L2JhcmNvZGUvJHtiYXJjb2RlfWAsIHsgaGVhZGVyczogZ2V0SGVhZGVyKCkgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQmVpbmdWYWxpZGF0ZWRTdGF0dXMoJ2VuYWJsZScsIHNjYW5JZClcblxuICAgICAgICAgICAgY29uc3QgbG9hZGVkU2NhbiA9IHtcbiAgICAgICAgICAgICAgICAuLi5yZXMuZGF0YS5zY2FuLFxuICAgICAgICAgICAgICAgIHBpY3R1cmVzOiByZXMuZGF0YS5zY2FuLnBpY3R1cmVzLm1hcCgocDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdF9waWN0dXJlOiBwLnByb2R1Y3RfcGljdHVyZSA/IGAke3Bob3RvVXJsfS8ke3AucHJvZHVjdF9waWN0dXJlfWAgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hlbGZfcGljdHVyZTogcC5zaGVsZl9waWN0dXJlID8gYCR7cGhvdG9Vcmx9LyR7cC5zaGVsZl9waWN0dXJlfWAgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbW9fcGljdHVyZTogcC5wcm9tb19waWN0dXJlID8gYCR7cGhvdG9Vcmx9LyR7cC5wcm9tb19waWN0dXJlfWAgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcHJvZHVjdEV4aXN0cyA9IEJvb2xlYW4ocmVzLmRhdGEuc2Nhbi5wcm9kdWN0KVxuXG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0SW1hZ2UgPSBwcm9kdWN0RXhpc3RzICYmXG4gICAgICAgICAgICAgICAgYCR7cGhvdG9Vcmx9LyR7cmVzLmRhdGEuc2Nhbi5wcm9kdWN0LnBpY3R1cmVfcGF0aH1gXG5cbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZFN0b3JlID0gcmVzLmRhdGEuc2Nhbi5zdG9yZSA/IHJlcy5kYXRhLnNjYW4uc3RvcmUgOiBlbXB0eVN0b3JlO1xuXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFN0b3JlID0gdGhpcy5zdGF0ZS5zdG9yZUxpc3QuZmluZCgoc3RvcmUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmUubGFiZWwgPT09IGxvYWRlZFN0b3JlLm5hbWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbG9hZGVkU3RvcmUuc3RvcmVJZCA9IHNlbGVjdGVkU3RvcmUudmFsdWU7XG5cbiAgICAgICAgICAgIHNlbGVjdGVkU2NhbklkID0gcmVzLmRhdGEuc2Nhbi5pZDtcblxuICAgICAgICAgICAgY29uc3QgbmV4dFN0YXRlID0ge1xuICAgICAgICAgICAgICAgIGxvYWRlZFNjYW4sXG4gICAgICAgICAgICAgICAgbmV4dFNjYW5JZCxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFNjYW5JZCxcbiAgICAgICAgICAgICAgICBsb2FkZWRQcm9kdWN0OiByZXMuZGF0YS5zY2FuLnByb2R1Y3QgPyByZXMuZGF0YS5zY2FuLnByb2R1Y3QgOiBlbXB0eVByb2R1Y3QsXG4gICAgICAgICAgICAgICAgbG9hZGVkU3RvcmUsXG4gICAgICAgICAgICAgICAgbG9hZGVkQnJhbmQ6IHJlcy5kYXRhLnNjYW4ucHJvZHVjdCA/IHJlcy5kYXRhLnNjYW4ucHJvZHVjdC5icmFuZCA6ICcnLFxuICAgICAgICAgICAgICAgIGxvYWRlZFVuaXQ6IHJlcy5kYXRhLnNjYW4ucHJvZHVjdCA/IHJlcy5kYXRhLnNjYW4ucHJvZHVjdC51bml0IDogZW1wdHlDYXRhbG9nLFxuICAgICAgICAgICAgICAgIGxvYWRlZEdyb3VwOiByZXMuZGF0YS5zY2FuLnByb2R1Y3QgPyByZXMuZGF0YS5zY2FuLnByb2R1Y3QuZ3JvdXAgOiBlbXB0eUdyb3VwLFxuICAgICAgICAgICAgICAgIGxvYWRlZEdyb3VwTmFtZTogJycsXG4gICAgICAgICAgICAgICAgbG9hZGVkTGluZTogcmVzLmRhdGEuc2Nhbi5wcm9kdWN0ID8gcmVzLmRhdGEuc2Nhbi5wcm9kdWN0LmxpbmUgOiBlbXB0eUxpbmUsXG4gICAgICAgICAgICAgICAgZXhpc3RQcm9kdWN0OiBwcm9kdWN0RXhpc3RzLFxuICAgICAgICAgICAgICAgIGltYWdlVmlzOiBwcm9kdWN0SW1hZ2UgfHwgKFxuICAgICAgICAgICAgICAgICAgICBsb2FkZWRTY2FuLnBpY3R1cmVzLmxlbmd0aCA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkU2Nhbi5waWN0dXJlc1swXS5wcm9kdWN0X3BpY3R1cmUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGxvYWRlZFJlY2VudFByaWNlOiByZXMuZGF0YS5zY2FuLnByb2R1Y3QgJiYgT2JqZWN0LmtleXMocmVzLmRhdGEuc2Nhbi5oaXN0b3J5LnJlY2VudF9wcmljZSkubGVuZ3RoICE9PSAwID8gcmVzLmRhdGEuc2Nhbi5oaXN0b3J5LnJlY2VudF9wcmljZSA6IGVtcHR5SGlzdG9yeURhdGEsXG4gICAgICAgICAgICAgICAgbG9hZGVkTWF4UHJpY2U6IHJlcy5kYXRhLnNjYW4ucHJvZHVjdCAmJiBPYmplY3Qua2V5cyhyZXMuZGF0YS5zY2FuLmhpc3RvcnkubWF4X3ByaWNlKS5sZW5ndGggIT09IDAgPyByZXMuZGF0YS5zY2FuLmhpc3RvcnkubWF4X3ByaWNlIDogZW1wdHlIaXN0b3J5RGF0YSxcbiAgICAgICAgICAgICAgICBsb2FkZWRNaW5QcmljZTogcmVzLmRhdGEuc2Nhbi5wcm9kdWN0ICYmIE9iamVjdC5rZXlzKHJlcy5kYXRhLnNjYW4uaGlzdG9yeS5taW5fcHJpY2UpLmxlbmd0aCAhPT0gMCA/IHJlcy5kYXRhLnNjYW4uaGlzdG9yeS5taW5fcHJpY2UgOiBlbXB0eUhpc3RvcnlEYXRhLFxuICAgICAgICAgICAgICAgIGxvYWRlZE1pblByaWNlUHJvbW90aW9uOiByZXMuZGF0YS5zY2FuLnByb2R1Y3QgJiYgT2JqZWN0LmtleXMocmVzLmRhdGEuc2Nhbi5oaXN0b3J5Lm1pbl9wcmljZV93aXRoX3Byb21vdGlvbikubGVuZ3RoICE9PSAwID8gcmVzLmRhdGEuc2Nhbi5oaXN0b3J5Lm1pbl9wcmljZV93aXRoX3Byb21vdGlvbiA6IGVtcHR5SGlzdG9yeURhdGEsXG4gICAgICAgICAgICAgICAgc2hvd0xvYWRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWRGaWx0ZXJCdG46IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxhdDogcmVzLmRhdGEuc2Nhbi5zdG9yZSAhPT0gbnVsbCA/IHJlcy5kYXRhLnNjYW4uc3RvcmUubG9jYXRpb24uY29vcmRpbmF0ZXNbMV0gOiAnJyxcbiAgICAgICAgICAgICAgICBsbmc6IHJlcy5kYXRhLnNjYW4uc3RvcmUgIT09IG51bGwgPyByZXMuZGF0YS5zY2FuLnN0b3JlLmxvY2F0aW9uLmNvb3JkaW5hdGVzWzBdIDogJycsXG4gICAgICAgICAgICAgICAgcmVzZXRMaW5lOiAhYmFyY29kZSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRTY2FuSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RUYWJpbmRleDogYW55ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdGFiaW5kZXg9XCIwXCJdJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0VGFiaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0VGFiaW5kZXguZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0VGFiaW5kZXguc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBlbnZpYXIgbm90aWZpY2FjacOzbiBjdWFuZG8gZmFsbGEgYWwgb2J0ZW5lciB1biBzY2FuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhblNjYW4gPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9hZGVkU2NhbjogZW1wdHlTY2FuLFxuICAgICAgICAgICAgbG9hZGVkU3RvcmU6IGVtcHR5U3RvcmUsXG4gICAgICAgICAgICBsb2FkZWRQcm9kdWN0OiBlbXB0eVByb2R1Y3QsXG4gICAgICAgICAgICBsb2FkZWRCcmFuZDogZW1wdHlDYXRhbG9nLFxuICAgICAgICAgICAgbG9hZGVkR3JvdXA6IGVtcHR5R3JvdXAsXG4gICAgICAgICAgICBsb2FkZWRVbml0OiBlbXB0eUNhdGFsb2csXG4gICAgICAgICAgICBsb2FkZWRMaW5lOiBlbXB0eUxpbmUsXG4gICAgICAgICAgICBsb2FkZWRSZWNlbnRQcmljZTogZW1wdHlIaXN0b3J5RGF0YSxcbiAgICAgICAgICAgIGxvYWRlZE1heFByaWNlOiBlbXB0eUhpc3RvcnlEYXRhLFxuICAgICAgICAgICAgbG9hZGVkTWluUHJpY2U6IGVtcHR5SGlzdG9yeURhdGEsXG4gICAgICAgICAgICBsb2FkZWRNaW5QcmljZVByb21vdGlvbjogZW1wdHlIaXN0b3J5RGF0YSxcbiAgICAgICAgICAgIGJhcmNvZGVFcnJvck1zZzogJycsXG4gICAgICAgICAgICBwcmljZUVycm9yTXNnOiAnJyxcbiAgICAgICAgICAgIHByb2R1Y3ROYW1lRXJyb3JNc2c6ICcnLFxuICAgICAgICAgICAgcHJvZHVjdFR5cGVFcnJvck1zZzogJycsXG4gICAgICAgICAgICBwcm9kdWN0QnJhbmRFcnJvck1zZzogJycsXG4gICAgICAgICAgICBwcm9kdWN0TGluZUVycm9yTXNnOiAnJyxcbiAgICAgICAgICAgIHByb2R1Y3RVbml0RXJyb3JNc2c6ICcnLFxuICAgICAgICAgICAgcHJvZHVjdEdyb3VwRXJyb3JNc2c6ICcnLFxuICAgICAgICAgICAgcmVzZXRMaW5lOiBmYWxzZSxcbiAgICAgICAgICAgIGxhdDogMCxcbiAgICAgICAgICAgIGxuZzogMFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNoYW5nZVByb2R1Y3RIYW5kbGVyID0gKGU6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9kdWN0RmlsdGVyID0gZS50YXJnZXQudmFsdWVcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByb2R1Y3RGaWx0ZXIgfSwgKCkgPT4gdGhpcy5maWx0ZXJCdXR0b25IYW5kbGVyKCkpXG4gICAgfVxuXG4gICAgY2hhbmdlTWlzc2lvbkZpbHRlckhhbmRsZXIgPSAoZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IG1pc3Npb25GaWx0ZXIgPSBlLnRhcmdldC52YWx1ZVxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbWlzc2lvbkZpbHRlciB9LCAoKSA9PiB0aGlzLmZpbHRlckJ1dHRvbkhhbmRsZXIoKSlcbiAgICB9XG5cbiAgICBmaWx0ZXJCdXR0b25IYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGRpc2FibGVkRmlsdGVyQnRuOiB0cnVlLFxuICAgICAgICAgICAgbmV4dFNjYW5JZDogbnVsbCxcbiAgICAgICAgfSwgKCkgPT4gdGhpcy5nZXRTY2FuTGlzdCgpKVxuICAgIH1cblxuICAgIHByaWNlSGFuZGxlciA9IChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IHByaWNlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgICAgIGNvbnN0IGxvYWRlZFNjYW4gPSB7XG4gICAgICAgICAgICAuLi50aGlzLnN0YXRlLmxvYWRlZFNjYW4sXG4gICAgICAgICAgICBwcmljZSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGVkU2NhbiB9KTtcbiAgICB9XG5cbiAgICBhZGRyZXNzSGFuZGxlciA9IChlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGUudGFyZ2V0LnZhbHVlXG5cbiAgICAgICAgY29uc3Qgc3RvcmUgPSB7XG4gICAgICAgICAgICAuLi50aGlzLnN0YXRlLmxvYWRlZFN0b3JlLFxuICAgICAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkZWRTdG9yZTogc3RvcmUgfSlcbiAgICB9XG5cbiAgICBjb21tZW50SGFuZGxlciA9IChlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgY29tbWVudHMgPSBlLnRhcmdldC52YWx1ZVxuXG4gICAgICAgIGNvbnN0IHNjYW4gPSB7XG4gICAgICAgICAgICAuLi50aGlzLnN0YXRlLmxvYWRlZFNjYW4sXG4gICAgICAgICAgICBjb21tZW50cyxcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkZWRTY2FuOiBzY2FuIH0pXG4gICAgfVxuXG4gICAgY2hhbmdlU3RvcmVIYW5kbGVyID0gKGU6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCB7IHN0b3JlTGlzdCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3Qgc3RvcmVJZCA9IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIGNvbnN0IHN0b3JlID0gc3RvcmVMaXN0LmZpbmQoc3RvcmUgPT4gc3RvcmUudmFsdWUgPT09IHN0b3JlSWQpXG5cbiAgICAgICAgY29uc3QgbG9hZGVkU3RvcmUgPSB7XG4gICAgICAgICAgICAuLi50aGlzLnN0YXRlLmxvYWRlZFN0b3JlLFxuICAgICAgICAgICAgaWQ6IHBhcnNlSW50KHN0b3JlSWQpLFxuICAgICAgICAgICAgc3RvcmVJZDogcGFyc2VJbnQoc3RvcmVJZCksXG4gICAgICAgICAgICBuYW1lOiBzdG9yZS5sYWJlbCxcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkZWRTdG9yZSB9KVxuICAgIH1cblxuICAgIHByb2R1Y3ROYW1lSGFuZGxlciA9IChlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGUudGFyZ2V0LnZhbHVlXG5cbiAgICAgICAgY29uc3QgcHJvZHVjdCA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUubG9hZGVkUHJvZHVjdCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGVkUHJvZHVjdDogcHJvZHVjdCB9KVxuICAgIH1cbiAgICBjaGFuZ2VCcmFuZEhhbmRsZXIgPSAoZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGJyYW5kSWQgPSBlLnRhcmdldC52YWx1ZVxuXG4gICAgICAgIGNvbnN0IGJyYW5kID0ge1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5sb2FkZWRCcmFuZCxcbiAgICAgICAgICAgIGlkOiBwYXJzZUludChicmFuZElkKSxcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkZWRCcmFuZDogYnJhbmQgfSlcbiAgICB9XG4gICAgY2hhbmdlVW5pdEhhbmRsZXIgPSAoZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IHVuaXRJZCA9IGUudGFyZ2V0LnZhbHVlXG5cbiAgICAgICAgY29uc3QgdW5pdCA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUubG9hZGVkVW5pdCxcbiAgICAgICAgICAgIGlkOiBwYXJzZUludCh1bml0SWQpLFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRlZFVuaXQ6IHVuaXQgfSlcbiAgICB9XG4gICAgcXVhbnRpdHlIYW5kbGVyID0gKGU6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBxdWFudGl0eSA9IGUudGFyZ2V0LnZhbHVlXG5cbiAgICAgICAgY29uc3QgcHJvZHVjdCA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUubG9hZGVkUHJvZHVjdCxcbiAgICAgICAgICAgIHF1YW50aXR5LFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRlZFByb2R1Y3Q6IHByb2R1Y3QgfSlcbiAgICB9XG5cbiAgICBjaGFuZ2VUeXBlSGFuZGxlciA9IChlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGUudGFyZ2V0LnZhbHVlXG5cbiAgICAgICAgY29uc3QgcHJvZHVjdCA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUubG9hZGVkUHJvZHVjdCxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGVkUHJvZHVjdDogcHJvZHVjdCB9KVxuICAgIH1cblxuICAgIHNwZWNpYWxQcmljZUNoZWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2NhbiA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUubG9hZGVkU2NhbixcbiAgICAgICAgICAgIHNwZWNpYWxfcHJpY2U6ICF0aGlzLnN0YXRlLmxvYWRlZFNjYW4uc3BlY2lhbF9wcmljZVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRlZFNjYW46IHNjYW4gfSlcbiAgICB9XG5cbiAgICBzZWxlY3RQcm9kdWN0SW1hZ2VIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd01vZGFsOiB0cnVlIH0pXG4gICAgfVxuXG4gICAgdmFsaWRhdGVTY2FuQnV0dG9uSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBsb2FkZWRTdG9yZSwgbG9hZGVkU2NhbiwgZXhpc3RQcm9kdWN0IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBzZWxlY3RlZFN0b3JlTmFtZSA9IGxvYWRlZFN0b3JlLm5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICBjb25zdCBzdG9yZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0b3JlLWlucHV0JylcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IEFycmF5LmZyb20oc3RvcmVJbnB1dC5xdWVyeVNlbGVjdG9yQWxsKCdvcHRpb24nKSlcblxuICAgICAgICBjb25zdCBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnMuZmluZChvcHRpb24gPT4gb3B0aW9uLnNlbGVjdGVkKVxuXG4gICAgICAgIGlmIChzZWxlY3RlZFN0b3JlTmFtZSA9PT0gJ25vIHN0b3JlJykge1xuICAgICAgICAgICAgaWYgKCFzdG9yZUlucHV0LmNsYXNzTGlzdC5jb250YWlucygnaW5wdXQtZXJyb3InKSkge1xuICAgICAgICAgICAgICAgIHN0b3JlSW5wdXQuY2xhc3NMaXN0LmFkZCgnaW5wdXQtZXJyb3InKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdG9yZUlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ2lucHV0LWVycm9yJylcblxuICAgICAgICAgICAgaWYgKGV4aXN0UHJvZHVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVTY2FuKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVTY2FuQW5kUHJvZHVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFsaWRhdGVTY2FuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzY2FuRGF0YSA9IHRoaXMuY2hlY2tBbmREZWxldGVVbnVzZWRGaWVsZHModGhpcy5zdGF0ZS5sb2FkZWRTY2FuLCB0cnVlKVxuICAgICAgICBjb25zdCBzdG9yZURhdGEgPSB0aGlzLmNoZWNrQW5kRGVsZXRlVW51c2VkRmlsZWRzRm9yU3RvcmUoXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmxvYWRlZFN0b3JlLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2FkZWRTdG9yZS5sb2NhdGlvbixcbiAgICAgICAgKVxuXG4gICAgICAgIGlmICh0aGlzLnZhbGlkYXRlUmVxdWlyZWRGaWVsZHNGb3JTY2FuKHNjYW5EYXRhKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5nZXRIZWFkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBmb3JtX2RhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBzY2FuRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtX2RhdGEuYXBwZW5kKGBzY2FuWyR7a2V5fV1gLCBzY2FuRGF0YVtrZXldKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBzdG9yZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybV9kYXRhLmFwcGVuZChgc3RvcmVbJHtrZXl9XWAsIHN0b3JlRGF0YVtrZXldKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLnBvc3QoXG4gICAgICAgICAgICAgICAgICAgIGBhcGkvc2Nhbi8ke3RoaXMuc3RhdGUubG9hZGVkU2Nhbi5pZH1gLFxuICAgICAgICAgICAgICAgICAgICBmb3JtX2RhdGEsXG4gICAgICAgICAgICAgICAgICAgIHsgaGVhZGVycyB9XG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xlYW5TY2FuKClcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRTY2FuTGlzdCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFsaWRhdGVTY2FuQW5kUHJvZHVjdCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2NhbkRhdGEgPSB0aGlzLmNoZWNrQW5kRGVsZXRlVW51c2VkRmllbGRzKHRoaXMuc3RhdGUubG9hZGVkU2NhbiwgdHJ1ZSlcbiAgICAgICAgY29uc3QgcHJvZHVjdERhdGEgPSB0aGlzLmNoZWNrQW5kRGVsZXRlVW51c2VkRmllbGRzRm9yUHJvZHVjdChcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubG9hZGVkUHJvZHVjdCxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubG9hZGVkU2NhbixcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubG9hZGVkQnJhbmQsXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmxvYWRlZEdyb3VwLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2FkZWRMaW5lLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2FkZWRVbml0LFxuICAgICAgICApXG5cbiAgICAgICAgY29uc3Qgc3RvcmVEYXRhID0gdGhpcy5jaGVja0FuZERlbGV0ZVVudXNlZEZpbGVkc0ZvclN0b3JlKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2FkZWRTdG9yZSxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubG9hZGVkU3RvcmUubG9jYXRpb24sXG4gICAgICAgIClcblxuICAgICAgICBpZiAodGhpcy52YWxpZGF0ZVJlcXVpcmVkRmllbGRzKHNjYW5EYXRhLCBwcm9kdWN0RGF0YSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZ2V0SGVhZGVyKCksXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgZm9ybV9kYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gcHJvZHVjdERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybV9kYXRhLmFwcGVuZChgcHJvZHVjdFske2tleX1dYCwgcHJvZHVjdERhdGFba2V5XSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gc2NhbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybV9kYXRhLmFwcGVuZChgc2Nhblske2tleX1dYCwgc2NhbkRhdGFba2V5XSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gc3RvcmVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1fZGF0YS5hcHBlbmQoYHN0b3JlWyR7a2V5fV1gLCBzdG9yZURhdGFba2V5XSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KFxuICAgICAgICAgICAgICAgICAgICBgYXBpL3NjYW4vJHt0aGlzLnN0YXRlLmxvYWRlZFNjYW4uaWR9YCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybV9kYXRhLFxuICAgICAgICAgICAgICAgICAgICB7IGhlYWRlcnMgfVxuICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFuU2NhbigpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2Nhbkxpc3QoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuc2V0U3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWRHcm91cDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2tBbmREZWxldGVVbnVzZWRGaWVsZHMgPSAob2JqZWN0OiBGdWxsU2NhbiwgaXNWYWxpZDogYm9vbGVhbik6IFNjYW5EYXRhID0+IHtcbiAgICAgICAgY29uc3Qgc2NhbiA9IHtcbiAgICAgICAgICAgIGJhcmNvZGU6IG9iamVjdC5iYXJjb2RlLFxuICAgICAgICAgICAgaXNfdmFsaWQ6IGlzVmFsaWQsXG4gICAgICAgICAgICBwcmljZTogb2JqZWN0LnByaWNlLFxuICAgICAgICAgICAgc3BlY2lhbF9wcmljZTogb2JqZWN0LnNwZWNpYWxfcHJpY2UsXG4gICAgICAgICAgICBjb21tZW50czogJycsXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9iamVjdC5jb21tZW50cyB8fCBvYmplY3QuY29tbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgc2Nhbi5jb21tZW50c1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Nhbi5jb21tZW50cyA9IG9iamVjdC5jb21tZW50c1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNjYW5cbiAgICB9XG5cbiAgICBjaGVja0FuZERlbGV0ZVVudXNlZEZpZWxkc0ZvclByb2R1Y3QgPSAoXG4gICAgICAgIG9iamVjdDogUHJvZHVjdCxcbiAgICAgICAgc2NhbjogRnVsbFNjYW4sXG4gICAgICAgIGJyYW5kOiBCcmFuZCxcbiAgICAgICAgZ3JvdXA6IEdyb3VwLFxuICAgICAgICBsaW5lOiBMaW5lLFxuICAgICAgICB1bml0OiBVbml0LFxuICAgICk6IFByb2R1Y3REYXRhID0+IHtcbiAgICAgICAgY29uc3QgcHJvZHVjdCA9IHtcbiAgICAgICAgICAgIGlkOiBvYmplY3QuaWQsXG4gICAgICAgICAgICBuYW1lOiBvYmplY3QubmFtZSxcbiAgICAgICAgICAgIHF1YW50aXR5OiBvYmplY3QucXVhbnRpdHksXG4gICAgICAgICAgICB1bml0OiB1bml0LmlkLFxuICAgICAgICAgICAgZ3JvdXA6IGdyb3VwLmlkLFxuICAgICAgICAgICAgbGluZTogbGluZS5pZCxcbiAgICAgICAgICAgIGJyYW5kOiBicmFuZC5pZCxcbiAgICAgICAgICAgIHR5cGU6IG9iamVjdC50eXBlLFxuICAgICAgICAgICAgcGljdHVyZV9wYXRoOiAoKG9iamVjdC5waWN0dXJlX3BhdGggYXMgYW55KSBpbnN0YW5jZW9mIEZpbGUpID9cbiAgICAgICAgICAgICAgICBvYmplY3QucGljdHVyZV9wYXRoIDpcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcm9kdWN0XG4gICAgfVxuXG4gICAgY2hlY2tBbmREZWxldGVVbnVzZWRGaWxlZHNGb3JTdG9yZSA9IChvYmplY3Q6IFN0b3JlLCBsb2NhdGlvbjogTG9jYXRpb24pOiBTdG9yZURhdGEgPT4ge1xuICAgICAgICBjb25zdCBzdG9yZSA9IHtcbiAgICAgICAgICAgIGlkOiBvYmplY3QuaWQsXG4gICAgICAgICAgICBuYW1lOiBvYmplY3QubmFtZSxcbiAgICAgICAgICAgIGFkZHJlc3M6ICcnLFxuICAgICAgICAgICAgbGF0OiBsb2NhdGlvbi5jb29yZGluYXRlc1sxXSxcbiAgICAgICAgICAgIGxuZzogbG9jYXRpb24uY29vcmRpbmF0ZXNbMF0sXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9iamVjdC5hZGRyZXNzIHx8IG9iamVjdC5hZGRyZXNzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIHN0b3JlLmFkZHJlc3NcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0b3JlLmFkZHJlc3MgPSBvYmplY3QuYWRkcmVzc1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0b3JlXG4gICAgfVxuXG4gICAgdmFsaWRhdGVSZXF1aXJlZEZpZWxkcyA9IChzY2FuOiBTY2FuRGF0YSwgcHJvZHVjdDogUHJvZHVjdERhdGEpOiBib29sZWFuID0+IHtcbiAgICAgICAgY29uc3QgbG9jYWxlID0gZ2V0TG9jYWxlKClcblxuICAgICAgICBsZXQgaXNWYWxpZCA9IHRydWVcblxuICAgICAgICBsZXQgYmFyY29kZUVycm9yTXNnID0gJydcbiAgICAgICAgbGV0IHByaWNlRXJyb3JNc2cgPSAnJ1xuICAgICAgICBsZXQgcHJvZHVjdE5hbWVFcnJvck1zZyA9ICcnXG4gICAgICAgIGxldCBwcm9kdWN0VHlwZUVycm9yTXNnID0gJydcbiAgICAgICAgbGV0IHByb2R1Y3RCcmFuZEVycm9yTXNnID0gJydcbiAgICAgICAgbGV0IHByb2R1Y3RHcm91cEVycm9yTXNnID0gJydcbiAgICAgICAgbGV0IHByb2R1Y3RVbml0RXJyb3JNc2cgPSAnJ1xuICAgICAgICBsZXQgcHJvZHVjdExpbmVFcnJvck1zZyA9ICcnXG5cbiAgICAgICAgaWYgKCFzY2FuLmJhcmNvZGUudHJpbSgpKSB7XG4gICAgICAgICAgICBiYXJjb2RlRXJyb3JNc2cgPSBnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zY2FuLmlucHV0LmJhcmNvZGUuZXJyb3InKVxuICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNWYWxpZFByaWNlID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQoc2Nhbi5wcmljZSkpID4gMDtcblxuICAgICAgICBpZiAoIXNjYW4ucHJpY2UudHJpbSgpIHx8ICFoYXNWYWxpZFByaWNlKSB7XG4gICAgICAgICAgICBwcmljZUVycm9yTXNnID0gZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi5pbnB1dC5wcmljZS5lcnJvcicpXG4gICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJvZHVjdC5uYW1lLnRyaW0oKSkge1xuICAgICAgICAgICAgcHJvZHVjdE5hbWVFcnJvck1zZyA9IGdldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnByb2R1Y3QuaW5wdXQubmFtZS5lcnJvcicpXG4gICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJvZHVjdC50eXBlLnRyaW0oKSB8fCBwcm9kdWN0LnR5cGUgPT0gJzAnKSB7XG4gICAgICAgICAgICBwcm9kdWN0VHlwZUVycm9yTXNnID0gZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucHJvZHVjdC5pbnB1dC50eXBlLmVycm9yJylcbiAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcm9kdWN0LmJyYW5kKSB7XG4gICAgICAgICAgICBwcm9kdWN0QnJhbmRFcnJvck1zZyA9IGdldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnByb2R1Y3QuaW5wdXQuYnJhbmQuZXJyb3InKVxuICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXByb2R1Y3QuZ3JvdXApIHtcbiAgICAgICAgICAgIHByb2R1Y3RHcm91cEVycm9yTXNnID0gZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucHJvZHVjdC5pbnB1dC5ncm91cC5lcnJvcicpXG4gICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJvZHVjdC51bml0KSB7XG4gICAgICAgICAgICBwcm9kdWN0VW5pdEVycm9yTXNnID0gZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucHJvZHVjdC5pbnB1dC51bml0LmVycm9yJylcbiAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcm9kdWN0LmxpbmUpIHtcbiAgICAgICAgICAgIHByb2R1Y3RMaW5lRXJyb3JNc2cgPSBnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5wcm9kdWN0LmlucHV0LmxpbmUuZXJyb3InKVxuICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGJhcmNvZGVFcnJvck1zZyxcbiAgICAgICAgICAgIHByaWNlRXJyb3JNc2csXG4gICAgICAgICAgICBwcm9kdWN0TmFtZUVycm9yTXNnLFxuICAgICAgICAgICAgcHJvZHVjdFR5cGVFcnJvck1zZyxcbiAgICAgICAgICAgIHByb2R1Y3RCcmFuZEVycm9yTXNnLFxuICAgICAgICAgICAgcHJvZHVjdExpbmVFcnJvck1zZyxcbiAgICAgICAgICAgIHByb2R1Y3RVbml0RXJyb3JNc2csXG4gICAgICAgICAgICBwcm9kdWN0R3JvdXBFcnJvck1zZyxcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gaXNWYWxpZFxuICAgIH1cblxuICAgIHZhbGlkYXRlUmVxdWlyZWRGaWVsZHNGb3JTY2FuID0gKHNjYW46IFNjYW5EYXRhKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIGNvbnN0IGxvY2FsZSA9IGdldExvY2FsZSgpXG5cbiAgICAgICAgbGV0IGlzVmFsaWQgPSB0cnVlXG4gICAgICAgIGxldCBiYXJjb2RlRXJyb3JNc2cgPSAnJztcbiAgICAgICAgbGV0IHByaWNlRXJyb3JNc2cgPSAnJztcblxuICAgICAgICBpZiAoIXNjYW4uYmFyY29kZS50cmltKCkgfHwgc2Nhbi5iYXJjb2RlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYmFyY29kZUVycm9yTXNnID0gZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi5pbnB1dC5iYXJjb2RlLmVycm9yJylcbiAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGFzVmFsaWRQcmljZSA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHNjYW4ucHJpY2UpKSA+IDA7XG5cbiAgICAgICAgaWYgKCFzY2FuLnByaWNlLnRyaW0oKSB8fCAhaGFzVmFsaWRQcmljZSkge1xuICAgICAgICAgICAgcHJpY2VFcnJvck1zZyA9IGdldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnNjYW4uaW5wdXQucHJpY2UuZXJyb3InKVxuICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGJhcmNvZGVFcnJvck1zZyxcbiAgICAgICAgICAgIHByaWNlRXJyb3JNc2csXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIGlzVmFsaWRcbiAgICB9XG5cbiAgICByZWplY3RlZEJ1dHRvbkhhbmRsZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoXG4gICAgICAgICAgICAgICAgYGFwaS9zY2FuLyR7dGhpcy5zdGF0ZS5sb2FkZWRTY2FuLmlkfS9yZWplY3RlZGAsXG4gICAgICAgICAgICAgICAgeyBoZWFkZXJzOiBnZXRIZWFkZXIoKSB9LFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhblNjYW4oKVxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2Nhbkxpc3QoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVE9ETzogTWFuZGFyIG1lbnNhamUgZGUgZXJyb3IuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuUmVqZWN0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd1JlamVjdE1vZGFsOiB0cnVlIH0pXG4gICAgfVxuXG4gICAgY2xvc2VSZWplY3QgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93UmVqZWN0TW9kYWw6IGZhbHNlIH0pXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFJhZGlvOiBudWxsIH0pXG4gICAgfVxuXG4gICAgb25DaGFuZ2VSYWRpbyA9IGFzeW5jIChlOiBhbnkpID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkUmFkaW86IHBhcnNlSW50KGUuY3VycmVudFRhcmdldC52YWx1ZSwgMTApIH0pXG4gICAgICAgIGF3YWl0IHRoaXMuc2VuZENyaXRlcmlvbigpXG4gICAgfVxuICAgIHNlbmRDcml0ZXJpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxvY2FsZSA9IGdldExvY2FsZSgpXG4gICAgICAgIGNvbnN0IGVuZHBvaW50ID0gYC9hcGkvY3JpdGVyaW9uL3NjYW4vJHt0aGlzLnN0YXRlLmxvYWRlZFNjYW4uaWR9YDtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgIGlkX2NyaXRlcmlvbjogdGhpcy5zdGF0ZS5zZWxlY3RlZFJhZGlvICsgMSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgIGhlYWRlcnM6IGdldEhlYWRlcigpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGFwaS5wb3N0KGVuZHBvaW50LCByZXF1ZXN0LCBoZWFkZXJzKVxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVqZWN0ZWRCdXR0b25IYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdG9hc3Qubm90aWZ5KGdldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnRvYXN0LnNlbmRDcml0ZXJpb24uc3VjY2Vzcy5tZXNzYWdlJyksIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnRvYXN0LnNlbmRDcml0ZXJpb24uc3VjY2Vzcy50aXRsZScpLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdWNjZXNzXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VSZWplY3QoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRvYXN0Lm5vdGlmeShnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS50b2FzdC5zZW5kQ3JpdGVyaW9uLmVycm9yLm1lc3NhZ2UnKSwge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUudG9hc3Quc2VuZENyaXRlcmlvbi5lcnJvci50aXRsZScpLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgfTtcblxuICAgIHNlbGVjdEltYWdlID0gKHNlbGVjdGVkUGljdHVyZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChzZWxlY3RlZFBpY3R1cmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRQaWN0dXJlLFxuICAgICAgICAgICAgICAgIHNob3dNb2RhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc0ltYWdlTW9kYWw6IHRydWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hhbmdlUHJvZHVjdFBpY3R1cmUgPSAoZTogYW55KSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldC5maWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwaG90byA9IGUudGFyZ2V0LmZpbGVzWzBdXG5cbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZFByb2R1Y3QgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5sb2FkZWRQcm9kdWN0LFxuICAgICAgICAgICAgICAgIHBpY3R1cmVfcGF0aDogcGhvdG8sXG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGltYWdlVmlzOiBVUkwuY3JlYXRlT2JqZWN0VVJMKHBob3RvKSxcbiAgICAgICAgICAgICAgICBsb2FkZWRQcm9kdWN0LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUNsb3NlTW9kYWwgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd01vZGFsOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0UHJvZHVjdERldGFpbCA9IGFzeW5jIChwcm9kdWN0SWQ6IHN0cmluZykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dMb2FkZXI6IHRydWUsIH0pXG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkuZ2V0KGBhcGkvcHJvZHVjdC8ke3Byb2R1Y3RJZH1gLCB7IGhlYWRlcnM6IGdldEhlYWRlcigpIH0pXG5cbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZFByb2R1Y3QgPSB7XG4gICAgICAgICAgICAgICAgLi4ucmVzLmRhdGEucHJvZHVjdCxcbiAgICAgICAgICAgICAgICBwaWN0dXJlX3BhdGg6IHJlcy5kYXRhLnByb2R1Y3QucGljdHVyZV9wYXRoID8gYCR7cGhvdG9Vcmx9LyR7cmVzLmRhdGEucHJvZHVjdC5waWN0dXJlX3BhdGh9YCA6IG51bGxcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgbG9hZGVkUHJvZHVjdCxcbiAgICAgICAgICAgICAgICBsb2FkZWRTY2FuOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUubG9hZGVkU2NhbixcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ubG9hZGVkUHJvZHVjdCxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW1hZ2VWaXM6IHJlcy5kYXRhLnByb2R1Y3QucGljdHVyZV9wYXRoID8gYCR7cGhvdG9Vcmx9LyR7cmVzLmRhdGEucHJvZHVjdC5waWN0dXJlX3BhdGh9YCA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2hvd0xvYWRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9hZGVkVW5pdDogcmVzLmRhdGEucHJvZHVjdC51bml0LFxuICAgICAgICAgICAgICAgIGxvYWRlZEdyb3VwOiByZXMuZGF0YS5wcm9kdWN0Lmdyb3VwLFxuICAgICAgICAgICAgICAgIGxvYWRlZExpbmU6IHJlcy5kYXRhLnByb2R1Y3QubGluZSxcbiAgICAgICAgICAgICAgICBsb2FkZWRCcmFuZDogcmVzLmRhdGEucHJvZHVjdC5icmFuZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNjYW5TZWxlY3RlZEhhbmRsZXIodGhpcy5zdGF0ZS5zZWxlY3RlZFNjYW5JZClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmRTY2FuID0gYXN5bmMgKGJhcmNvZGUpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0ZWRTY2FuSWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFNjYW5JZCAmJiBiYXJjb2RlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zY2FuU2VsZWN0ZWRIYW5kbGVyKHNlbGVjdGVkU2NhbklkLCBiYXJjb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVvdXQgPSBudWxsO1xuXG4gICAgYmFyY29kZUhhbmRsZXIgPSAoZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGJhcmNvZGUgPSBlLnRhcmdldC52YWx1ZVxuXG4gICAgICAgIGlmICghaXNOYU4oYmFyY29kZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZFNjYW4gPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5sb2FkZWRTY2FuLFxuICAgICAgICAgICAgICAgIGJhcmNvZGUsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkZWRTY2FuIH0pXG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmZpbmRTY2FuKGJhcmNvZGUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFN1Z2dlc3Rpb25zID0gKHZhbHVlLCBkYXRhKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBpbnB1dFZhbHVlID0gdmFsdWUudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGlucHV0TGVuZ3RoID0gaW5wdXRWYWx1ZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBpbnB1dExlbmd0aCA9PT0gMCA/IGRhdGEuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pXG4gICAgICAgICAgICA6IGRhdGEuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAocXVlcnksICdpZycpXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUV4aXN0ID0gaXRlbS5sYWJlbC5zZWFyY2gocmVnZXhwKSAhPSAtMVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtRXhpc3RcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBnZXRTdWdnZXN0aW9uVmFsdWUgPSBzdWdnZXN0aW9uID0+IHtcbiAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb24ubGFiZWxcbiAgICB9O1xuXG4gICAgb25TdWdnZXN0aW9uc0NsZWFyUmVxdWVzdGVkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGdyb3VwTGlzdDogW10sXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyU3VnZ2VzdGlvbiA9IHN1Z2dlc3Rpb24gPT4ge1xuICAgICAgICByZXR1cm4gKDxkaXY+IHtzdWdnZXN0aW9uLmxhYmVsfSA8L2Rpdj4pXG4gICAgfTtcblxuICAgIG9uU2VsZWN0R3JvdXAgPSAoZXZlbnQsIHsgc3VnZ2VzdGlvbiB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGdyb3VwSWQgPSBzdWdnZXN0aW9uLnZhbHVlXG4gICAgICAgIGxldCBsaW5lSWQgPSAwXG4gICAgICAgIGxldCBsaW5lTmFtZSA9ICcnXG5cbiAgICAgICAgY29uc3QgdXBkYXRlRmlsdGVyTGluZUxpc3QgPSB0aGlzLnN0YXRlLmxpbmVMaXN0LmZpbHRlcihcbiAgICAgICAgICAgIGxpbmUgPT4gKFxuICAgICAgICAgICAgICAgIE51bWJlcihncm91cElkKSA9PT0gbGluZS5ncm91cFxuICAgICAgICAgICAgKVxuICAgICAgICApXG5cbiAgICAgICAgaWYgKHVwZGF0ZUZpbHRlckxpbmVMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxpbmVJZCA9IHVwZGF0ZUZpbHRlckxpbmVMaXN0WzBdLnZhbHVlXG4gICAgICAgICAgICBsaW5lTmFtZSA9IHVwZGF0ZUZpbHRlckxpbmVMaXN0WzBdLmxhYmVsXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBncm91cCA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUubG9hZGVkR3JvdXAsXG4gICAgICAgICAgICBpZDogcGFyc2VJbnQoZ3JvdXBJZCksXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaW5lID0ge1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5sb2FkZWRMaW5lLFxuICAgICAgICAgICAgbmFtZTogbGluZU5hbWUsXG4gICAgICAgICAgICBpZDogbGluZUlkLFxuICAgICAgICAgICAgaWRfZ3JvdXA6IGdyb3VwSWQsXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvYWRlZEdyb3VwOiBncm91cCxcbiAgICAgICAgICAgIGxpbmVMaXN0RmlsdGVyOiB1cGRhdGVGaWx0ZXJMaW5lTGlzdCxcbiAgICAgICAgICAgIGxvYWRlZExpbmU6IGxpbmUsXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgb25TZWxlY3RUeXBlID0gKGV2ZW50LCB7IHN1Z2dlc3Rpb24gfSkgPT4ge1xuICAgICAgICBjb25zdCB0eXBlID0gc3VnZ2VzdGlvbi52YWx1ZVxuXG4gICAgICAgIGNvbnN0IHByb2R1Y3QgPSB7XG4gICAgICAgICAgICAuLi50aGlzLnN0YXRlLmxvYWRlZFByb2R1Y3QsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRlZFByb2R1Y3Q6IHByb2R1Y3QgfSlcbiAgICB9XG5cbiAgICBvblNlbGVjdEJyYW5kID0gKGV2ZW50LCB7IHN1Z2dlc3Rpb24gfSkgPT4ge1xuICAgICAgICBjb25zdCBicmFuZElkID0gc3VnZ2VzdGlvbi52YWx1ZVxuXG4gICAgICAgIGNvbnN0IGJyYW5kID0ge1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5sb2FkZWRCcmFuZCxcbiAgICAgICAgICAgIGlkOiBwYXJzZUludChicmFuZElkKSxcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkZWRCcmFuZDogYnJhbmQgfSlcbiAgICB9XG5cbiAgICBvblNlbGVjdFVuaXQgPSAoZXZlbnQsIHsgc3VnZ2VzdGlvbiB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHVuaXRJZCA9IHN1Z2dlc3Rpb24udmFsdWVcblxuICAgICAgICBjb25zdCB1bml0ID0ge1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5sb2FkZWRVbml0LFxuICAgICAgICAgICAgaWQ6IHBhcnNlSW50KHVuaXRJZCksXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGVkVW5pdDogdW5pdCB9KVxuICAgIH1cblxuICAgIG9uU2VsZWN0TEluZSA9IChldmVudCwgeyBzdWdnZXN0aW9uIH0pID0+IHtcbiAgICAgICAgY29uc3QgbGluZUlkID0gc3VnZ2VzdGlvbi52YWx1ZVxuXG4gICAgICAgIGNvbnN0IGxpbmUgPSB7XG4gICAgICAgICAgICAuLi50aGlzLnN0YXRlLmxvYWRlZExpbmUsXG4gICAgICAgICAgICBpZDogcGFyc2VJbnQobGluZUlkKSxcbiAgICAgICAgICAgIG5hbWU6IHN1Z2dlc3Rpb24ubGFiZWwsXG4gICAgICAgICAgICBpZF9ncm91cDogc3VnZ2VzdGlvbi5ncm91cCxcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkZWRMaW5lOiBsaW5lIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzY2FucyxcbiAgICAgICAgICAgIGxvYWRlZFNjYW4sXG4gICAgICAgICAgICBncm91cExpc3QsXG4gICAgICAgICAgICBtaXNzaW9uTGlzdCxcbiAgICAgICAgICAgIGJyYW5kTGlzdCxcbiAgICAgICAgICAgIHVuaXRMaXN0LFxuICAgICAgICAgICAgc3RvcmVMaXN0LFxuICAgICAgICAgICAgbGluZUxpc3RGaWx0ZXIsXG4gICAgICAgICAgICBsb2FkZWRTdG9yZSxcbiAgICAgICAgICAgIGxvYWRlZFByb2R1Y3QsXG4gICAgICAgICAgICBsb2FkZWRNYXhQcmljZSxcbiAgICAgICAgICAgIGxvYWRlZE1pblByaWNlUHJvbW90aW9uLFxuICAgICAgICAgICAgbG9hZGVkTWluUHJpY2UsXG4gICAgICAgICAgICBsb2FkZWRSZWNlbnRQcmljZSxcbiAgICAgICAgICAgIGxhdCxcbiAgICAgICAgICAgIGxuZyxcbiAgICAgICAgICAgIGxvYWRlZEJyYW5kLFxuICAgICAgICAgICAgbG9hZGVkTGluZSxcbiAgICAgICAgICAgIGxvYWRlZEdyb3VwLFxuICAgICAgICAgICAgbG9hZGVkVW5pdCxcbiAgICAgICAgICAgIHNob3dNb2RhbCxcbiAgICAgICAgICAgIGlzSW1hZ2VNb2RhbCxcbiAgICAgICAgICAgIHNlbGVjdGVkU2NhbklkLFxuICAgICAgICAgICAgc2hvd0xvYWRlcixcbiAgICAgICAgICAgIGRpc2FibGVkRmlsdGVyQnRuLFxuICAgICAgICAgICAgYmFyY29kZUVycm9yTXNnLFxuICAgICAgICAgICAgcHJpY2VFcnJvck1zZyxcbiAgICAgICAgICAgIHByb2R1Y3ROYW1lRXJyb3JNc2csXG4gICAgICAgICAgICBwcm9kdWN0VHlwZUVycm9yTXNnLFxuICAgICAgICAgICAgcHJvZHVjdEJyYW5kRXJyb3JNc2csXG4gICAgICAgICAgICBwcm9kdWN0TGluZUVycm9yTXNnLFxuICAgICAgICAgICAgcHJvZHVjdFVuaXRFcnJvck1zZyxcbiAgICAgICAgICAgIHByb2R1Y3RHcm91cEVycm9yTXNnLFxuICAgICAgICAgICAgc2hvd1JlamVjdE1vZGFsLFxuICAgICAgICAgICAgc2VsZWN0ZWRSYWRpbyxcbiAgICAgICAgICAgIHNob3dNZXNzYWdlTm9FbGVtZW50cyxcbiAgICAgICAgICAgIHNlbGVjdGVkUGljdHVyZSxcbiAgICAgICAgICAgIGltYWdlVmlzLFxuICAgICAgICAgICAgaXNCZWluZ1ZhbGlkYXRlZCxcbiAgICAgICAgICAgIGlzQmVpbmdWYWxpZGF0ZWRCeUN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgcmVzZXRMaW5lLFxuICAgICAgICB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgICAgIGNvbnN0IGxvY2FsZSA9IGdldExvY2FsZSgpXG5cbiAgICAgICAgYnJhbmRMaXN0LnNvcnQoKGEsIGIpID0+IGEubGFiZWwudG9Mb3dlckNhc2UoKSA+IGIubGFiZWwudG9Mb3dlckNhc2UoKSA/IDEgOiAtMSk7XG4gICAgICAgIHVuaXRMaXN0LnNvcnQoKGEsIGIpID0+IGEubGFiZWwudG9Mb3dlckNhc2UoKSA+IGIubGFiZWwudG9Mb3dlckNhc2UoKSA/IDEgOiAtMSk7XG5cbiAgICAgICAgY29uc3QgZXhpc3RQcm9kdWN0ID0gbG9hZGVkU2Nhbi5wcm9kdWN0ID8gdHJ1ZSA6IGZhbHNlXG5cbiAgICAgICAgY29uc3QgY2FwdHVyZURhdGUgPSBmb3JtYXREYXRlKGxvYWRlZFNjYW4uY2FwdHVyZV9kYXRlKVxuXG4gICAgICAgIGNvbnN0IGZ1bGxOYW1lID0gYCR7bG9hZGVkU2Nhbi5zY2FubmVkX2J5LmZpcnN0X25hbWV9ICR7bG9hZGVkU2Nhbi5zY2FubmVkX2J5Lmxhc3RfbmFtZX1gXG5cbiAgICAgICAgY29uc3QgcmVjZW50UHJpY2VEYXRlID0gZXhpc3RQcm9kdWN0ICYmIGxvYWRlZFJlY2VudFByaWNlLmNhcHR1cmVfZGF0ZS5sZW5ndGggPiAwID9cbiAgICAgICAgICAgIGZvcm1hdERhdGUobG9hZGVkUmVjZW50UHJpY2UuY2FwdHVyZV9kYXRlKSA6XG4gICAgICAgICAgICBudWxsXG5cbiAgICAgICAgY29uc3QgbWF4UHJpY2VEYXRlID0gZXhpc3RQcm9kdWN0ICYmIGxvYWRlZE1heFByaWNlLmNhcHR1cmVfZGF0ZS5sZW5ndGggPiAwID9cbiAgICAgICAgICAgIGZvcm1hdERhdGUobG9hZGVkTWF4UHJpY2UuY2FwdHVyZV9kYXRlKSA6XG4gICAgICAgICAgICBudWxsXG5cbiAgICAgICAgY29uc3QgbWluUHJpY2VEYXRlID0gZXhpc3RQcm9kdWN0ICYmIGxvYWRlZE1pblByaWNlLmNhcHR1cmVfZGF0ZS5sZW5ndGggPiAwID9cbiAgICAgICAgICAgIGZvcm1hdERhdGUobG9hZGVkTWluUHJpY2UuY2FwdHVyZV9kYXRlKSA6XG4gICAgICAgICAgICBudWxsXG5cbiAgICAgICAgY29uc3QgbWluUHJpY2VQcm9tb0RhdGUgPSBleGlzdFByb2R1Y3QgJiYgbG9hZGVkTWluUHJpY2VQcm9tb3Rpb24uY2FwdHVyZV9kYXRlLmxlbmd0aCA+IDAgP1xuICAgICAgICAgICAgZm9ybWF0RGF0ZShsb2FkZWRNaW5QcmljZVByb21vdGlvbi5jYXB0dXJlX2RhdGUpIDpcbiAgICAgICAgICAgIG51bGxcblxuICAgICAgICBjb25zdCB0YWJzID0gZXhpc3RQcm9kdWN0ID8gdGFiT3JkZXJCbG9ja2VkUHJvZHVjdCA6IHRhYk9yZGVyO1xuICAgICAgICBjb25zdCBzcGVjaWFsQW5kRXhpc3QgPSBleGlzdFByb2R1Y3QgJiYgbG9hZGVkU2Nhbi5zcGVjaWFsX3ByaWNlO1xuICAgICAgICBjb25zdCB0YWJzU3BlY2lhbCA9IGV4aXN0UHJvZHVjdCA/IHRhYk9yZGVyQmxvY2tlZFByb2R1Y3RTcGVjaWFsIDogdGFiT3JkZXJTcGVjaWFsXG5cbiAgICAgICAgY29uc3QgbG9hZGVkR3JvdXBOYW1lID0gbG9hZGVkR3JvdXAgJiYgbG9hZGVkR3JvdXAubmFtZSA/IGxvYWRlZEdyb3VwLm5hbWUgOiAnJ1xuICAgICAgICBjb25zdCBsb2FkZWRCcmFuZE5hbWUgPSBsb2FkZWRCcmFuZCAmJiBsb2FkZWRCcmFuZC5uYW1lID8gbG9hZGVkQnJhbmQubmFtZSA6ICcnXG4gICAgICAgIGNvbnN0IGxvYWRlZFByb2R1Y3RUeXBlID0gbG9hZGVkUHJvZHVjdCAmJiBsb2FkZWRQcm9kdWN0LnR5cGUgPyBsb2FkZWRQcm9kdWN0LnR5cGUgOiAnJ1xuICAgICAgICBjb25zdCBsb2FkZWRVbml0TmFtZSA9IGxvYWRlZFVuaXQgJiYgbG9hZGVkVW5pdC5uYW1lID8gbG9hZGVkVW5pdC5uYW1lIDogJyc7XG4gICAgICAgIGNvbnN0IGxvYWRlZExpbmVOYW1lID0gbG9hZGVkTGluZSAmJiBsb2FkZWRMaW5lLm5hbWUgPyBsb2FkZWRMaW5lLm5hbWUgOiAnJztcblxuICAgICAgICBjb25zdCByYWRpb01hcEZpcnN0ID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiAnYmx1cnJ5JyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucmFkaW9NYXBGaXJzdC5ibHVycnknKSxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBzZWxlY3RlZFJhZGlvID09PSAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ2ZhckF3YXknLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5yYWRpb01hcEZpcnN0LmZhckF3YXknKSxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBzZWxlY3RlZFJhZGlvID09PSAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ2RhcmsnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAyLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5yYWRpb01hcEZpcnN0LmRhcmsnKSxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBzZWxlY3RlZFJhZGlvID09PSAyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ2luY29tcGxldGUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAzLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5yYWRpb01hcEZpcnN0LmluY29tcGxldGUnKSxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBzZWxlY3RlZFJhZGlvID09PSAzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ2RvZXNudE1hdGNoJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogNCxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucmFkaW9NYXBGaXJzdC5kb2VzbnRNYXRjaCcpLFxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IHNlbGVjdGVkUmFkaW8gPT09IDQsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCByYWRpb1NlY29uZCA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ291dHNpZGVTaG9wJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogNSxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucmFkaW9TZWNvbmQub3V0c2lkZVNob3AnKSxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBzZWxlY3RlZFJhZGlvID09PSA1LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ3Nob3BUaWNrZXQnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiA2LFxuICAgICAgICAgICAgICAgIGxhYmVsOiBnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5yYWRpb1NlY29uZC5zaG9wVGlja2V0JyksXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogc2VsZWN0ZWRSYWRpbyA9PT0gNixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdhbm90aGVyQ2VsbCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDcsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnJhZGlvU2Vjb25kLmFub3RoZXJDZWxsJyksXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogc2VsZWN0ZWRSYWRpbyA9PT0gNyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6ICd0ZXN0U2NhbicsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDgsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnJhZGlvU2Vjb25kLnRlc3RTY2FuJyksXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogc2VsZWN0ZWRSYWRpbyA9PT0gOCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPEhlYWRlciBsb2NhbGU9e2xvY2FsZX0vPlxuXG4gICAgICAgICAgICAgICAgPEhlYWQ+XG4gICAgICAgICAgICAgICAgICAgIDx0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS50aXRsZScpfVxuICAgICAgICAgICAgICAgICAgICA8L3RpdGxlPlxuICAgICAgICAgICAgICAgIDwvSGVhZD5cblxuICAgICAgICAgICAgICAgIDxNb2RhbFxuICAgICAgICAgICAgICAgICAgICBub1BhZGRpbmc9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcldpZHRoPVwiNDAlXCJcbiAgICAgICAgICAgICAgICAgICAgc2hvd01vZGFsPXtzaG93TW9kYWx9XG4gICAgICAgICAgICAgICAgICAgIGlzSW1hZ2VNb2RhbD17aXNJbWFnZU1vZGFsfVxuICAgICAgICAgICAgICAgICAgICBjbG9zZU1vZGFsPXt0aGlzLmhhbmRsZUNsb3NlTW9kYWx9PlxuICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDbG9zZU1vZGFsKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5tb2RhbEltYWdlQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPXtzdHlsZXMuY2xvc2VCdXR0b259IHNyYz1cIi9pbWcvY2xvc2UtYnV0dG9uLnN2Z1wiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2VsZWN0ZWRQaWN0dXJlfSBjbGFzc05hbWU9e3N0eWxlcy5tb2RhbEltYWdlfSAvPlxuICAgICAgICAgICAgICAgIDwvTW9kYWw+XG5cbiAgICAgICAgICAgICAgICA8TW9kYWxcbiAgICAgICAgICAgICAgICAgICAgbm9QYWRkaW5nPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyV2lkdGg9XCI2MCVcIlxuICAgICAgICAgICAgICAgICAgICBzaG93TW9kYWw9e3Nob3dSZWplY3RNb2RhbH1cbiAgICAgICAgICAgICAgICAgICAgaXNJbWFnZU1vZGFsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgY2xvc2VNb2RhbD17dGhpcy5jbG9zZVJlamVjdH0+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmNsb3NlUmVqZWN0KCl9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5tb2RhbEltYWdlQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPXtzdHlsZXMuY2xvc2VCdXR0b259IHNyYz1cIi9pbWcvY2xvc2UtYnV0dG9uLnN2Z1wiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGgzPlxuICAgICAgICAgICAgICAgICAgICAgICAge2dldEkxOG5MYWJlbChsb2NhbGUsICdob21lLm1vZGFsLnJlamVjdC5zdWJqZWN0Jyl9XG4gICAgICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyUmFkaW99PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5kaXNwbGF5UmFkaW99PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9NYXBGaXJzdC5tYXAoKGl0ZW06IGFueSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2BpZC0ke2l0ZW0uaWR9LSR7aXRlbS52YWx1ZX1gfSBjbGFzc05hbWU9e3N0eWxlcy5mb3JtQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2l0ZW0uaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmxhYmVsUmFkaW99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpdGVtLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtpdGVtLmNoZWNrZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHBhZGRpbmc6ICc3cHgnIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2l0ZW0uaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlUmFkaW99IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIHN0eWxlPXt7IHBhZGRpbmc6ICc3cHgnIH19IGNsYXNzTmFtZT17c3R5bGVzLmxhYmVsUmFkaW99PntpdGVtLmxhYmVsfTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZGlzcGxheVJhZGlvfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvU2Vjb25kLm1hcCgoaXRlbTogYW55KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17YGlkLSR7aXRlbS5pZH0tJHtpdGVtLnZhbHVlfWB9IGNsYXNzTmFtZT17c3R5bGVzLmZvcm1Db250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17aXRlbS5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMubGFiZWxSYWRpb31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2l0ZW0udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2l0ZW0uY2hlY2tlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgcGFkZGluZzogJzdweCcgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17aXRlbS5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2VSYWRpb30gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgc3R5bGU9e3sgcGFkZGluZzogJzdweCcgfX0gY2xhc3NOYW1lPXtzdHlsZXMubGFiZWxSYWRpb30+e2l0ZW0ubGFiZWx9PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L01vZGFsPlxuICAgICAgICAgICAgICAgIDxMb2FkZXIgc2hvdz17c2hvd0xvYWRlcn0gLz5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5pdGVtTGlzdH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UGFnZVRpdGxlIHRpdGxlPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zaWRlYmFyLnRpdGxlJyl9IC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZm9ybUNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZ0NvbG9yPVwidHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXttaXNzaW9uTGlzdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlTWlzc2lvbkZpbHRlckhhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zaWRlYmFyLmlucHV0Lm1pc3Npb24ubGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZm9ybUNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZ0NvbG9yPVwidHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXt0aGlzLnN0YXRlLnNjYW5GaWx0ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmNoYW5nZVByb2R1Y3RIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2lkZWJhci5pbnB1dC5wcm9kdWN0LmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8aHIgLz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jYXB0dXJlc0xpc3R9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzY2Fucy5tYXAoKHNjYW46IFNjYW4pID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7c2Nhbi5wcm9kdWN0Lmxlbmd0aCA9PT0gMCA/ICcnIDogc3R5bGVzLndpdGhQcm9kdWN0fSR7c2Nhbi5pZCA9PT0gc2VsZWN0ZWRTY2FuSWQgPyBgIGN1cnJlbnQtcHJvZHVjdCAke3N0eWxlcy5jdXJyZW50UHJvZHVjdH1gIDogJyd9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2NhblNlbGVjdGVkSGFuZGxlcihzY2FuLmlkKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17c2Nhbi5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3NjYW4uaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICB7IXNob3dNZXNzYWdlTm9FbGVtZW50cyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnByb2R1Y3RTY2FufT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQmVpbmdWYWxpZGF0ZWQgJiYgIWlzQmVpbmdWYWxpZGF0ZWRCeUN1cnJlbnRVc2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9J3RleHQtZGFuZ2VyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi50b3BCYXIuYmVpbmdWYWxpZGF0ZWQnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zY2FubmVyRGF0YUNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZWxlbWVudH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bG9hZGVkU2Nhbi5zY2FubmVkX2J5LmVtcGxveWVlX251bWJlciA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkU2Nhbi5zY2FubmVkX2J5LmVtcGxveWVlX251bWJlciA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi50b3BCYXIud2l0aG91dE51bWJlcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZWxlbWVudEJvbGR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Z1bGxOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmVsZW1lbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NhcHR1cmVEYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmVsZW1lbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvYWRlZFNjYW4ubWlzc2lvbiA/IGxvYWRlZFNjYW4ubWlzc2lvbi50aXRsZSA6IGdldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnNjYW4udG9wQmFyLndpdGhvdXRNaXNzaW9uJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5kYXRhQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkdGg1MFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuaW1hZ2VMZWZ0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKFwiJHtsb2FkZWRTY2FuLnBpY3R1cmVzLmxlbmd0aCA+IDAgPyBsb2FkZWRTY2FuLnBpY3R1cmVzWzBdLnByb2R1Y3RfcGljdHVyZSA6ICcnfVwiKWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5zZWxlY3RJbWFnZShsb2FkZWRTY2FuLnBpY3R1cmVzWzBdLnByb2R1Y3RfcGljdHVyZSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi5wcm9kdWN0SW1hZ2UubGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWR0aDUwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5pbWFnZVJpZ2h0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKFwiJHtsb2FkZWRTY2FuLnBpY3R1cmVzLmxlbmd0aCA+IDAgPyBsb2FkZWRTY2FuLnBpY3R1cmVzWzBdLnNoZWxmX3BpY3R1cmUgOiAnJ31cIilgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2VsZWN0SW1hZ2UobG9hZGVkU2Nhbi5waWN0dXJlc1swXS5zaGVsZl9waWN0dXJlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9e3N0eWxlcy5wcmljZVRleHR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi5wcmljZUltYWdlLmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkdGgzMFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e2xvYWRlZFNjYW4uYmFyY29kZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDb2xvcj1cIiM2ZDE1MTVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zY2FuLmlucHV0LmJhcmNvZGUubGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuYmFyY29kZUhhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZT17YmFyY29kZUVycm9yTXNnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD17bG9hZGVkU2Nhbi5zcGVjaWFsX3ByaWNlID8gdGFic1NwZWNpYWwuYmFyY29kZSA6IHRhYnMuYmFyY29kZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdpbmRleGVkLWVsZW1lbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZHRoMzBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtsb2FkZWRTY2FuLnByaWNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zY2FuLmlucHV0LnByaWNlLmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnByaWNlSGFuZGxlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlPXtwcmljZUVycm9yTXNnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD17dGFicy5wcmljZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdpbmRleGVkLWVsZW1lbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZHRoMzBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuc3BlY2lhbFByaWNlQ2hlY2tIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtsb2FkZWRTY2FuLnNwZWNpYWxfcHJpY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zY2FuLmlucHV0LnByb21vdGlvblByaWNlLmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PXtsb2FkZWRTY2FuLnNwZWNpYWxfcHJpY2UgPyB0YWJzU3BlY2lhbC5zcGVjaWFsX3ByaWNlIDogdGFicy5zcGVjaWFsX3ByaWNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveENsYXNzTmFtZT0naW5kZXhlZC1lbGVtZW50J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bG9hZGVkU2Nhbi5zcGVjaWFsX3ByaWNlID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2Vjb25kYXJ5QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi5vcHRpb24uc2hvd1BpY3R1cmUnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PXtsb2FkZWRTY2FuLnNwZWNpYWxfcHJpY2UgPyB0YWJzU3BlY2lhbC52aWV3UGljdHVyZSA6IHRhYnMudmlld1BpY3R1cmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2luZGV4ZWQtZWxlbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2VsZWN0SW1hZ2UobG9hZGVkU2Nhbi5waWN0dXJlc1swXS5wcm9tb19waWN0dXJlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zZXBhcmF0b3J9PjwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZHRoNDVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb249e2xvYWRlZFN0b3JlLnN0b3JlSWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zY2FuLmlucHV0LnN0b3JlLmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3N0b3JlTGlzdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlU3RvcmVIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD17bG9hZGVkU2Nhbi5zcGVjaWFsX3ByaWNlID8gdGFic1NwZWNpYWwuc3RvcmUgOiB0YWJzLnN0b3JlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3N0b3JlLWlucHV0IGluZGV4ZWQtZWxlbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2VwYXJhdG9yfT48L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Cb3R0b206ICcwLjVyZW0nIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWNvbmRhcnlCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD17U2Vjb25kYXJ5QnV0dG9uVmFyaWFudC5FcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2dldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnNjYW4ub3B0aW9uLnJlamVjdCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD17bG9hZGVkU2Nhbi5zcGVjaWFsX3ByaWNlID8gdGFic1NwZWNpYWwucmVqZWN0IDogdGFicy5yZWplY3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub3BlblJlamVjdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdpbmRleGVkLWVsZW1lbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJpbWFyeUJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGhpcy5zdGF0ZS5leGlzdFByb2R1Y3QgPyBnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zY2FuLm9wdGlvbi52YWxpZGF0ZScpIDogZ2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi5vcHRpb24udmFsaWRhdGVBbmRBZGQnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9e2xvYWRlZFNjYW4uc3BlY2lhbF9wcmljZSA/IHRhYnNTcGVjaWFsLnZhbGlkYXRlIDogdGFicy52YWxpZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy52YWxpZGF0ZVNjYW5CdXR0b25IYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2luZGV4ZWQtZWxlbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNlcGFyYXRvcn0+PC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj48L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNlcGFyYXRvcn0+PC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvYWRlZFN0b3JlLmFkZHJlc3MgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIndpZHRoMTAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIGhlaWdodDogJzEycmVtJyB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1hcCBsYXQ9e2xhdH0gbG5nPXtsbmd9PjwvTWFwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2VwYXJhdG9yfT48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkdGgxMDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtsb2FkZWRTdG9yZS5hZGRyZXNzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5zY2FuLmlucHV0LmFkZHJlc3MubGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuYWRkcmVzc0hhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PXtsb2FkZWRTY2FuLnNwZWNpYWxfcHJpY2UgPyB0YWJzU3BlY2lhbC5hZGRyZXNzIDogdGFicy5hZGRyZXNzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2luZGV4ZWQtZWxlbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkdGgxMDBcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zZXBhcmF0b3J9PjwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZHRoMTAwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17bG9hZGVkU2Nhbi5jb21tZW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUuc2Nhbi5pbnB1dC5hZGl0aW9uYWxDb21tZW50cy5sYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD17bG9hZGVkU2Nhbi5zcGVjaWFsX3ByaWNlID8gdGFic1NwZWNpYWwuY29tbWVudHMgOiB0YWJzLmNvbW1lbnRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5jb21tZW50SGFuZGxlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdpbmRleGVkLWVsZW1lbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgeyFzaG93TWVzc2FnZU5vRWxlbWVudHMgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5wcm9kdWN0RGF0YX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2V4aXN0UHJvZHVjdCA/IHN0eWxlcy5wcm9kdWN0RGF0YUNvbnRhaW5lckNvbXBsZXRlZCA6IHN0eWxlcy5wcm9kdWN0RGF0YUNvbnRhaW5lcn0+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtzdHlsZXMudGl0bGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2V4aXN0UHJvZHVjdCA/IFwiXCIgOiBnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5wcm9kdWN0LnRpdGxlJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWR0aDEwMFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e2xvYWRlZFByb2R1Y3QubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0JsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5wcm9kdWN0LmlucHV0Lm5hbWUubGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdDb2xvcj17ZXhpc3RQcm9kdWN0ID8gXCJCbGFja1wiIDogXCJcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDb2xvcj17ZXhpc3RQcm9kdWN0ID8gXCIjRkZGXCIgOiBcIlwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj17ZXhpc3RQcm9kdWN0ID8gXCJXaGl0ZVwiIDogXCJcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvZHVjdE5hbWVIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZXhpc3RQcm9kdWN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U9e3Byb2R1Y3ROYW1lRXJyb3JNc2d9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PXtsb2FkZWRTY2FuLnNwZWNpYWxfcHJpY2UgPyB0YWJzU3BlY2lhbC5wcm9kdWN0TmFtZSA6IHRhYnMucHJvZHVjdE5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0naW5kZXhlZC1lbGVtZW50J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWR0aDEwMFwiIHN0eWxlPXt7IG1hcmdpblRvcDogJzUlJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlVmlzICYmIDxpbWcgY2xhc3NOYW1lPXtzdHlsZXMuaW1hZ2V9IHNyYz17aW1hZ2VWaXN9IG9uQ2xpY2s9eygpID0+IHRoaXMuc2VsZWN0SW1hZ2UoaW1hZ2VWaXMpfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHshZXhpc3RQcm9kdWN0ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBtYXJnaW46ICcxZW0gMGVtIDNlbSAwZW0nIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlY29uZGFyeUJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5wcm9kdWN0Lm9wdGlvbi5jaGFuZ2VJbWFnZScpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PXtsb2FkZWRTY2FuLnNwZWNpYWxfcHJpY2UgPyB0YWJzU3BlY2lhbC5wcm9kdWN0SW1hZ2UgOiB0YWJzLnByb2R1Y3RJbWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2luZGV4ZWQtZWxlbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IHRoaXMucHJvZHVjdFJlZi5jbGljaygpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnbm9uZScgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlUHJvZHVjdFBpY3R1cmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXtyZWYgPT4gdGhpcy5wcm9kdWN0UmVmID0gcmVmfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNlcGFyYXRvcn0+PC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkdGg0NVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e2V4aXN0UHJvZHVjdCA/IGxvYWRlZFByb2R1Y3QuYmFyY29kZSA6IGxvYWRlZFNjYW4uYmFyY29kZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0JsYWNrPXtleGlzdFByb2R1Y3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyQ29sb3I9e2V4aXN0UHJvZHVjdCA/ICdXaGl0ZScgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdDb2xvcj17ZXhpc3RQcm9kdWN0ID8gJ0JsYWNrJyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj17ZXhpc3RQcm9kdWN0ID8gJ1doaXRlJyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucHJvZHVjdC5pbnB1dC5iYXJjb2RlLmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmJhcmNvZGVIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD17bG9hZGVkU2Nhbi5zcGVjaWFsX3ByaWNlID8gdGFic1NwZWNpYWwucHJvZHVjdEJhcmNvZGUgOiB0YWJzLnByb2R1Y3RCYXJjb2RlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNlcGFyYXRvcn0+PC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtsb2FkZWRQcm9kdWN0LnF1YW50aXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0JsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDb2xvcj17ZXhpc3RQcm9kdWN0ID8gJ1doaXRlJyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZ0NvbG9yPXtleGlzdFByb2R1Y3QgPyAnQmxhY2snIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPXtleGlzdFByb2R1Y3QgPyAnV2hpdGUnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5wcm9kdWN0LmlucHV0LmFtb3VudC5sYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5xdWFudGl0eUhhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtleGlzdFByb2R1Y3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PXtsb2FkZWRTY2FuLnNwZWNpYWxfcHJpY2UgPyB0YWJzU3BlY2lhbC5wcm9kdWN0UXVhbnRpdHkgOiB0YWJzLnByb2R1Y3RRdWFudGl0eX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdpbmRleGVkLWVsZW1lbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2VwYXJhdG9yfT48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXV0b2NvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFN1Z2dlc3Rpb25zPXsodmFsdWUpID0+IHRoaXMuZ2V0U3VnZ2VzdGlvbnModmFsdWUsIGdyb3VwTGlzdCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFN1Z2dlc3Rpb25WYWx1ZT17dGhpcy5nZXRTdWdnZXN0aW9uVmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclN1Z2dlc3Rpb249e3RoaXMucmVuZGVyU3VnZ2VzdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TdWdnZXN0aW9uU2VsZWN0ZWQ9e3RoaXMub25TZWxlY3RHcm91cH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9e2xvYWRlZFNjYW4uc3BlY2lhbF9wcmljZSA/IHRhYnNTcGVjaWFsLnByb2R1Y3RHcm91cCA6IHRhYnMucHJvZHVjdEdyb3VwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZXhpc3RQcm9kdWN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VXaGl0ZVRleHQ9e2V4aXN0UHJvZHVjdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2dldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnByb2R1Y3QuaW5wdXQuZ3JvdXAubGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtsb2FkZWRHcm91cE5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TGluZT17cmVzZXRMaW5lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zZXBhcmF0b3J9PjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE9wdGlvbj17bG9hZGVkUHJvZHVjdC50eXBlIHx8ICcwJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2dldEkxOG5MYWJlbChsb2NhbGUsICdob21lLnByb2R1Y3QuaW5wdXQudHlwZS5sYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZ0NvbG9yPXtleGlzdFByb2R1Y3QgPyAnQmxhY2snIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPXtleGlzdFByb2R1Y3QgPyAnV2hpdGUnIDogJyM1NjU2NTYnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlckNvbG9yPXtleGlzdFByb2R1Y3QgPyAnV2hpdGUnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3RoaXMudHlwZUZpbHRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlVHlwZUhhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e2V4aXN0UHJvZHVjdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlPXtwcm9kdWN0VHlwZUVycm9yTXNnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleD17bG9hZGVkU2Nhbi5zcGVjaWFsX3ByaWNlID8gdGFic1NwZWNpYWwucHJvZHVjdFR5cGUgOiB0YWJzLnByb2R1Y3RUeXBlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2luZGV4ZWQtZWxlbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWR0aDQ1XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0T3B0aW9uPXtsb2FkZWRCcmFuZCAmJiBsb2FkZWRCcmFuZC5pZCB8fCAnMCd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5wcm9kdWN0LmlucHV0LmJyYW5kLmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJnQ29sb3I9e2V4aXN0UHJvZHVjdCA/ICdCbGFjaycgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e2V4aXN0UHJvZHVjdCA/ICdXaGl0ZScgOiAnIzU2NTY1Nid9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyQ29sb3I9e2V4aXN0UHJvZHVjdCA/ICdXaGl0ZScgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17YnJhbmRMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5jaGFuZ2VCcmFuZEhhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ9e2V4aXN0UHJvZHVjdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlPXtwcm9kdWN0QnJhbmRFcnJvck1zZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9e2xvYWRlZFNjYW4uc3BlY2lhbF9wcmljZSA/IHRhYnNTcGVjaWFsLnByb2R1Y3RCcmFuZCA6IHRhYnMucHJvZHVjdEJyYW5kfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2luZGV4ZWQtZWxlbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2VwYXJhdG9yfT48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb249e2xvYWRlZFVuaXQuaWQgfHwgJzAnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucHJvZHVjdC5pbnB1dC51bml0LmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJnQ29sb3I9e2V4aXN0UHJvZHVjdCA/ICdCbGFjaycgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e2V4aXN0UHJvZHVjdCA/ICdXaGl0ZScgOiAnIzU2NTY1Nid9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyQ29sb3I9e2V4aXN0UHJvZHVjdCA/ICdXaGl0ZScgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17dW5pdExpc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmNoYW5nZVVuaXRIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkPXtleGlzdFByb2R1Y3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZT17cHJvZHVjdFVuaXRFcnJvck1zZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9e2xvYWRlZFNjYW4uc3BlY2lhbF9wcmljZSA/IHRhYnNTcGVjaWFsLnByb2R1Y3RVbml0IDogdGFicy5wcm9kdWN0VW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdpbmRleGVkLWVsZW1lbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNlcGFyYXRvcn0+PC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXV0b2NvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFN1Z2dlc3Rpb25zPXsodmFsdWUpID0+IHRoaXMuZ2V0U3VnZ2VzdGlvbnModmFsdWUsIGxpbmVMaXN0RmlsdGVyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3VnZ2VzdGlvblZhbHVlPXt0aGlzLmdldFN1Z2dlc3Rpb25WYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyU3VnZ2VzdGlvbj17dGhpcy5yZW5kZXJTdWdnZXN0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN1Z2dlc3Rpb25TZWxlY3RlZD17dGhpcy5vblNlbGVjdExJbmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PXtsb2FkZWRTY2FuLnNwZWNpYWxfcHJpY2UgPyB0YWJzU3BlY2lhbC5wcm9kdWN0TGluZSA6IHRhYnMucHJvZHVjdExpbmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtleGlzdFByb2R1Y3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZVdoaXRlVGV4dD17ZXhpc3RQcm9kdWN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUucHJvZHVjdC5pbnB1dC5saW5lLmxhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17bG9hZGVkTGluZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TGluZT17cmVzZXRMaW5lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9e3N0eWxlcy50aXRsZX0+SGlzdG9yaWFsPC9wPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Ake3N0eWxlcy5oaXN0b3J5Q29udGFpbmVyfSAke2V4aXN0UHJvZHVjdCA/ICdwcm9kdWN0SGlzdG9yeUNvbnRhaW5lcicgOiAnJ31gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17ZXhpc3RQcm9kdWN0ID8geyBiYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycgfSA6IHsgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNxdWFyZUNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3F1YXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZT17cmVjZW50UHJpY2VEYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtnZXRJMThuTGFiZWwobG9jYWxlLCAnaG9tZS5oaXN0b3J5LnJlY2VudCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtleGlzdFByb2R1Y3QgJiYgbG9hZGVkUmVjZW50UHJpY2UucHJpY2UgIT09IDAgPyBsb2FkZWRSZWNlbnRQcmljZS5wcmljZSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdDb2xvcj17ZXhpc3RQcm9kdWN0ICYmIGxvYWRlZFJlY2VudFByaWNlLnByaWNlICE9PSAwID8gJyMzZjRkNWUnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e2V4aXN0UHJvZHVjdCAmJiBsb2FkZWRSZWNlbnRQcmljZS5wcmljZSAhPT0gMCA/ICd3aGl0ZScgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc3F1YXJlQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcXVhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlPXttYXhQcmljZURhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2dldEkxOG5MYWJlbChsb2NhbGUsICdob21lLmhpc3RvcnkubW9zdEV4cGVuc2l2ZScpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtleGlzdFByb2R1Y3QgJiYgbG9hZGVkTWF4UHJpY2UucHJpY2UgIT09IDAgPyBsb2FkZWRNYXhQcmljZS5wcmljZSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdDb2xvcj17ZXhpc3RQcm9kdWN0ICYmIGxvYWRlZE1heFByaWNlLnByaWNlICE9PSAwID8gJyNmNTVkNWQnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e2V4aXN0UHJvZHVjdCAmJiBsb2FkZWRNYXhQcmljZS5wcmljZSAhPT0gMCA/ICd3aGl0ZScgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc3F1YXJlQ29udGFpbmVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcXVhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlPXttaW5QcmljZURhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2dldEkxOG5MYWJlbChsb2NhbGUsICdob21lLmhpc3RvcnkuY2hlYXBlc3QnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZXhpc3RQcm9kdWN0ICYmIGxvYWRlZE1pblByaWNlLnByaWNlICE9PSAwID8gbG9hZGVkTWluUHJpY2UucHJpY2UgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJnQ29sb3I9e2V4aXN0UHJvZHVjdCAmJiBsb2FkZWRNaW5QcmljZS5wcmljZSAhPT0gMCA/ICcjNzFhNGU0JyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPXtleGlzdFByb2R1Y3QgJiYgbG9hZGVkTWluUHJpY2UucHJpY2UgIT09IDAgPyAnd2hpdGUnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnNxdWFyZUNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3F1YXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZT17bWluUHJpY2VQcm9tb0RhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2dldEkxOG5MYWJlbChsb2NhbGUsICdob21lLmhpc3RvcnkuY2hlYXBlc3RXaXRoUHJvbW90aW9uJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2V4aXN0UHJvZHVjdCAmJiBsb2FkZWRNaW5QcmljZVByb21vdGlvbi5wcmljZSAhPT0gMCA/IGxvYWRlZE1pblByaWNlUHJvbW90aW9uLnByaWNlIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZ0NvbG9yPXtleGlzdFByb2R1Y3QgJiYgbG9hZGVkTWluUHJpY2VQcm9tb3Rpb24ucHJpY2UgIT09IDAgPyAnIzQ4YTg1OCcgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj17ZXhpc3RQcm9kdWN0ICYmIGxvYWRlZE1pblByaWNlUHJvbW90aW9uLnByaWNlICE9PSAwID8gJ3doaXRlJyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgICB7c2hvd01lc3NhZ2VOb0VsZW1lbnRzICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWVzc2FnZU5vRWxlbWVudHNDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj57Z2V0STE4bkxhYmVsKGxvY2FsZSwgJ2hvbWUud2VsY29tZScpfTwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8VG9hc3RDb250YWluZXIgYWxpZ249XCJsZWZ0XCIgcG9zaXRpb249XCJib3R0b21cIiAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmNvbnN0IHdpdGhSb3V0ZXIgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKVxuICAgIHJldHVybiA8SG9tZVBhZ2Ugey4uLnByb3BzfSByb3V0ZXI9e3JvdXRlcn0gLz5cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjtcbiIsIlxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGJhc2VVUkwgfSBmcm9tICcuL2Jhc2VVcmwnO1xuXG5leHBvcnQgZGVmYXVsdCBheGlvcy5jcmVhdGUoe1xuICBiYXNlVVJMLHdpdGhDcmVkZW50aWFsczogZmFsc2VcbiAgLy90aW1lb3V0OiAxMDAwXG59KSIsImV4cG9ydCBjb25zdCBiYXNlVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTDtcbmV4cG9ydCBjb25zdCBiYXNlVVJMR2VvcmVmID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfR0VPUkVGX0FQSTtcbmV4cG9ydCBjb25zdCBnZW9yZWZBcGlLZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19HRU9SRUZfQVBJX0tFWTtcbiIsImltcG9ydCBhcGkgZnJvbSAnLi9hcGknXG5pbXBvcnQgeyBnZXRIZWFkZXIgfSBmcm9tICcuL3Nlc3Npb24tbWFuYWdlbWVudCdcbmltcG9ydCB7YmFzZVVSTEdlb3JlZiwgZ2VvcmVmQXBpS2V5fSBmcm9tICcuL2Jhc2VVcmwnO1xuXG50eXBlIE9wdGlvbnMgPVxue3ZhbHVlOiBzdHJpbmcsIGxhYmVsOiBzdHJpbmd9XG5cbnR5cGUgTGluZSA9IHt2YWx1ZTogc3RyaW5nLCBsYWJlbDogc3RyaW5nLCBncm91cDogc3RyaW5nIH1cblxuY29uc3QgZ2V0Um9sZXNDYXRhbG9nID0gYXN5bmMgKCk6IFByb21pc2U8QXJyYXk8T3B0aW9ucz4+ID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkuZ2V0KCdhcGkvcm9sZXMnLCB7IGhlYWRlcnM6IGdldEhlYWRlcigpIH0pXG4gICAgcmV0dXJuIHJlcy5kYXRhLmRhdGEubWFwKChyb2w6IHtuYW1lOiBzdHJpbmd9KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcm9sLm5hbWUsXG4gICAgICAgICAgICBsYWJlbDogcm9sLm5hbWUsXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5jb25zdCBnZXRSZWdpb25zQ2F0YWxvZyA9IGFzeW5jICgpOiBQcm9taXNlPEFycmF5PE9wdGlvbnM+PiA9PiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmdldCgnYXBpL3JlZ2lvbnMnLCB7IGhlYWRlcnM6IGdldEhlYWRlcigpIH0pXG4gICAgcmV0dXJuICByZXMuZGF0YS5kYXRhLm1hcCgocmVnaW9uOiB7bmFtZTogc3RyaW5nLCBpZDogbnVtYmVyfSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlZ2lvbi5pZCxcbiAgICAgICAgICAgIGxhYmVsOiByZWdpb24ubmFtZSxcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNvbnN0IGdldFJlZ2lvbnNMYWJlbENhdGFsb2cgPSBhc3luYyAoKTogUHJvbWlzZTxBcnJheTxPcHRpb25zPj4gPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5nZXQoJ2FwaS9yZWdpb25zJywgeyBoZWFkZXJzOiBnZXRIZWFkZXIoKSB9KVxuICAgIHJldHVybiAgcmVzLmRhdGEuZGF0YS5tYXAoKHJlZ2lvbjoge25hbWU6IHN0cmluZywgaWQ6IG51bWJlcn0pID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWdpb24ubmFtZSxcbiAgICAgICAgICAgIGxhYmVsOiByZWdpb24ubmFtZSxcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNvbnN0IGdldExhYmVsc0NhdGFsb2cgPSBhc3luYyAoKTogUHJvbWlzZTxBcnJheTxPcHRpb25zPj4gPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5nZXQoJ2FwaS9sYWJlbHMnLCB7IGhlYWRlcnM6IGdldEhlYWRlcigpIH0pXG4gICAgcmV0dXJuIHJlcy5kYXRhLmRhdGEubWFwKChsYWJlbDoge2lkOiBudW1iZXIsIG5hbWU6IHN0cmluZ30pID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBsYWJlbC5pZCxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbC5uYW1lXG4gICAgICAgIH1cbiAgICB9KVxuXG59XG5cbmNvbnN0IGdldEdyb3Vwc0NhdGFsb2cgPSBhc3luYyAoKTogUHJvbWlzZTxBcnJheTxPcHRpb25zPj4gPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5nZXQoJ2FwaS9ncm91cHMvbGlzdCcsIHsgaGVhZGVyczogZ2V0SGVhZGVyKCkgfSlcbiAgICByZXR1cm4gcmVzLmRhdGEuZ3JvdXAubWFwKChncm91cDoge2lkOiBudW1iZXIsIG5hbWU6IHN0cmluZ30pID0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGdyb3VwLmlkLFxuICAgICAgICAgICAgbGFiZWw6IGdyb3VwLm5hbWVcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNvbnN0IGdldE1pc3Npb25zQ2F0YWxvZyA9IGFzeW5jICgpOiBQcm9taXNlPEFycmF5PE9wdGlvbnM+PiA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgdGV4dFNlYXJjaDogJycsXG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5wb3N0KCdhcGkvbWlzc2lvbnMvbGlzdCcsIGRhdGEsIHsgaGVhZGVyczogZ2V0SGVhZGVyKCkgfSlcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocmVzLmRhdGEpLm1hcChtaXNzaW9uS2V5ID0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IG1pc3Npb25LZXksXG4gICAgICAgICAgICBsYWJlbDogcmVzLmRhdGFbbWlzc2lvbktleV1cbiAgICAgICAgfVxuICAgIH0gKVxufVxuY29uc3QgZ2V0TWlzc2lvbnNWYWxpZGF0aW9uID0gYXN5bmMgKCk6IFByb21pc2U8QXJyYXk8T3B0aW9ucz4+ID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkuZ2V0KCdhcGkvbWlzc2lvbnMvbGlzdC12YWxpZGF0aW9uJywgeyBoZWFkZXJzOiBnZXRIZWFkZXIoKSB9KVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhyZXMuZGF0YSkubWFwKG1pc3Npb25LZXkgPT57XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogbWlzc2lvbktleSxcbiAgICAgICAgICAgIGxhYmVsOiByZXMuZGF0YVttaXNzaW9uS2V5XVxuICAgICAgICB9XG4gICAgfSApXG59XG5cbmNvbnN0IGdldE1pc3Npb25zQ2F0YWxvZ0J5TWlzc2lvbiA9IGFzeW5jIChtaXNzaW9uOiBzdHJpbmcpOiBQcm9taXNlPEFycmF5PE9wdGlvbnM+PiA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgdGV4dFNlYXJjaDogbWlzc2lvbixcbiAgICB9XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBhcGkucG9zdCgnYXBpL21pc3Npb25zL2xpc3QnLCBkYXRhLCB7IGhlYWRlcnM6IGdldEhlYWRlcigpIH0sKVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhyZXMuZGF0YSkubWFwKG1pc3Npb25LZXkgPT57XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogbWlzc2lvbktleSxcbiAgICAgICAgICAgIGxhYmVsOiByZXMuZGF0YVttaXNzaW9uS2V5XVxuICAgICAgICB9XG4gICAgfSApXG59XG5cbmNvbnN0IGdldFVuaXRzQ2F0YWxvZyA9IGFzeW5jICgpOiBQcm9taXNlPEFycmF5PE9wdGlvbnM+PiA9PiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmdldCgnYXBpL3VuaXRzL2xpc3QnLCB7IGhlYWRlcnM6IGdldEhlYWRlcigpIH0pXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlcy5kYXRhLmRhdGEpLm1hcCh1bml0S2V5ID0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHVuaXRLZXksXG4gICAgICAgICAgICBsYWJlbDogcmVzLmRhdGEuZGF0YVt1bml0S2V5XVxuICAgICAgICB9XG4gICAgfSApXG59XG5cbmNvbnN0IGdldEJyYW5kc0NhdGFsb2cgPSBhc3luYyAoKTogUHJvbWlzZTxBcnJheTxPcHRpb25zPj4gPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5nZXQoJ2FwaS9icmFuZHMvbGlzdCcsIHsgaGVhZGVyczogZ2V0SGVhZGVyKCkgfSlcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocmVzLmRhdGEuZGF0YSkubWFwKGJyYW5kS2V5ID0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGJyYW5kS2V5LFxuICAgICAgICAgICAgbGFiZWw6IHJlcy5kYXRhLmRhdGFbYnJhbmRLZXldXG4gICAgICAgIH1cbiAgICB9IClcbn1cblxuY29uc3QgZ2V0U3RvcmVzQ2F0YWxvZyA9IGFzeW5jICgpOiBQcm9taXNlPEFycmF5PE9wdGlvbnM+PiA9PiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXBpLmdldCgnYXBpL3N0b3JlL2xpc3QnLCB7IGhlYWRlcnM6IGdldEhlYWRlcigpIH0pXG4gICAgY29uc3Qgc3RvcmVzID0gT2JqZWN0LmtleXMocmVzLmRhdGEpLm1hcChzdG9yZUtleSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogc3RvcmVLZXksXG4gICAgICAgICAgICBsYWJlbDogcmVzLmRhdGFbc3RvcmVLZXldXG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgc3RvcmVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgaWYgKGEubGFiZWwudG9Mb3dlckNhc2UoKSA8IGIubGFiZWwudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYS5sYWJlbC50b0xvd2VyQ2FzZSgpID4gYi5sYWJlbC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDBcbiAgICB9KVxuXG4gICAgcmV0dXJuIHN0b3Jlc1xufVxuXG5jb25zdCBnZXRMaW5lc0NhdGFsb2cgPSBhc3luYyAoKTogUHJvbWlzZTxBcnJheTxMaW5lPj4gPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFwaS5nZXQoJ2FwaS9saW5lcy9saXN0JywgeyBoZWFkZXJzOiBnZXRIZWFkZXIoKSB9KVxuICAgIHJldHVybiByZXMuZGF0YS5saW5lcy5tYXAoKGxpbmU6IHtpZDogbnVtYmVyLCBuYW1lOiBzdHJpbmcsIGlkX2dyb3VwOiBudW1iZXJ9KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogbGluZS5pZCxcbiAgICAgICAgICAgIGxhYmVsOiBsaW5lLm5hbWUsXG4gICAgICAgICAgICBncm91cDogbGluZS5pZF9ncm91cCxcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNvbnN0IGdldEdlb2xvY2F0aW9uQ2F0YWxvZyA9IGFzeW5jICgpOiBQcm9taXNlPEFycmF5PExpbmU+PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkoe1xuICAgICAgICB1cmw6IFwiYXBpL3BsYWNlc1wiLFxuICAgICAgICBiYXNlVVJMOiBiYXNlVVJMR2VvcmVmLFxuICAgICAgICBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IGBBcGktS2V5ICR7Z2VvcmVmQXBpS2V5fWAgfSxcbiAgICB9KVxuICAgIGxldCB0cmFuc2Zvcm1HZW9sb2NhdGlvbiA9IHJlc3BvbnNlPy5kYXRhPy5kYXRhXG4gICAgdHJhbnNmb3JtR2VvbG9jYXRpb24gPSB0cmFuc2Zvcm1HZW9sb2NhdGlvbi5tYXAoZ2VvbG9jYXRpb24gPT4ge1xuICAgICAgICByZXR1cm4gey4uLmdlb2xvY2F0aW9uLCB2YWx1ZTogZ2VvbG9jYXRpb24uaWQsIGxhYmVsOiBnZW9sb2NhdGlvbi5uYW1lfVxuICAgIH0pXG5cbiAgICByZXR1cm4gdHJhbnNmb3JtR2VvbG9jYXRpb25cbn1cblxuZXhwb3J0IHtcbiAgICBnZXRSb2xlc0NhdGFsb2csXG4gICAgZ2V0UmVnaW9uc0NhdGFsb2csXG4gICAgZ2V0TGFiZWxzQ2F0YWxvZyxcbiAgICBnZXRHcm91cHNDYXRhbG9nLFxuICAgIGdldE1pc3Npb25zQ2F0YWxvZyxcbiAgICBnZXRNaXNzaW9uc1ZhbGlkYXRpb24sXG4gICAgZ2V0VW5pdHNDYXRhbG9nLFxuICAgIGdldEJyYW5kc0NhdGFsb2csXG4gICAgZ2V0U3RvcmVzQ2F0YWxvZyxcbiAgICBnZXRMaW5lc0NhdGFsb2csXG4gICAgZ2V0TWlzc2lvbnNDYXRhbG9nQnlNaXNzaW9uLFxuICAgIGdldEdlb2xvY2F0aW9uQ2F0YWxvZyxcbiAgICBnZXRSZWdpb25zTGFiZWxDYXRhbG9nLFxufVxuIiwiaW1wb3J0IHsgaXNEYXRlLCBpc1ZhbGlkLCBmb3JtYXQsIHBhcnNlIH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0ICogYXMgbG9jYWxlcyBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xuaW1wb3J0IHsgZ2V0TG9jYWxlIH0gZnJvbSAnLi9zZXNzaW9uLW1hbmFnZW1lbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZVN0cjogc3RyaW5nKSB7XG4gICAgaWYgKCFkYXRlU3RyIHx8IGRhdGVTdHIudHJpbSgpID09PSAnLScpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGxvY2FsZSA9IGdldExvY2FsZSgpO1xuICAgIGxvY2FsZSA9IGxvY2FsZSAgPT09ICdlbicgPyAnZW5VUycgOiBsb2NhbGU7XG5cbiAgICBjb25zdCBwYXJzZWRTaG9ydCA9IHBhcnNlKGRhdGVTdHIsICdkZC9NTU0veXl5eScsIG5ldyBEYXRlKCkpO1xuXG4gICAgaWYgKGlzRGF0ZShwYXJzZWRTaG9ydCkgJiYgaXNWYWxpZChwYXJzZWRTaG9ydCkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdChwYXJzZWRTaG9ydCwgJ2RkL01NTU0veXl5eScsIHsgbG9jYWxlOiBsb2NhbGVzW2xvY2FsZV0gfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VkTG9uZyA9IHBhcnNlKGRhdGVTdHIsICd5eXl5LU1NLWRkIEhIOm1tOnNzJywgbmV3IERhdGUoKSk7XG5cbiAgICBpZiAoaXNEYXRlKHBhcnNlZExvbmcpICYmIGlzVmFsaWQocGFyc2VkTG9uZykpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdChwYXJzZWRMb25nLCAnZGQvTU1NTS95eXl5JywgeyBsb2NhbGU6IGxvY2FsZXNbbG9jYWxlXSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBjb25zdCBwaG90b1VybCA9ICdodHRwczovL2xhbXB0M2JkaWFnLmJsb2IuY29yZS53aW5kb3dzLm5ldC9wcmljZWNoZWNrdjInXG4iLCJpbXBvcnQgUm91dGVyIGZyb20gJ25leHQvcm91dGVyJ1xuXG5jb25zdCBjcmVhdGVTZXNzaW9uID0gKHRva2VuOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcm9sOiBBcnJheTxzdHJpbmc+LCBwcm9maWxlUGljdHJlOiBzdHJpbmcsIGlkOiBzdHJpbmcsIGRhcmtfdGhlbWU/OiBudW1iZXIsIHRoZW1lPzogYW55LCBsb2dvPzogc3RyaW5nLCAgbG9jYWxlPzogc3RyaW5nKSA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgdG9rZW4pXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ25hbWUnLCBuYW1lKVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdyb2wnLCByb2wuam9pbignfCcpKVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpZCcsIGlkKVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdkYXJrX3RoZW1lJywgZGFya190aGVtZS50b1N0cmluZygpKVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsb2NhbGUnLCBsb2NhbGUpXG5cbiAgICBpZiAodGhlbWUgIT09IG51bGwgfHwgIXRoZW1lKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aGVtZScsIEpTT04uc3RyaW5naWZ5KHRoZW1lKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RoZW1lJywgSlNPTi5zdHJpbmdpZnkoe30pKTtcbiAgICB9XG4gICAgaWYgKHByb2ZpbGVQaWN0cmUgJiYgcHJvZmlsZVBpY3RyZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9maWxlUGljdHVyZScsIGBodHRwczovL2Nkbi1wcmljZWNoZWNrLnNmbzIuZGlnaXRhbG9jZWFuc3BhY2VzLmNvbS8ke3Byb2ZpbGVQaWN0cmV9YClcbiAgICB9XG4gICAgaWYobG9nbyAmJiBsb2dvLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xvZ28nLCBgaHR0cHM6Ly9sYW1wdDNiZGlhZy5ibG9iLmNvcmUud2luZG93cy5uZXQvcHJpY2VjaGVja3YyLyR7bG9nb31gKSBcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbG9nbycsIGAvaW1nL2xvZ28ucG5nYCkgXG4gICAgfVxufVxuXG5jb25zdCBkZWxldGVTZXNzaW9uID0gKCkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdsb2NhbGUnKVxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdkYXJrX3RoZW1lJylcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9rZW4nKVxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCduYW1lJylcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgncm9sJylcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbG9nbycsIGAvaW1nL2xvZ28ucG5nYCkgXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Byb2ZpbGVQaWN0dXJlJylcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndGhlbWUnKVxufVxuXG5jb25zdCBnZXRUb2tlbiA9ICgpOiBzdHJpbmcgfCBudWxsID0+IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpXG5cblxuY29uc3QgZ2V0TmFtZSA9ICgpOiBzdHJpbmcgfCBudWxsID0+IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCduYW1lJylcblxuY29uc3QgZ2V0SWQgPSAoKTogc3RyaW5nIHwgbnVsbCA9PiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaWQnKVxuXG5jb25zdCBnZXREYXJrVGhlbWUgPSAoKTogYW55ID0+IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdkYXJrX3RoZW1lJylcbmNvbnN0IGdldExvY2FsZSA9ICgpOiBhbnkgPT4ge1xuICAgIGNvbnN0IGlzQnJvd3NlciA9ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgY29uc3QgaGFzTG9jYWxlID0gKCkgPT4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvY2FsZScpIHx8IGZhbHNlXG5cbiAgICBsZXQgbG9jYWxlID0gJ2VzJztcblxuICAgIGlmIChpc0Jyb3dzZXIoKSAmJiBoYXNMb2NhbGUoKSkge1xuICAgICAgICBsb2NhbGUgPSAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xvY2FsZScpIHx8IGxvY2FsZVxuICAgIH1cblxuICAgIHJldHVybiBsb2NhbGVcbn1cblxuY29uc3QgZ2V0UHJvZmlsZVBpY3R1cmUgPSAoKTogc3RyaW5nIHwgbnVsbCA9PiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvZmlsZVBpY3R1cmUnKVxuXG5jb25zdCBnZXRSb2xlcyA9ICgpOiBBcnJheTxzdHJpbmc+IHwgbnVsbCA9PiB7XG4gICAgY29uc3Qgcm9sZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncm9sJylcbiAgICBpZiAocm9sZXMpXG4gICAgICAgIHJldHVybiByb2xlcy5zcGxpdCgnfCcpXG5cbiAgICByZXR1cm4gbnVsbFxufVxuXG5jb25zdCB2YWxpZGF0ZVNlc3Npb24gPSAobmV3Um91dGU/OiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpKSB7XG4gICAgICAgIFJvdXRlci5wdXNoKCcvbG9naW4nKVxuICAgIH0gZWxzZSBpZiAobmV3Um91dGUpIHtcbiAgICAgICAgUm91dGVyLnB1c2gobmV3Um91dGUpXG4gICAgfVxufVxuXG5jb25zdCBnZXRIZWFkZXIgPSAoKTogeyBBdXRob3JpemF0aW9uOiBzdHJpbmcgfSA9PiB7XG4gICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKVxuICAgIHJldHVybiB7IEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbn1gIH1cbn1cblxuY29uc3QgdmFsaWRhdGVJc0FuYWx5c3QgPSAoKSA9PiB7XG4gICAgbGV0IHJvbGUgPSAnJztcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXG4gICAgICAgIHJvbGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncm9sJyk7XG5cbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IHJvbGUgPT09ICdBbmFsaXN0YSc7XG4gICAgcmV0dXJuIHZhbGlkYXRpb247XG59XG5cbmNvbnN0IHZhbGlkYXRlSXNBZG1pbiA9ICgpID0+IHtcbiAgICBsZXQgcm9sZSA9ICcnO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICAgICAgcm9sZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyb2wnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvbGUgPT09ICdBZG1pbic7XG59XG5cbmNvbnN0IGdldExvZ28gPSAoKSA9PiB7XG4gICAgbGV0IGxvZ28gPSBcIi9pbWcvbG9nby5wbmdcIjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXG4gICAgICAgIGxvZ28gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbG9nbycpO1xuICAgICAgICByZXR1cm4gbG9nbztcbiAgICB9XG4gICAgcmV0dXJuIGxvZ287XG59XG5jb25zdCBJc0N1c3RvbVRoZW1lID0gKCkgPT4ge1xuICAgIGxldCBpc0N1c3RvbSA9IGZhbHNlO1xuICAgIGxldCB0aGVtZSA9IFwiXCI7XG4gICAgbGV0IG9ialRoZW1lID0ge31cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjb25zdCBoYXNEYXJrVGhlbWUgPSBnZXREYXJrVGhlbWUoKSA9PT0gJzEnID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB0aGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpO1xuICAgICAgICBpZiAodGhlbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIG9ialRoZW1lID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGhlbWUnKSkgfHwge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMob2JqVGhlbWUpLmxlbmd0aCAhPT0gMCAmJiAhaGFzRGFya1RoZW1lKSB7XG4gICAgICAgICAgICBpc0N1c3RvbSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gaXNDdXN0b207XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzQ3VzdG9tO1xufVxuXG5jb25zdCBnZXRUaGVtZSA9ICgpID0+IHtcbiAgICBsZXQgdGhlbWUgPSBcIlwiO1xuICAgIGxldCBvYmpUaGVtZSA9IHt9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHRoZW1lICE9PSBcInVuZGVmaW5lZFwiIHx8ICF0aGVtZSkge1xuICAgICAgICAgICAgb2JqVGhlbWUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0aGVtZScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmpUaGVtZTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialRoZW1lO1xufVxuXG5leHBvcnQge1xuICAgIGdldExvZ28sXG4gICAgSXNDdXN0b21UaGVtZSxcbiAgICBjcmVhdGVTZXNzaW9uLFxuICAgIGRlbGV0ZVNlc3Npb24sXG4gICAgZ2V0VG9rZW4sXG4gICAgZ2V0TmFtZSxcbiAgICBnZXRQcm9maWxlUGljdHVyZSxcbiAgICBnZXRSb2xlcyxcbiAgICB2YWxpZGF0ZVNlc3Npb24sXG4gICAgZ2V0SGVhZGVyLFxuICAgIGdldElkLFxuICAgIGdldERhcmtUaGVtZSxcbiAgICBnZXRMb2NhbGUsXG4gICAgdmFsaWRhdGVJc0FuYWx5c3QsXG4gICAgZ2V0VGhlbWUsXG4gICAgdmFsaWRhdGVJc0FkbWluLFxufVxuIiwiY29uc3QgTGlnaHRlbkRhcmtlbkNvbG9yID0gKGNvbDogc3RyaW5nLCBhbXQ6IG51bWJlcikgPT4ge1xuICAgIGxldCB1c2VQb3VuZCA9IGZhbHNlO1xuXG4gICAgaWYgKGNvbFswXSA9PSBcIiNcIikge1xuICAgICAgICBjb2wgPSBjb2wuc2xpY2UoMSk7XG4gICAgICAgIHVzZVBvdW5kID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgbnVtID0gcGFyc2VJbnQoY29sLCAxNik7XG5cbiAgICBsZXQgciA9IChudW0gPj4gMTYpICsgYW10O1xuXG4gICAgaWYgKHIgPiAyNTUpIHIgPSAyNTU7XG4gICAgZWxzZSBpZiAociA8IDApIHIgPSAwO1xuXG4gICAgbGV0IGIgPSAoKG51bSA+PiA4KSAmIDB4MDBGRikgKyBhbXQ7XG5cbiAgICBpZiAoYiA+IDI1NSkgYiA9IDI1NTtcbiAgICBlbHNlIGlmIChiIDwgMCkgYiA9IDA7XG5cbiAgICBsZXQgZyA9IChudW0gJiAweDAwMDBGRikgKyBhbXQ7XG5cbiAgICBpZiAoZyA+IDI1NSkgZyA9IDI1NTtcbiAgICBlbHNlIGlmIChnIDwgMCkgZyA9IDA7XG5cbiAgICByZXR1cm4gKHVzZVBvdW5kID8gXCIjXCIgOiBcIlwiKSArIChnIHwgKGIgPDwgOCkgfCAociA8PCAxNikpLnRvU3RyaW5nKDE2KTtcblxufVxuXG5leHBvcnQgY29uc3QgYnVpbGRUaGVtZSA9ICh0aGVtZSkgPT4ge1xuICAgIGlmICh0aGVtZSAmJiBPYmplY3Qua2V5cyh0aGVtZSkubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IGxpZ2h0ZW4gPSB0aGVtZT8ud2FsbHBhcGVyICYmIGAke0xpZ2h0ZW5EYXJrZW5Db2xvcih0aGVtZS53YWxscGFwZXIsIDIwKX0gIWltcG9ydGFudGA7XG4gICAgICAgIGNvbnN0IGRhcmtlbiA9IHRoZW1lPy53YWxscGFwZXIgJiYgYCR7TGlnaHRlbkRhcmtlbkNvbG9yKHRoZW1lLndhbGxwYXBlciwgLTIwKX0gIWltcG9ydGFudGA7XG4gICAgICAgIGNvbnN0IGZvbnREYXJrZW4gPSB0aGVtZT8udGV4dCAmJiBgJHtMaWdodGVuRGFya2VuQ29sb3IodGhlbWUudGV4dCwgLTIwKX0gIWltcG9ydGFudGA7XG4gICAgICAgIGNvbnN0IGZvbnRMaWdodGVyID0gdGhlbWU/LnRleHQgJiYgYCR7TGlnaHRlbkRhcmtlbkNvbG9yKHRoZW1lLnRleHQsIDYwKX0gIWltcG9ydGFudGA7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgIC5jdXN0b20ge1xuICAgICAgICAgICAgLS1iZ0NvbG9yOiAke3RoZW1lLndhbGxwYXBlcn07XG4gICAgICAgICAgICAtLWZvbnQ6ICR7dGhlbWUuZm9udH07XG4gICAgICAgICAgICAtLXRleHRDb2xvcjogJHt0aGVtZS50ZXh0fTtcbiAgICAgICAgICAgIC0tYmdCdG5QcmltYXJ5OiAke3RoZW1lLnByaW1hcnlfYnV0dG9ufTtcbiAgICAgICAgICAgIC0tYmdCdG5TZWNvbmRhcnk6ICR7dGhlbWUuc2Vjb25kYXJ5X2J1dHRvbn07XG4gICAgICAgICAgICAtLWJ0blByaW1hcnlUZXh0OiAke3RoZW1lLnByaW1hcnlfdGV4dH07XG4gICAgICAgICAgICAtLWJ0blNlY29uZGFyeVRleHQ6ICR7dGhlbWUuc2Vjb25kYXJ5X3RleHR9O1xuICAgIFxuICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHRDb2xvcikgIWltcG9ydGFudDtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250KSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmdDb2xvcikgIWltcG9ydGFudDtcbiAgICAgICB9XG4gICAgICAgIC5jdXN0b20tZm9udCwgLmN1c3RvbS1ibG9jay13b29kc21va2UsIC5jdXN0b20gW2NsYXNzXj0naG9tZV9tZXNzYWdlTm9FbGVtZW50c0NvbnRhaW5lciddLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9oZWFkZXInXSwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfb3B0aW9uc0xpc3QnXSwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfbGVmdENvbnRhaW5lciddLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9kcm9wZG93biddLCAuY3VzdG9tIFtjbGFzc149J2FkdmFuY2VkLXNlYXJjaF9jb250YWluZXInXSwgLmN1c3RvbSBbY2xhc3NePVwiaW5wdXRfaW5wdXRcIl0sIC5jdXN0b20gW2NsYXNzXj1cImFkdmFuY2VkLXNlYXJjaF9pbnB1dFNlYXJjaFwiXSwgLmN1c3RvbSBbY2xhc3NePSdtb2RhbF9tb2RhbF8nXSwgLmN1c3RvbSBbY2xhc3NePVwic2VsZWN0X3NlbGVjdFwiXSwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0sIC5jdXN0b20gW2NsYXNzXj1cImhvbWVfZGF0YUNvbnRhaW5lclwiXSwgLmN1c3RvbSBbY2xhc3NePVwiaG9tZV9oaXN0b3J5Q29udGFpbmVyXCJdLCAuY3VzdG9tIFtjbGFzc149XCJob21lX3Byb2R1Y3REYXRhQ29udGFpbmVyQ29tcGxldGVkXCJdLCAuY3VzdG9tIFtjbGFzc149XCJob21lX3Byb2R1Y3REYXRhQ29udGFpbmVyXCJdLCAuY3VzdG9tIFtjbGFzc149XCJob21lX3NjYW5uZXJEYXRhQ29udGFpbmVyXCJdLCAuY3VzdG9tIFtjbGFzc149XCJtb2RhbF9kaWFsb2dNb2RhbFwiXSwgLmN1c3RvbSBbY2xhc3NePVwicHJvZHVjdERldGFpbHNfcHJpY2VcIl0sIC5jdXN0b20gW2NsYXNzXj1cInByb2R1Y3RDb21wYXJlRGV0YWlsc19ncmFwaENvbnRhaW5lclwiXSwgLmN1c3RvbSBbY2xhc3NePVwicHJvZHVjdERldGFpbHNfZ3JhcGhDb250YWluZXJcIl0sIC5jdXN0b20gW2NsYXNzXj1cImRldGFpbHNDb250YWluZXJfZGV0YWlsc1wiXSwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlciwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0gLnJlYWN0LWRhdGVwaWNrZXIsIC5jdXN0b20tZm9udCAqLCAuY3VzdG9tLWJsb2NrLXdvb2RzbW9rZSAqLCAuY3VzdG9tIFtjbGFzc149J2hvbWVfbWVzc2FnZU5vRWxlbWVudHNDb250YWluZXInXSAqLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9oZWFkZXInXSAqLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9vcHRpb25zTGlzdCddICosIC5jdXN0b20gW2NsYXNzXj0naGVhZGVyX2xlZnRDb250YWluZXInXSAqLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9kcm9wZG93biddICosIC5jdXN0b20gW2NsYXNzXj0nYWR2YW5jZWQtc2VhcmNoX2NvbnRhaW5lciddICosIC5jdXN0b20gW2NsYXNzXj1cImlucHV0X2lucHV0XCJdICosIC5jdXN0b20gW2NsYXNzXj1cImFkdmFuY2VkLXNlYXJjaF9pbnB1dFNlYXJjaFwiXSAqLCAuY3VzdG9tIFtjbGFzc149J21vZGFsX21vZGFsXyddICosIC5jdXN0b20gW2NsYXNzXj1cInNlbGVjdF9zZWxlY3RcIl0gKiwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0gKiwgLmN1c3RvbSBbY2xhc3NePVwiaG9tZV9kYXRhQ29udGFpbmVyXCJdICosIC5jdXN0b20gW2NsYXNzXj1cImhvbWVfaGlzdG9yeUNvbnRhaW5lclwiXSAqLCAuY3VzdG9tIFtjbGFzc149XCJob21lX3Byb2R1Y3REYXRhQ29udGFpbmVyQ29tcGxldGVkXCJdICosIC5jdXN0b20gW2NsYXNzXj1cImhvbWVfcHJvZHVjdERhdGFDb250YWluZXJcIl0gKiwgLmN1c3RvbSBbY2xhc3NePVwiaG9tZV9zY2FubmVyRGF0YUNvbnRhaW5lclwiXSAqLCAuY3VzdG9tIFtjbGFzc149XCJtb2RhbF9kaWFsb2dNb2RhbFwiXSAqLCAuY3VzdG9tIFtjbGFzc149XCJwcm9kdWN0RGV0YWlsc19wcmljZVwiXSAqLCAuY3VzdG9tIFtjbGFzc149XCJwcm9kdWN0Q29tcGFyZURldGFpbHNfZ3JhcGhDb250YWluZXJcIl0gKiwgLmN1c3RvbSBbY2xhc3NePVwicHJvZHVjdERldGFpbHNfZ3JhcGhDb250YWluZXJcIl0gKiwgLmN1c3RvbSBbY2xhc3NePVwiZGV0YWlsc0NvbnRhaW5lcl9kZXRhaWxzXCJdICosIC5jdXN0b20gW2NsYXNzXj1cInJlYWN0LWRhdGVwaWNrZXItcG9wcGVyXCJdIC5yZWFjdC1kYXRlcGlja2VyX19oZWFkZXIgKiwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0gLnJlYWN0LWRhdGVwaWNrZXIgKiB7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dENvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgIH1cbiAgICAgICAgLmN1c3RvbS1ibG9jay13b29kc21va2UsIC5jdXN0b20gW2NsYXNzXj0naG9tZV9tZXNzYWdlTm9FbGVtZW50c0NvbnRhaW5lciddLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9oZWFkZXInXSwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfb3B0aW9uc0xpc3QnXSwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfbGVmdENvbnRhaW5lciddLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9kcm9wZG93biddLCAuY3VzdG9tIFtjbGFzc149J2FkdmFuY2VkLXNlYXJjaF9jb250YWluZXInXSwgLmN1c3RvbSBbY2xhc3NePVwiaW5wdXRfaW5wdXRcIl0sIC5jdXN0b20gW2NsYXNzXj1cImFkdmFuY2VkLXNlYXJjaF9pbnB1dFNlYXJjaFwiXSwgLmN1c3RvbSBbY2xhc3NePSdtb2RhbF9tb2RhbF8nXSwgLmN1c3RvbSBbY2xhc3NePVwic2VsZWN0X3NlbGVjdFwiXSwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0sIC5jdXN0b20gW2NsYXNzXj1cImhvbWVfZGF0YUNvbnRhaW5lclwiXSwgLmN1c3RvbSBbY2xhc3NePVwiaG9tZV9oaXN0b3J5Q29udGFpbmVyXCJdLCAuY3VzdG9tIFtjbGFzc149XCJob21lX3Byb2R1Y3REYXRhQ29udGFpbmVyQ29tcGxldGVkXCJdLCAuY3VzdG9tIFtjbGFzc149XCJob21lX3Byb2R1Y3REYXRhQ29udGFpbmVyXCJdLCAuY3VzdG9tIFtjbGFzc149XCJob21lX3NjYW5uZXJEYXRhQ29udGFpbmVyXCJdLCAuY3VzdG9tIFtjbGFzc149XCJtb2RhbF9kaWFsb2dNb2RhbFwiXSwgLmN1c3RvbSBbY2xhc3NePVwicHJvZHVjdERldGFpbHNfcHJpY2VcIl0sIC5jdXN0b20gW2NsYXNzXj1cInByb2R1Y3RDb21wYXJlRGV0YWlsc19ncmFwaENvbnRhaW5lclwiXSwgLmN1c3RvbSBbY2xhc3NePVwicHJvZHVjdERldGFpbHNfZ3JhcGhDb250YWluZXJcIl0sIC5jdXN0b20gW2NsYXNzXj1cImRldGFpbHNDb250YWluZXJfZGV0YWlsc1wiXSwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0gLnJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlciwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0gLnJlYWN0LWRhdGVwaWNrZXIge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcikhaW1wb3J0YW50O1xuICAgICAgIH1cbiAgICAgICAgLmN1c3RvbS1saW5rLCAuY3VzdG9tIGEsIC5jdXN0b20gW2NsYXNzXj0naG9tZV9tZXNzYWdlTm9FbGVtZW50c0NvbnRhaW5lciddLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9oZWFkZXInXSwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfb3B0aW9uc0xpc3QnXSwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfbGVmdENvbnRhaW5lciddLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9kcm9wZG93biddLCAuY3VzdG9tIFtjbGFzc149J2FkdmFuY2VkLXNlYXJjaF9jb250YWluZXInXSwgLmN1c3RvbSBbY2xhc3NePVwiaW5wdXRfaW5wdXRcIl0sIC5jdXN0b20gW2NsYXNzXj1cImFkdmFuY2VkLXNlYXJjaF9pbnB1dFNlYXJjaFwiXSwgLmN1c3RvbSBbY2xhc3NePSdtb2RhbF9tb2RhbF8nXSwgLmN1c3RvbSBbY2xhc3NePVwic2VsZWN0X3NlbGVjdFwiXSwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0sIC5jdXN0b20gW2NsYXNzXj0naG9tZV9tZXNzYWdlTm9FbGVtZW50c0NvbnRhaW5lciddIGEsIC5jdXN0b20gW2NsYXNzXj0naGVhZGVyX2hlYWRlciddIGEsIC5jdXN0b20gW2NsYXNzXj0naGVhZGVyX29wdGlvbnNMaXN0J10gYSwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfbGVmdENvbnRhaW5lciddIGEsIC5jdXN0b20gW2NsYXNzXj0naGVhZGVyX2Ryb3Bkb3duJ10gYSwgLmN1c3RvbSBbY2xhc3NePSdhZHZhbmNlZC1zZWFyY2hfY29udGFpbmVyJ10gYSwgLmN1c3RvbSBbY2xhc3NePVwiaW5wdXRfaW5wdXRcIl0gYSwgLmN1c3RvbSBbY2xhc3NePVwiYWR2YW5jZWQtc2VhcmNoX2lucHV0U2VhcmNoXCJdIGEsIC5jdXN0b20gW2NsYXNzXj0nbW9kYWxfbW9kYWxfJ10gYSwgLmN1c3RvbSBbY2xhc3NePVwic2VsZWN0X3NlbGVjdFwiXSBhLCAuY3VzdG9tIFtjbGFzc149XCJyZWFjdC1kYXRlcGlja2VyLXBvcHBlclwiXSBhIHtcbiAgICAgICAgICAgIGNvbG9yOiAke2ZvbnRMaWdodGVyfTtcbiAgICAgICB9XG4gICAgICAgIC5jdXN0b20tbGluazpob3ZlciwgLmN1c3RvbSBhOmhvdmVyLCAuY3VzdG9tIFtjbGFzc149J2hvbWVfbWVzc2FnZU5vRWxlbWVudHNDb250YWluZXInXTpob3ZlciwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfaGVhZGVyJ106aG92ZXIsIC5jdXN0b20gW2NsYXNzXj0naGVhZGVyX29wdGlvbnNMaXN0J106aG92ZXIsIC5jdXN0b20gW2NsYXNzXj0naGVhZGVyX2xlZnRDb250YWluZXInXTpob3ZlciwgLmN1c3RvbSBbY2xhc3NePSdoZWFkZXJfZHJvcGRvd24nXTpob3ZlciwgLmN1c3RvbSBbY2xhc3NePSdhZHZhbmNlZC1zZWFyY2hfY29udGFpbmVyJ106aG92ZXIsIC5jdXN0b20gW2NsYXNzXj1cImlucHV0X2lucHV0XCJdOmhvdmVyLCAuY3VzdG9tIFtjbGFzc149XCJhZHZhbmNlZC1zZWFyY2hfaW5wdXRTZWFyY2hcIl06aG92ZXIsIC5jdXN0b20gW2NsYXNzXj0nbW9kYWxfbW9kYWxfJ106aG92ZXIsIC5jdXN0b20gW2NsYXNzXj1cInNlbGVjdF9zZWxlY3RcIl06aG92ZXIsIC5jdXN0b20gW2NsYXNzXj1cInJlYWN0LWRhdGVwaWNrZXItcG9wcGVyXCJdOmhvdmVyLCAuY3VzdG9tIFtjbGFzc149J2hvbWVfbWVzc2FnZU5vRWxlbWVudHNDb250YWluZXInXSBhOmhvdmVyLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9oZWFkZXInXSBhOmhvdmVyLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9vcHRpb25zTGlzdCddIGE6aG92ZXIsIC5jdXN0b20gW2NsYXNzXj0naGVhZGVyX2xlZnRDb250YWluZXInXSBhOmhvdmVyLCAuY3VzdG9tIFtjbGFzc149J2hlYWRlcl9kcm9wZG93biddIGE6aG92ZXIsIC5jdXN0b20gW2NsYXNzXj0nYWR2YW5jZWQtc2VhcmNoX2NvbnRhaW5lciddIGE6aG92ZXIsIC5jdXN0b20gW2NsYXNzXj1cImlucHV0X2lucHV0XCJdIGE6aG92ZXIsIC5jdXN0b20gW2NsYXNzXj1cImFkdmFuY2VkLXNlYXJjaF9pbnB1dFNlYXJjaFwiXSBhOmhvdmVyLCAuY3VzdG9tIFtjbGFzc149J21vZGFsX21vZGFsXyddIGE6aG92ZXIsIC5jdXN0b20gW2NsYXNzXj1cInNlbGVjdF9zZWxlY3RcIl0gYTpob3ZlciwgLmN1c3RvbSBbY2xhc3NePVwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIl0gYTpob3ZlciB7XG4gICAgICAgICAgICBjb2xvcjogJHtmb250TGlnaHRlcn07XG4gICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149XCJob21lX2hpc3RvcnlDb250YWluZXJcIl06bm90KC5wcm9kdWN0SGlzdG9yeUNvbnRhaW5lcikgW2NsYXNzXj1cInNxdWFyZV9zcXVhcmVcIl0ge1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHRDb2xvcikgIWltcG9ydGFudDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJnQ29sb3IpICFpbXBvcnRhbnQ7XG4gICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149J29wdGlvbkxpc3RfdGFiQmFyJ10gW2NsYXNzXj0nb3B0aW9uTGlzdF9zZWxlY3RlZCddIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJnQ29sb3IpICFpbXBvcnRhbnQ7XG4gICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149J29wdGlvbkxpc3RfdGFiQmFyJ10gbGkge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmdDb2xvcikgIWltcG9ydGFudDtcbiAgICAgICB9XG4gICAgICAgIC5jdXN0b20gLnRhYmxlLCAuY3VzdG9tIFtjbGFzc149J3RhYmxlX3RhYmxlQ29tcGxleCddIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7bGlnaHRlbn07XG4gICAgICAgICAgICBjb2xvcjogJHtmb250RGFya2VufTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDEwcHggLTZweCBibGFjaztcbiAgICAgICAgICAgIFxuICAgICAgIH1cbiAgICAgICAgLmN1c3RvbSAudGFibGUgdGgsIC5jdXN0b20gW2NsYXNzXj0ndGFibGVfdGFibGVDb21wbGV4J10gdGgge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtkYXJrZW59O1xuXG4gICAgICAgfVxuICAgICAgICAuY3VzdG9tIC50YWJsZSB0cjpudGgtY2hpbGQob2RkKSwgLmN1c3RvbSBbY2xhc3NePSd0YWJsZV90YWJsZUNvbXBsZXgnXSB0cjpudGgtY2hpbGQob2RkKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2xpZ2h0ZW59O1xuICAgICAgIH1cbiAgICAgICAgLmN1c3RvbSBbY2xhc3NePVwibW9kYWxfZGlhbG9nTW9kYWxDb250YWluZXJcIl0sIC5jdXN0b20gW2NsYXNzXj1cIm1vZGFsX21vZGFsQ29udGFpbmVyXCJdIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7bGlnaHRlbn07XG4gICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149XCJpbnB1dF9ibGFja0lucHV0XCJdIHtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1idG5QcmltYXJ5VGV4dCkgIWltcG9ydGFudDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJnQnRuUHJpbWFyeSkgIWltcG9ydGFudDtcbiAgICAgICB9XG4gICAgICAgIC5jdXN0b20gW2NsYXNzXj1cImJ1dHRvbl9wcmltYXJ5QnV0dG9uX18yN21iWVwiXSB7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tYnRuUHJpbWFyeVRleHQpICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0J0blByaW1hcnkpICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICBwYWRkaW5nOiAwLjVlbTtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tYmdCdG5QcmltYXJ5KSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xuICAgICAgIH1cbiAgICAgICAuY3VzdG9tIFtjbGFzc149XCJidXR0b25fc2Vjb25kYXJ5QnV0dG9uX18xTjF2TVwiXSB7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tYnRuU2Vjb25kYXJ5VGV4dCkgIWltcG9ydGFudDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJnQnRuU2Vjb25kYXJ5KSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgcGFkZGluZzogMC41ZW07XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkIDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149XCJob21lX2NhcHR1cmVzTGlzdFwiXSBwIHtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0Q29sb3IpICFpbXBvcnRhbnQ7XG4gICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149XCJob21lX2NhcHR1cmVzTGlzdFwiXSBwW2NsYXNzXj1cImhvbWVfd2l0aFByb2R1Y3RcIl0ge1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLWJ0blNlY29uZGFyeVRleHQpICFpbXBvcnRhbnQ7XG4gICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149XCJyZWFjdC1kYXRlcGlja2VyLXBvcHBlclwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1rZXlib2FyZC1zZWxlY3RlZCB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZGUzYzI2ICFpbXBvcnRhbnQ7XG4gICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149XCJyZWFjdC1kYXRlcGlja2VyLXBvcHBlclwiXSAucmVhY3QtZGF0ZXBpY2tlcl9fZGF5OmhvdmVyIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMxZjIyMjMgIWltcG9ydGFudDtcbiAgICAgICB9XG4gICAgICAgLmN1c3RvbSBbY2xhc3NePVwiaG9tZV9tZXNzYWdlTm9FbGVtZW50c0NvbnRhaW5lcl9fMXE5SVdcIl0ge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmdCdG5QcmltYXJ5KSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLWJ0blByaW1hcnlUZXh0KSAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgICAgIC5jdXN0b20gW2NsYXNzXj1cImJ0bi10aGVtZVwiXSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0J0blByaW1hcnkpICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tYnRuUHJpbWFyeVRleHQpICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLmN1c3RvbSBbY2xhc3NePVwiYnRuXCJdIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJnQnRuUHJpbWFyeSkgIWltcG9ydGFudDtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1idG5QcmltYXJ5VGV4dCkgIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgICAgICAuY3VzdG9tIFtjbGFzc149XCJpbnB1dF9lcnJvck1lc3NhZ2VfXzE2eXhIXCJdIHtcbiAgICAgICAgICAgIGNvbG9yOiByZWQgIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgICAgICAuY3VycmVudC1wcm9kdWN0IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJnQnRuUHJpbWFyeSkgIWltcG9ydGFudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jdXN0b20gLnJlYWN0LWF1dG9zdWdnZXN0X19pbnB1dDo6cGxhY2Vob2xkZXIgeyAgXG4gICAgICAgICAgICBjb2xvcjogJHtmb250TGlnaHRlcn07XG4gICAgICAgIH1cbiAgICAgICAgLmN1c3RvbSAucmVhY3QtYXV0b3N1Z2dlc3RfX2lucHV0IHtcbiAgICAgICAgICAgIG1pbi13aWR0aDogMTAwJTtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiAzMHB4O1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiQ2F0YW1hcmFuXCIsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBmb250LXdlaWdodDogMzAwO1xuICAgICAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgIGNvbG9yOiAke2ZvbnRMaWdodGVyfTtcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNTY1NjU2O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICAucHJvZHVjdC1yZXBvcnRfZGl2Q29udGVudF9fMlUxWEsge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmdCdG5QcmltYXJ5KSAhaW1wb3J0YW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuY2FyZF90ZXh0LWJvcmRlcl9fYUlRUloge1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHRDb2xvcikgIWltcG9ydGFudDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkICFpbXBvcnRhbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5jYXJkX2JvcmRlci1wcm9kdWN0X18zcEtLUyB7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dENvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICAucHJvZHVjdC1yZXBvcnRfdGFnc19fT0cydm4ge1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtmb250TGlnaHRlcn07XG4gICAgICAgICAgfVxuICAgICAgICAgIC5wcm9kdWN0LXJlcG9ydF9idG5Ub2dnbGVfXzFJUjdPIHtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0Q29sb3IpICFpbXBvcnRhbnQ7IFxuICAgICAgICAgIH1cbiAgICBgXG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIkByZWFjdC1nb29nbGUtbWFwcy9hcGlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXhpb3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZGF0ZS1mbnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZGF0ZS1mbnMvbG9jYWxlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImxvZGFzaC5nZXRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9oZWFkXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvcm91dGVyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LWF1dG9zdWdnZXN0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LWlzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LW5leHRqcy10b2FzdFwiKTsiXSwic291cmNlUm9vdCI6IiJ9